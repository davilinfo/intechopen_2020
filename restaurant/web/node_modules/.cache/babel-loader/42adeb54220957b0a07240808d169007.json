{"ast":null,"code":"/* bignumber.js v1.3.0 https://github.com/MikeMcl/bignumber.js/LICENCE */\n\n/*jslint bitwise: true, eqeq: true, plusplus: true, sub: true, white: true, maxerr: 500 */\n\n/*global module */\n\n/*\r\n  bignumber.js v1.3.0\r\n  A JavaScript library for arbitrary-precision arithmetic.\r\n  https://github.com/MikeMcl/bignumber.js\r\n  Copyright (c) 2012 Michael Mclaughlin <M8ch88l@gmail.com>\r\n  MIT Expat Licence\r\n*/\n\n/*********************************** DEFAULTS ************************************/\n\n/*\r\n * The default values below must be integers within the stated ranges (inclusive).\r\n * Most of these values can be changed during run-time using BigNumber.config().\r\n */\n\n/*\r\n * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP,\r\n * MAX_EXP, and the argument to toFixed, toPrecision and toExponential, beyond\r\n * which an exception is thrown (if ERRORS is true).\r\n */\nvar MAX = 1E9,\n    // 0 to 1e+9\n// Limit of magnitude of exponent argument to toPower.\nMAX_POWER = 1E6,\n    // 1 to 1e+6\n// The maximum number of decimal places for operations involving division.\nDECIMAL_PLACES = 20,\n    // 0 to MAX\n\n/*\r\n * The rounding mode used when rounding to the above decimal places, and when\r\n * using toFixed, toPrecision and toExponential, and round (default value).\r\n * UP         0 Away from zero.\r\n * DOWN       1 Towards zero.\r\n * CEIL       2 Towards +Infinity.\r\n * FLOOR      3 Towards -Infinity.\r\n * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n */\nROUNDING_MODE = 4,\n    // 0 to 8\n// EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n// The exponent value at and beneath which toString returns exponential notation.\n// Number type: -7\nTO_EXP_NEG = -7,\n    // 0 to -MAX\n// The exponent value at and above which toString returns exponential notation.\n// Number type: 21\nTO_EXP_POS = 21,\n    // 0 to MAX\n// RANGE : [MIN_EXP, MAX_EXP]\n// The minimum exponent value, beneath which underflow to zero occurs.\n// Number type: -324  (5e-324)\nMIN_EXP = -MAX,\n    // -1 to -MAX\n// The maximum exponent value, above which overflow to Infinity occurs.\n// Number type:  308  (1.7976931348623157e+308)\nMAX_EXP = MAX,\n    // 1 to MAX\n// Whether BigNumber Errors are ever thrown.\n// CHANGE parseInt to parseFloat if changing ERRORS to false.\nERRORS = true,\n    // true or false\nparse = parseInt,\n    // parseInt or parseFloat\n\n/***********************************************************************************/\nP = BigNumber.prototype,\n    DIGITS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\n    outOfRange,\n    id = 0,\n    isValid = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    trim = String.prototype.trim || function () {\n  return this.replace(/^\\s+|\\s+$/g, '');\n},\n    ONE = BigNumber(1); // CONSTRUCTOR\n\n/*\r\n * The exported function.\r\n * Create and return a new instance of a BigNumber object.\r\n *\r\n * n {number|string|BigNumber} A numeric value.\r\n * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n */\n\n\nfunction BigNumber(n, b) {\n  var e,\n      i,\n      isNum,\n      digits,\n      valid,\n      orig,\n      x = this; // Enable constructor usage without new.\n\n  if (!(x instanceof BigNumber)) {\n    return new BigNumber(n, b);\n  } // Duplicate.\n\n\n  if (n instanceof BigNumber) {\n    id = 0; // e is undefined.\n\n    if (b !== e) {\n      n += '';\n    } else {\n      x['s'] = n['s'];\n      x['e'] = n['e'];\n      x['c'] = (n = n['c']) ? n.slice() : n;\n      return;\n    }\n  } // If number, check if minus zero.\n\n\n  if (typeof n != 'string') {\n    n = (isNum = typeof n == 'number' || Object.prototype.toString.call(n) == '[object Number]') && n === 0 && 1 / n < 0 ? '-0' : n + '';\n  }\n\n  orig = n;\n\n  if (b === e && isValid.test(n)) {\n    // Determine sign.\n    x['s'] = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1; // Either n is not a valid BigNumber or a base has been specified.\n  } else {\n    // Enable exponential notation to be used with base 10 argument.\n    // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\n    if (b == 10) {\n      return setMode(n, DECIMAL_PLACES, ROUNDING_MODE);\n    }\n\n    n = trim.call(n).replace(/^\\+(?!-)/, '');\n    x['s'] = n.charAt(0) == '-' ? (n = n.replace(/^-(?!-)/, ''), -1) : 1;\n\n    if (b != null) {\n      if ((b == (b | 0) || !ERRORS) && !(outOfRange = !(b >= 2 && b < 65))) {\n        digits = '[' + DIGITS.slice(0, b = b | 0) + ']+'; // Before non-decimal number validity test and base conversion\n        // remove the `.` from e.g. '1.', and replace e.g. '.1' with '0.1'.\n\n        n = n.replace(/\\.$/, '').replace(/^\\./, '0.'); // Any number in exponential form will fail due to the e+/-.\n\n        if (valid = new RegExp('^' + digits + '(?:\\\\.' + digits + ')?$', b < 37 ? 'i' : '').test(n)) {\n          if (isNum) {\n            if (n.replace(/^0\\.0*|\\./, '').length > 15) {\n              // 'new BigNumber() number type has more than 15 significant digits: {n}'\n              ifExceptionsThrow(orig, 0);\n            } // Prevent later check for length on converted number.\n\n\n            isNum = !isNum;\n          }\n\n          n = convert(n, 10, b, x['s']);\n        } else if (n != 'Infinity' && n != 'NaN') {\n          // 'new BigNumber() not a base {b} number: {n}'\n          ifExceptionsThrow(orig, 1, b);\n          n = 'NaN';\n        }\n      } else {\n        // 'new BigNumber() base not an integer: {b}'\n        // 'new BigNumber() base out of range: {b}'\n        ifExceptionsThrow(b, 2); // Ignore base.\n\n        valid = isValid.test(n);\n      }\n    } else {\n      valid = isValid.test(n);\n    }\n\n    if (!valid) {\n      // Infinity/NaN\n      x['c'] = x['e'] = null; // NaN\n\n      if (n != 'Infinity') {\n        // No exception on NaN.\n        if (n != 'NaN') {\n          // 'new BigNumber() not a number: {n}'\n          ifExceptionsThrow(orig, 3);\n        }\n\n        x['s'] = null;\n      }\n\n      id = 0;\n      return;\n    }\n  } // Decimal point?\n\n\n  if ((e = n.indexOf('.')) > -1) {\n    n = n.replace('.', '');\n  } // Exponential form?\n\n\n  if ((i = n.search(/e/i)) > 0) {\n    // Determine exponent.\n    if (e < 0) {\n      e = i;\n    }\n\n    e += +n.slice(i + 1);\n    n = n.substring(0, i);\n  } else if (e < 0) {\n    // Integer.\n    e = n.length;\n  } // Determine leading zeros.\n\n\n  for (i = 0; n.charAt(i) == '0'; i++) {}\n\n  b = n.length; // Disallow numbers with over 15 significant digits if number type.\n\n  if (isNum && b > 15 && n.slice(i).length > 15) {\n    // 'new BigNumber() number type has more than 15 significant digits: {n}'\n    ifExceptionsThrow(orig, 0);\n  }\n\n  id = 0; // Overflow?\n\n  if ((e -= i + 1) > MAX_EXP) {\n    // Infinity.\n    x['c'] = x['e'] = null; // Zero or underflow?\n  } else if (i == b || e < MIN_EXP) {\n    // Zero.\n    x['c'] = [x['e'] = 0];\n  } else {\n    // Determine trailing zeros.\n    for (; n.charAt(--b) == '0';) {}\n\n    x['e'] = e;\n    x['c'] = []; // Convert string to array of digits (without leading and trailing zeros).\n\n    for (e = 0; i <= b; x['c'][e++] = +n.charAt(i++)) {}\n  }\n} // CONSTRUCTOR PROPERTIES/METHODS\n\n\nBigNumber['ROUND_UP'] = 0;\nBigNumber['ROUND_DOWN'] = 1;\nBigNumber['ROUND_CEIL'] = 2;\nBigNumber['ROUND_FLOOR'] = 3;\nBigNumber['ROUND_HALF_UP'] = 4;\nBigNumber['ROUND_HALF_DOWN'] = 5;\nBigNumber['ROUND_HALF_EVEN'] = 6;\nBigNumber['ROUND_HALF_CEIL'] = 7;\nBigNumber['ROUND_HALF_FLOOR'] = 8;\n/*\r\n * Create an instance from a Buffer\r\n */\n\nBigNumber['fromBuffer'] = function (buf, opts) {\n  if (!opts) opts = {};\n  var endian = {\n    1: 'big',\n    '-1': 'little'\n  }[opts.endian] || opts.endian || 'big';\n  var size = opts.size === 'auto' ? Math.ceil(buf.length) : opts.size || 1;\n\n  if (buf.length % size !== 0) {\n    throw new RangeError('Buffer length (' + buf.length + ')' + ' must be a multiple of size (' + size + ')');\n  }\n\n  var hex = [];\n\n  for (var i = 0; i < buf.length; i += size) {\n    var chunk = [];\n\n    for (var j = 0; j < size; j++) {\n      chunk.push(buf[i + (endian === 'big' ? j : size - j - 1)]);\n    }\n\n    hex.push(chunk.map(function (c) {\n      return (c < 16 ? '0' : '') + c.toString(16);\n    }).join(''));\n  }\n\n  return BigNumber(hex.join(''), 16);\n};\n/*\r\n * Configure infrequently-changing library-wide settings.\r\n *\r\n * Accept an object or an argument list, with one or many of the following\r\n * properties or parameters respectively:\r\n * [ DECIMAL_PLACES [, ROUNDING_MODE [, EXPONENTIAL_AT [, RANGE [, ERRORS ]]]]]\r\n *\r\n * E.g.\r\n * BigNumber.config(20, 4) is equivalent to\r\n * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n * Ignore properties/parameters set to null or undefined.\r\n *\r\n * Return an object with the properties current values.\r\n */\n\n\nBigNumber['config'] = function () {\n  var v,\n      p,\n      i = 0,\n      r = {},\n      a = arguments,\n      o = a[0],\n      c = 'config',\n      inRange = function inRange(n, lo, hi) {\n    return !((outOfRange = n < lo || n > hi) || parse(n) != n && n !== 0);\n  },\n      has = o && typeof o == 'object' ? function () {\n    if (o.hasOwnProperty(p)) return (v = o[p]) != null;\n  } : function () {\n    if (a.length > i) return (v = a[i++]) != null;\n  }; // [DECIMAL_PLACES] {number} Integer, 0 to MAX inclusive.\n\n\n  if (has(p = 'DECIMAL_PLACES')) {\n    if (inRange(v, 0, MAX)) {\n      DECIMAL_PLACES = v | 0;\n    } else {\n      // 'config() DECIMAL_PLACES not an integer: {v}'\n      // 'config() DECIMAL_PLACES out of range: {v}'\n      ifExceptionsThrow(v, p, c);\n    }\n  }\n\n  r[p] = DECIMAL_PLACES; // [ROUNDING_MODE] {number} Integer, 0 to 8 inclusive.\n\n  if (has(p = 'ROUNDING_MODE')) {\n    if (inRange(v, 0, 8)) {\n      ROUNDING_MODE = v | 0;\n    } else {\n      // 'config() ROUNDING_MODE not an integer: {v}'\n      // 'config() ROUNDING_MODE out of range: {v}'\n      ifExceptionsThrow(v, p, c);\n    }\n  }\n\n  r[p] = ROUNDING_MODE;\n  /*\r\n   * [EXPONENTIAL_AT] {number|number[]} Integer, -MAX to MAX inclusive or\r\n   * [ integer -MAX to 0 inclusive, 0 to MAX inclusive ].\r\n   */\n\n  if (has(p = 'EXPONENTIAL_AT')) {\n    if (inRange(v, -MAX, MAX)) {\n      TO_EXP_NEG = -(TO_EXP_POS = ~~(v < 0 ? -v : +v));\n    } else if (!outOfRange && v && inRange(v[0], -MAX, 0) && inRange(v[1], 0, MAX)) {\n      TO_EXP_NEG = ~~v[0];\n      TO_EXP_POS = ~~v[1];\n    } else {\n      // 'config() EXPONENTIAL_AT not an integer or not [integer, integer]: {v}'\n      // 'config() EXPONENTIAL_AT out of range or not [negative, positive: {v}'\n      ifExceptionsThrow(v, p, c, 1);\n    }\n  }\n\n  r[p] = [TO_EXP_NEG, TO_EXP_POS];\n  /*\r\n   * [RANGE][ {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n   * [ integer -MAX to -1 inclusive, integer 1 to MAX inclusive ].\r\n   */\n\n  if (has(p = 'RANGE')) {\n    if (inRange(v, -MAX, MAX) && ~~v) {\n      MIN_EXP = -(MAX_EXP = ~~(v < 0 ? -v : +v));\n    } else if (!outOfRange && v && inRange(v[0], -MAX, -1) && inRange(v[1], 1, MAX)) {\n      MIN_EXP = ~~v[0], MAX_EXP = ~~v[1];\n    } else {\n      // 'config() RANGE not a non-zero integer or not [integer, integer]: {v}'\n      // 'config() RANGE out of range or not [negative, positive: {v}'\n      ifExceptionsThrow(v, p, c, 1, 1);\n    }\n  }\n\n  r[p] = [MIN_EXP, MAX_EXP]; // [ERRORS] {boolean|number} true, false, 1 or 0.\n\n  if (has(p = 'ERRORS')) {\n    if (v === !!v || v === 1 || v === 0) {\n      parse = (outOfRange = id = 0, ERRORS = !!v) ? parseInt : parseFloat;\n    } else {\n      // 'config() ERRORS not a boolean or binary digit: {v}'\n      ifExceptionsThrow(v, p, c, 0, 0, 1);\n    }\n  }\n\n  r[p] = ERRORS;\n  return r;\n}; // PRIVATE FUNCTIONS\n// Assemble error messages. Throw BigNumber Errors.\n\n\nfunction ifExceptionsThrow(arg, i, j, isArray, isRange, isErrors) {\n  if (ERRORS) {\n    var error,\n        method = ['new BigNumber', 'cmp', 'div', 'eq', 'gt', 'gte', 'lt', 'lte', 'minus', 'mod', 'plus', 'times', 'toFr'][id ? id < 0 ? -id : id : 1 / id < 0 ? 1 : 0] + '()',\n        message = outOfRange ? ' out of range' : ' not a' + (isRange ? ' non-zero' : 'n') + ' integer';\n    message = ([method + ' number type has more than 15 significant digits', method + ' not a base ' + j + ' number', method + ' base' + message, method + ' not a number'][i] || j + '() ' + i + (isErrors ? ' not a boolean or binary digit' : message + (isArray ? ' or not [' + (outOfRange ? ' negative, positive' : ' integer, integer') + ' ]' : ''))) + ': ' + arg;\n    outOfRange = id = 0;\n    error = new Error(message);\n    error['name'] = 'BigNumber Error';\n    throw error;\n  }\n}\n/*\r\n * Convert a numeric string of baseIn to a numeric string of baseOut.\r\n */\n\n\nfunction convert(nStr, baseOut, baseIn, sign) {\n  var e, dvs, dvd, nArr, fracArr, fracBN; // Convert string of base bIn to an array of numbers of baseOut.\n  // Eg. strToArr('255', 10) where baseOut is 16, returns [15, 15].\n  // Eg. strToArr('ff', 16)  where baseOut is 10, returns [2, 5, 5].\n\n  function strToArr(str, bIn) {\n    var j,\n        i = 0,\n        strL = str.length,\n        arrL,\n        arr = [0];\n\n    for (bIn = bIn || baseIn; i < strL; i++) {\n      for (arrL = arr.length, j = 0; j < arrL; arr[j] *= bIn, j++) {}\n\n      for (arr[0] += DIGITS.indexOf(str.charAt(i)), j = 0; j < arr.length; j++) {\n        if (arr[j] > baseOut - 1) {\n          if (arr[j + 1] == null) {\n            arr[j + 1] = 0;\n          }\n\n          arr[j + 1] += arr[j] / baseOut ^ 0;\n          arr[j] %= baseOut;\n        }\n      }\n    }\n\n    return arr.reverse();\n  } // Convert array to string.\n  // E.g. arrToStr( [9, 10, 11] ) becomes '9ab' (in bases above 11).\n\n\n  function arrToStr(arr) {\n    var i = 0,\n        arrL = arr.length,\n        str = '';\n\n    for (; i < arrL; str += DIGITS.charAt(arr[i++])) {}\n\n    return str;\n  }\n\n  if (baseIn < 37) {\n    nStr = nStr.toLowerCase();\n  }\n  /*\r\n   * If non-integer convert integer part and fraction part separately.\r\n   * Convert the fraction part as if it is an integer than use division to\r\n   * reduce it down again to a value less than one.\r\n   */\n\n\n  if ((e = nStr.indexOf('.')) > -1) {\n    /*\r\n     * Calculate the power to which to raise the base to get the number\r\n     * to divide the fraction part by after it has been converted as an\r\n     * integer to the required base.\r\n     */\n    e = nStr.length - e - 1; // Use toFixed to avoid possible exponential notation.\n\n    dvs = strToArr(new BigNumber(baseIn)['pow'](e)['toF'](), 10);\n    nArr = nStr.split('.'); // Convert the base of the fraction part (as integer).\n\n    dvd = strToArr(nArr[1]); // Convert the base of the integer part.\n\n    nArr = strToArr(nArr[0]); // Result will be a BigNumber with a value less than 1.\n\n    fracBN = divide(dvd, dvs, dvd.length - dvs.length, sign, baseOut, // Is least significant digit of integer part an odd number?\n    nArr[nArr.length - 1] & 1);\n    fracArr = fracBN['c']; // e can be <= 0  ( if e == 0, fracArr is [0] or [1] ).\n\n    if (e = fracBN['e']) {\n      // Append zeros according to the exponent of the result.\n      for (; ++e; fracArr.unshift(0)) {} // Append the fraction part to the converted integer part.\n\n\n      nStr = arrToStr(nArr) + '.' + arrToStr(fracArr); // fracArr is [1].\n      // Fraction digits rounded up, so increment last digit of integer part.\n    } else if (fracArr[0]) {\n      if (nArr[e = nArr.length - 1] < baseOut - 1) {\n        ++nArr[e];\n        nStr = arrToStr(nArr);\n      } else {\n        nStr = new BigNumber(arrToStr(nArr), baseOut)['plus'](ONE)['toS'](baseOut);\n      } // fracArr is [0]. No fraction digits.\n\n    } else {\n      nStr = arrToStr(nArr);\n    }\n  } else {\n    // Simple integer. Convert base.\n    nStr = arrToStr(strToArr(nStr));\n  }\n\n  return nStr;\n} // Perform division in the specified base. Called by div and convert.\n\n\nfunction divide(dvd, dvs, exp, s, base, isOdd) {\n  var dvsL,\n      dvsT,\n      next,\n      cmp,\n      remI,\n      dvsZ = dvs.slice(),\n      dvdI = dvsL = dvs.length,\n      dvdL = dvd.length,\n      rem = dvd.slice(0, dvsL),\n      remL = rem.length,\n      quo = new BigNumber(ONE),\n      qc = quo['c'] = [],\n      qi = 0,\n      dig = DECIMAL_PLACES + (quo['e'] = exp) + 1;\n  quo['s'] = s;\n  s = dig < 0 ? 0 : dig; // Add zeros to make remainder as long as divisor.\n\n  for (; remL++ < dvsL; rem.push(0)) {} // Create version of divisor with leading zero.\n\n\n  dvsZ.unshift(0);\n\n  do {\n    // 'next' is how many times the divisor goes into the current remainder.\n    for (next = 0; next < base; next++) {\n      // Compare divisor and remainder.\n      if (dvsL != (remL = rem.length)) {\n        cmp = dvsL > remL ? 1 : -1;\n      } else {\n        for (remI = -1, cmp = 0; ++remI < dvsL;) {\n          if (dvs[remI] != rem[remI]) {\n            cmp = dvs[remI] > rem[remI] ? 1 : -1;\n            break;\n          }\n        }\n      } // Subtract divisor from remainder (if divisor < remainder).\n\n\n      if (cmp < 0) {\n        // Remainder cannot be more than one digit longer than divisor.\n        // Equalise lengths using divisor with extra leading zero?\n        for (dvsT = remL == dvsL ? dvs : dvsZ; remL;) {\n          if (rem[--remL] < dvsT[remL]) {\n            for (remI = remL; remI && !rem[--remI]; rem[remI] = base - 1) {}\n\n            --rem[remI];\n            rem[remL] += base;\n          }\n\n          rem[remL] -= dvsT[remL];\n        }\n\n        for (; !rem[0]; rem.shift()) {}\n      } else {\n        break;\n      }\n    } // Add the 'next' digit to the result array.\n\n\n    qc[qi++] = cmp ? next : ++next; // Update the remainder.\n\n    rem[0] && cmp ? rem[remL] = dvd[dvdI] || 0 : rem = [dvd[dvdI]];\n  } while ((dvdI++ < dvdL || rem[0] != null) && s--); // Leading zero? Do not remove if result is simply zero (qi == 1).\n\n\n  if (!qc[0] && qi != 1) {\n    // There can't be more than one zero.\n    --quo['e'];\n    qc.shift();\n  } // Round?\n\n\n  if (qi > dig) {\n    rnd(quo, DECIMAL_PLACES, base, isOdd, rem[0] != null);\n  } // Overflow?\n\n\n  if (quo['e'] > MAX_EXP) {\n    // Infinity.\n    quo['c'] = quo['e'] = null; // Underflow?\n  } else if (quo['e'] < MIN_EXP) {\n    // Zero.\n    quo['c'] = [quo['e'] = 0];\n  }\n\n  return quo;\n}\n/*\r\n * Return a string representing the value of BigNumber n in normal or\r\n * exponential notation rounded to the specified decimal places or\r\n * significant digits.\r\n * Called by toString, toExponential (exp 1), toFixed, and toPrecision (exp 2).\r\n * d is the index (with the value in normal notation) of the digit that may be\r\n * rounded up.\r\n */\n\n\nfunction format(n, d, exp) {\n  // Initially, i is the number of decimal places required.\n  var i = d - (n = new BigNumber(n))['e'],\n      c = n['c']; // +-Infinity or NaN?\n\n  if (!c) {\n    return n['toS']();\n  } // Round?\n\n\n  if (c.length > ++d) {\n    rnd(n, i, 10);\n  } // Recalculate d if toFixed as n['e'] may have changed if value rounded up.\n\n\n  i = c[0] == 0 ? i + 1 : exp ? d : n['e'] + i + 1; // Append zeros?\n\n  for (; c.length < i; c.push(0)) {}\n\n  i = n['e'];\n  /*\r\n   * toPrecision returns exponential notation if the number of significant\r\n   * digits specified is less than the number of digits necessary to\r\n   * represent the integer part of the value in normal notation.\r\n   */\n\n  return exp == 1 || exp == 2 && (--d < i || i <= TO_EXP_NEG) // Exponential notation.\n  ? (n['s'] < 0 && c[0] ? '-' : '') + (c.length > 1 ? (c.splice(1, 0, '.'), c.join('')) : c[0]) + (i < 0 ? 'e' : 'e+') + i // Normal notation.\n  : n['toS']();\n} // Round if necessary.\n// Called by divide, format, setMode and sqrt.\n\n\nfunction rnd(x, dp, base, isOdd, r) {\n  var xc = x['c'],\n      isNeg = x['s'] < 0,\n      half = base / 2,\n      i = x['e'] + dp + 1,\n      // 'next' is the digit after the digit that may be rounded up.\n  next = xc[i],\n\n  /*\r\n   * 'more' is whether there are digits after 'next'.\r\n   * E.g.\r\n   * 0.005 (e = -3) to be rounded to 0 decimal places (dp = 0) gives i = -2\r\n   * The 'next' digit is zero, and there ARE 'more' digits after it.\r\n   * 0.5 (e = -1) dp = 0 gives i = 0\r\n   * The 'next' digit is 5 and there are no 'more' digits after it.\r\n   */\n  more = r || i < 0 || xc[i + 1] != null;\n  r = ROUNDING_MODE < 4 ? (next != null || more) && (ROUNDING_MODE == 0 || ROUNDING_MODE == 2 && !isNeg || ROUNDING_MODE == 3 && isNeg) : next > half || next == half && (ROUNDING_MODE == 4 || more ||\n  /*\r\n   * isOdd is used in base conversion and refers to the least significant\r\n   * digit of the integer part of the value to be converted. The fraction\r\n   * part is rounded by this method separately from the integer part.\r\n   */\n  ROUNDING_MODE == 6 && (xc[i - 1] & 1 || !dp && isOdd) || ROUNDING_MODE == 7 && !isNeg || ROUNDING_MODE == 8 && isNeg);\n\n  if (i < 1 || !xc[0]) {\n    xc.length = 0;\n    xc.push(0);\n\n    if (r) {\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n      xc[0] = 1;\n      x['e'] = -dp;\n    } else {\n      // Zero.\n      x['e'] = 0;\n    }\n\n    return x;\n  } // Remove any digits after the required decimal places.\n\n\n  xc.length = i--; // Round up?\n\n  if (r) {\n    // Rounding up may mean the previous digit has to be rounded up and so on.\n    for (--base; ++xc[i] > base;) {\n      xc[i] = 0;\n\n      if (!i--) {\n        ++x['e'];\n        xc.unshift(1);\n      }\n    }\n  } // Remove trailing zeros.\n\n\n  for (i = xc.length; !xc[--i]; xc.pop()) {}\n\n  return x;\n} // Round after setting the appropriate rounding mode.\n// Handles ceil, floor and round.\n\n\nfunction setMode(x, dp, rm) {\n  var r = ROUNDING_MODE;\n  ROUNDING_MODE = rm;\n  x = new BigNumber(x);\n  x['c'] && rnd(x, dp, 10);\n  ROUNDING_MODE = r;\n  return x;\n} // PROTOTYPE/INSTANCE METHODS\n\n/*\r\n * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n */\n\n\nP['abs'] = P['absoluteValue'] = function () {\n  var x = new BigNumber(this);\n\n  if (x['s'] < 0) {\n    x['s'] = 1;\n  }\n\n  return x;\n};\n/*\r\n * Return the bit length of the number.\r\n */\n\n\nP['bitLength'] = function () {\n  return this.toString(2).length;\n};\n/*\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * rounded to a whole number in the direction of Infinity.\r\n */\n\n\nP['ceil'] = function () {\n  return setMode(this, 0, 2);\n};\n/*\r\n * Return\r\n * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n * 0 if they have the same value,\r\n * or null if the value of either is NaN.\r\n */\n\n\nP['comparedTo'] = P['cmp'] = function (y, b) {\n  var a,\n      x = this,\n      xc = x['c'],\n      yc = (id = -id, y = new BigNumber(y, b))['c'],\n      i = x['s'],\n      j = y['s'],\n      k = x['e'],\n      l = y['e']; // Either NaN?\n\n  if (!i || !j) {\n    return null;\n  }\n\n  a = xc && !xc[0], b = yc && !yc[0]; // Either zero?\n\n  if (a || b) {\n    return a ? b ? 0 : -j : i;\n  } // Signs differ?\n\n\n  if (i != j) {\n    return i;\n  } // Either Infinity?\n\n\n  if (a = i < 0, b = k == l, !xc || !yc) {\n    return b ? 0 : !xc ^ a ? 1 : -1;\n  } // Compare exponents.\n\n\n  if (!b) {\n    return k > l ^ a ? 1 : -1;\n  } // Compare digit by digit.\n\n\n  for (i = -1, j = (k = xc.length) < (l = yc.length) ? k : l; ++i < j;) {\n    if (xc[i] != yc[i]) {\n      return xc[i] > yc[i] ^ a ? 1 : -1;\n    }\n  } // Compare lengths.\n\n\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\n};\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * divided by the value of BigNumber(y, b), rounded according to\r\n * DECIMAL_PLACES and ROUNDING_MODE.\r\n */\n\n\nP['dividedBy'] = P['div'] = function (y, b) {\n  var xc = this['c'],\n      xe = this['e'],\n      xs = this['s'],\n      yc = (id = 2, y = new BigNumber(y, b))['c'],\n      ye = y['e'],\n      ys = y['s'],\n      s = xs == ys ? 1 : -1; // Either NaN/Infinity/0?\n\n  return !xe && (!xc || !xc[0]) || !ye && (!yc || !yc[0]) // Either NaN?\n  ? new BigNumber(!xs || !ys || ( // Both 0 or both Infinity?\n  xc ? yc && xc[0] == yc[0] : !yc) // Return NaN.\n  ? NaN // x is 0 or y is Infinity?\n  : xc && xc[0] == 0 || !yc // Return +-0.\n  ? s * 0 // y is 0. Return +-Infinity.\n  : s / 0) : divide(xc, yc, xe - ye, s, 10);\n};\n/*\r\n * Return true if the value of this BigNumber is equal to the value of\r\n * BigNumber(n, b), otherwise returns false.\r\n */\n\n\nP['equals'] = P['eq'] = function (n, b) {\n  id = 3;\n  return this['cmp'](n, b) === 0;\n};\n/*\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * rounded to a whole number in the direction of -Infinity.\r\n */\n\n\nP['floor'] = function () {\n  return setMode(this, 0, 3);\n};\n/*\r\n * Return true if the value of this BigNumber is greater than the value of\r\n * BigNumber(n, b), otherwise returns false.\r\n */\n\n\nP['greaterThan'] = P['gt'] = function (n, b) {\n  id = 4;\n  return this['cmp'](n, b) > 0;\n};\n/*\r\n * Return true if the value of this BigNumber is greater than or equal to\r\n * the value of BigNumber(n, b), otherwise returns false.\r\n */\n\n\nP['greaterThanOrEqualTo'] = P['gte'] = function (n, b) {\n  id = 5;\n  return (b = this['cmp'](n, b)) == 1 || b === 0;\n};\n/*\r\n * Return true if the value of this BigNumber is a finite number, otherwise\r\n * returns false.\r\n */\n\n\nP['isFinite'] = P['isF'] = function () {\n  return !!this['c'];\n};\n/*\r\n * Return true if the value of this BigNumber is NaN, otherwise returns\r\n * false.\r\n */\n\n\nP['isNaN'] = function () {\n  return !this['s'];\n};\n/*\r\n * Return true if the value of this BigNumber is negative, otherwise\r\n * returns false.\r\n */\n\n\nP['isNegative'] = P['isNeg'] = function () {\n  return this['s'] < 0;\n};\n/*\r\n * Return true if the value of this BigNumber is 0 or -0, otherwise returns\r\n * false.\r\n */\n\n\nP['isZero'] = P['isZ'] = function () {\n  return !!this['c'] && this['c'][0] == 0;\n};\n/*\r\n * Return true if the value of this BigNumber is less than the value of\r\n * BigNumber(n, b), otherwise returns false.\r\n */\n\n\nP['lessThan'] = P['lt'] = function (n, b) {\n  id = 6;\n  return this['cmp'](n, b) < 0;\n};\n/*\r\n * Return true if the value of this BigNumber is less than or equal to the\r\n * value of BigNumber(n, b), otherwise returns false.\r\n */\n\n\nP['lessThanOrEqualTo'] = P['lte'] = P['le'] = function (n, b) {\n  id = 7;\n  return (b = this['cmp'](n, b)) == -1 || b === 0;\n};\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber minus\r\n * the value of BigNumber(y, b).\r\n */\n\n\nP['minus'] = P['sub'] = function (y, b) {\n  var d,\n      i,\n      j,\n      xLTy,\n      x = this,\n      a = x['s'];\n  b = (id = 8, y = new BigNumber(y, b))['s']; // Either NaN?\n\n  if (!a || !b) {\n    return new BigNumber(NaN);\n  } // Signs differ?\n\n\n  if (a != b) {\n    return y['s'] = -b, x['plus'](y);\n  }\n\n  var xc = x['c'],\n      xe = x['e'],\n      yc = y['c'],\n      ye = y['e'];\n\n  if (!xe || !ye) {\n    // Either Infinity?\n    if (!xc || !yc) {\n      return xc ? (y['s'] = -b, y) : new BigNumber(yc ? x : NaN);\n    } // Either zero?\n\n\n    if (!xc[0] || !yc[0]) {\n      // y is non-zero?\n      return yc[0] ? (y['s'] = -b, y // x is non-zero?\n      ) : new BigNumber(xc[0] ? x // Both are zero.\n      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n      : ROUNDING_MODE == 3 ? -0 : 0);\n    }\n  } // Determine which is the bigger number.\n  // Prepend zeros to equalise exponents.\n\n\n  if (xc = xc.slice(), a = xe - ye) {\n    d = (xLTy = a < 0) ? (a = -a, xc) : (ye = xe, yc);\n\n    for (d.reverse(), b = a; b--; d.push(0)) {}\n\n    d.reverse();\n  } else {\n    // Exponents equal. Check digit by digit.\n    j = ((xLTy = xc.length < yc.length) ? xc : yc).length;\n\n    for (a = b = 0; b < j; b++) {\n      if (xc[b] != yc[b]) {\n        xLTy = xc[b] < yc[b];\n        break;\n      }\n    }\n  } // x < y? Point xc to the array of the bigger number.\n\n\n  if (xLTy) {\n    d = xc, xc = yc, yc = d;\n    y['s'] = -y['s'];\n  }\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter\r\n   * as subtraction only needs to start at yc.length.\r\n   */\n\n\n  if ((b = -((j = xc.length) - yc.length)) > 0) {\n    for (; b--; xc[j++] = 0) {}\n  } // Subtract yc from xc.\n\n\n  for (b = yc.length; b > a;) {\n    if (xc[--b] < yc[b]) {\n      for (i = b; i && !xc[--i]; xc[i] = 9) {}\n\n      --xc[i];\n      xc[b] += 10;\n    }\n\n    xc[b] -= yc[b];\n  } // Remove trailing zeros.\n\n\n  for (; xc[--j] == 0; xc.pop()) {} // Remove leading zeros and adjust exponent accordingly.\n\n\n  for (; xc[0] == 0; xc.shift(), --ye) {}\n  /*\r\n   * No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n   * when neither x or y are Infinity.\r\n   */\n  // Underflow?\n\n\n  if (ye < MIN_EXP || !xc[0]) {\n    /*\r\n     * Following IEEE 754 (2008) 6.3,\r\n     * n - n = +0  but  n - n = -0 when rounding towards -Infinity.\r\n     */\n    if (!xc[0]) {\n      y['s'] = ROUNDING_MODE == 3 ? -1 : 1;\n    } // Result is zero.\n\n\n    xc = [ye = 0];\n  }\n\n  return y['c'] = xc, y['e'] = ye, y;\n};\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber modulo\r\n * the value of BigNumber(y, b).\r\n */\n\n\nP['modulo'] = P['mod'] = function (y, b) {\n  var x = this,\n      xc = x['c'],\n      yc = (id = 9, y = new BigNumber(y, b))['c'],\n      i = x['s'],\n      j = y['s']; // Is x or y NaN, or y zero?\n\n  b = !i || !j || yc && !yc[0];\n\n  if (b || xc && !xc[0]) {\n    return new BigNumber(b ? NaN : x);\n  }\n\n  x['s'] = y['s'] = 1;\n  b = y['cmp'](x) == 1;\n  x['s'] = i, y['s'] = j;\n  return b ? new BigNumber(x) : (i = DECIMAL_PLACES, j = ROUNDING_MODE, DECIMAL_PLACES = 0, ROUNDING_MODE = 1, x = x['div'](y), DECIMAL_PLACES = i, ROUNDING_MODE = j, this['minus'](x['times'](y)));\n};\n/*\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * negated, i.e. multiplied by -1.\r\n */\n\n\nP['negated'] = P['neg'] = function () {\n  var x = new BigNumber(this);\n  return x['s'] = -x['s'] || null, x;\n};\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber plus\r\n * the value of BigNumber(y, b).\r\n */\n\n\nP['plus'] = P['add'] = function (y, b) {\n  var d,\n      x = this,\n      a = x['s'];\n  b = (id = 10, y = new BigNumber(y, b))['s']; // Either NaN?\n\n  if (!a || !b) {\n    return new BigNumber(NaN);\n  } // Signs differ?\n\n\n  if (a != b) {\n    return y['s'] = -b, x['minus'](y);\n  }\n\n  var xe = x['e'],\n      xc = x['c'],\n      ye = y['e'],\n      yc = y['c'];\n\n  if (!xe || !ye) {\n    // Either Infinity?\n    if (!xc || !yc) {\n      // Return +-Infinity.\n      return new BigNumber(a / 0);\n    } // Either zero?\n\n\n    if (!xc[0] || !yc[0]) {\n      // y is non-zero?\n      return yc[0] ? y // x is non-zero?\n      : new BigNumber(xc[0] ? x // Both are zero. Return zero.\n      : a * 0);\n    }\n  } // Prepend zeros to equalise exponents.\n  // Note: Faster to use reverse then do unshifts.\n\n\n  if (xc = xc.slice(), a = xe - ye) {\n    d = a > 0 ? (ye = xe, yc) : (a = -a, xc);\n\n    for (d.reverse(); a--; d.push(0)) {}\n\n    d.reverse();\n  } // Point xc to the longer array.\n\n\n  if (xc.length - yc.length < 0) {\n    d = yc, yc = xc, xc = d;\n  }\n  /*\r\n   * Only start adding at yc.length - 1 as the\r\n   * further digits of xc can be left as they are.\r\n   */\n\n\n  for (a = yc.length, b = 0; a; b = (xc[--a] = xc[a] + yc[a] + b) / 10 ^ 0, xc[a] %= 10) {} // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n\n\n  if (b) {\n    xc.unshift(b); // Overflow? (MAX_EXP + 1 possible)\n\n    if (++ye > MAX_EXP) {\n      // Infinity.\n      xc = ye = null;\n    }\n  } // Remove trailing zeros.\n\n\n  for (a = xc.length; xc[--a] == 0; xc.pop()) {}\n\n  return y['c'] = xc, y['e'] = ye, y;\n};\n/*\r\n * Return a BigNumber whose value is the value of this BigNumber raised to\r\n * the power e. If e is negative round according to DECIMAL_PLACES and\r\n * ROUNDING_MODE.\r\n *\r\n * e {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\n\n\nP['toPower'] = P['pow'] = function (e) {\n  // e to integer, avoiding NaN or Infinity becoming 0.\n  var i = e * 0 == 0 ? e | 0 : e,\n      x = new BigNumber(this),\n      y = new BigNumber(ONE); // Use Math.pow?\n  // Pass +-Infinity for out of range exponents.\n\n  if (((outOfRange = e < -MAX_POWER || e > MAX_POWER) && (i = e * 1 / 0) ||\n  /*\r\n   * Any exponent that fails the parse becomes NaN.\r\n   *\r\n   * Include 'e !== 0' because on Opera -0 == parseFloat(-0) is false,\r\n   * despite -0 === parseFloat(-0) && -0 == parseFloat('-0') is true.\r\n   */\n  parse(e) != e && e !== 0 && !(i = NaN)) && // 'pow() exponent not an integer: {e}'\n  // 'pow() exponent out of range: {e}'\n  !ifExceptionsThrow(e, 'exponent', 'pow') || // Pass zero to Math.pow, as any value to the power zero is 1.\n  !i) {\n    // i is +-Infinity, NaN or 0.\n    return new BigNumber(Math.pow(x['toS'](), i));\n  }\n\n  for (i = i < 0 ? -i : i;;) {\n    if (i & 1) {\n      y = y['times'](x);\n    }\n\n    i >>= 1;\n\n    if (!i) {\n      break;\n    }\n\n    x = x['times'](x);\n  }\n\n  return e < 0 ? ONE['div'](y) : y;\n};\n/*\r\n * Return a BigNumber whose value is the value of this BigNumber raised to\r\n * the power m modulo n.\r\n *\r\n * m {BigNumber} the value to take the power of\r\n * n {BigNumber} the value to modulo by\r\n */\n\n\nP['powm'] = function (m, n) {\n  return this.pow(m).mod(n);\n};\n/*\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * rounded to a maximum of dp decimal places using rounding mode rm, or to\r\n * 0 and ROUNDING_MODE respectively if omitted.\r\n *\r\n * [dp] {number} Integer, 0 to MAX inclusive.\r\n * [rm] {number} Integer, 0 to 8 inclusive.\r\n */\n\n\nP['round'] = function (dp, rm) {\n  dp = dp == null || ((outOfRange = dp < 0 || dp > MAX) || parse(dp) != dp) && // 'round() decimal places out of range: {dp}'\n  // 'round() decimal places not an integer: {dp}'\n  !ifExceptionsThrow(dp, 'decimal places', 'round') ? 0 : dp | 0;\n  rm = rm == null || ((outOfRange = rm < 0 || rm > 8) || // Include '&& rm !== 0' because with Opera -0 == parseFloat(-0) is false.\n  parse(rm) != rm && rm !== 0) && // 'round() mode not an integer: {rm}'\n  // 'round() mode out of range: {rm}'\n  !ifExceptionsThrow(rm, 'mode', 'round') ? ROUNDING_MODE : rm | 0;\n  return setMode(this, dp, rm);\n};\n/*\r\n *  sqrt(-n) =  N\r\n *  sqrt( N) =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt( I) =  I\r\n *  sqrt( 0) =  0\r\n *  sqrt(-0) = -0\r\n *\r\n * Return a new BigNumber whose value is the square root of the value of\r\n * this BigNumber, rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n */\n\n\nP['squareRoot'] = P['sqrt'] = function () {\n  var n,\n      r,\n      re,\n      t,\n      x = this,\n      c = x['c'],\n      s = x['s'],\n      e = x['e'],\n      dp = DECIMAL_PLACES,\n      rm = ROUNDING_MODE,\n      half = new BigNumber('0.5'); // Negative/NaN/Infinity/zero?\n\n  if (s !== 1 || !c || !c[0]) {\n    return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n  } // Initial estimate.\n\n\n  s = Math.sqrt(x['toS']());\n  ROUNDING_MODE = 1;\n  /*\r\n    Math.sqrt underflow/overflow?\r\n    Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n   */\n\n  if (s == 0 || s == 1 / 0) {\n    n = c.join('');\n\n    if (!(n.length + e & 1)) {\n      n += '0';\n    }\n\n    r = new BigNumber(Math.sqrt(n) + ''); // r may still not be finite.\n\n    if (!r['c']) {\n      r['c'] = [1];\n    }\n\n    r['e'] = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n  } else {\n    r = new BigNumber(n = s.toString());\n  }\n\n  re = r['e'];\n  s = re + (DECIMAL_PLACES += 4);\n\n  if (s < 3) {\n    s = 0;\n  }\n\n  e = s; // Newton-Raphson iteration.\n\n  for (;;) {\n    t = r;\n    r = half['times'](t['plus'](x['div'](t)));\n\n    if (t['c'].slice(0, s).join('') === r['c'].slice(0, s).join('')) {\n      c = r['c'];\n      /*\r\n        The exponent of r may here be one less than the final result\r\n        exponent (re), e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust\r\n        s so the rounding digits are indexed correctly.\r\n       */\n\n      s = s - (n && r['e'] < re);\n      /*\r\n        The 4th rounding digit may be in error by -1 so if the 4 rounding\r\n        digits are 9999 or 4999 (i.e. approaching a rounding boundary)\r\n        continue the iteration.\r\n       */\n\n      if (c[s] == 9 && c[s - 1] == 9 && c[s - 2] == 9 && (c[s - 3] == 9 || n && c[s - 3] == 4)) {\n        /*\r\n          If 9999 on first run through, check to see if rounding up\r\n          gives the exact result as the nines may infinitely repeat.\r\n         */\n        if (n && c[s - 3] == 9) {\n          t = r['round'](dp, 0);\n\n          if (t['times'](t)['eq'](x)) {\n            ROUNDING_MODE = rm;\n            DECIMAL_PLACES = dp;\n            return t;\n          }\n        }\n\n        DECIMAL_PLACES += 4;\n        s += 4;\n        n = '';\n      } else {\n        /*\r\n          If the rounding digits are null, 0000 or 5000, check for an\r\n          exact result. If not, then there are further digits so\r\n          increment the 1st rounding digit to ensure correct rounding.\r\n         */\n        if (!c[e] && !c[e - 1] && !c[e - 2] && (!c[e - 3] || c[e - 3] == 5)) {\n          // Truncate to the first rounding digit.\n          if (c.length > e - 2) {\n            c.length = e - 2;\n          }\n\n          if (!r['times'](r)['eq'](x)) {\n            while (c.length < e - 3) {\n              c.push(0);\n            }\n\n            c[e - 3]++;\n          }\n        }\n\n        ROUNDING_MODE = rm;\n        rnd(r, DECIMAL_PLACES = dp, 10);\n        return r;\n      }\n    }\n  }\n};\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber times\r\n * the value of BigNumber(y, b).\r\n */\n\n\nP['times'] = P['mul'] = function (y, b) {\n  var c,\n      x = this,\n      xc = x['c'],\n      yc = (id = 11, y = new BigNumber(y, b))['c'],\n      i = x['e'],\n      j = y['e'],\n      a = x['s'];\n  y['s'] = a == (b = y['s']) ? 1 : -1; // Either NaN/Infinity/0?\n\n  if (!i && (!xc || !xc[0]) || !j && (!yc || !yc[0])) {\n    // Either NaN?\n    return new BigNumber(!a || !b || // x is 0 and y is Infinity  or  y is 0 and x is Infinity?\n    xc && !xc[0] && !yc || yc && !yc[0] && !xc // Return NaN.\n    ? NaN // Either Infinity?\n    : !xc || !yc // Return +-Infinity.\n    ? y['s'] / 0 // x or y is 0. Return +-0.\n    : y['s'] * 0);\n  }\n\n  y['e'] = i + j;\n\n  if ((a = xc.length) < (b = yc.length)) {\n    c = xc, xc = yc, yc = c, j = a, a = b, b = j;\n  }\n\n  for (j = a + b, c = []; j--; c.push(0)) {} // Multiply!\n\n\n  for (i = b - 1; i > -1; i--) {\n    for (b = 0, j = a + i; j > i; b = c[j] + yc[i] * xc[j - i - 1] + b, c[j--] = b % 10 | 0, b = b / 10 | 0) {}\n\n    if (b) {\n      c[j] = (c[j] + b) % 10;\n    }\n  }\n\n  b && ++y['e']; // Remove any leading zero.\n\n  !c[0] && c.shift(); // Remove trailing zeros.\n\n  for (j = c.length; !c[--j]; c.pop()) {} // No zero check needed as only x * 0 == 0 etc.\n  // Overflow?\n\n\n  y['c'] = y['e'] > MAX_EXP // Infinity.\n  ? y['e'] = null : // Underflow?\n  y['e'] < MIN_EXP // Zero.\n  ? [y['e'] = 0] // Neither.\n  : c;\n  return y;\n};\n/*\r\n * Return a buffer containing the \r\n */\n\n\nP['toBuffer'] = function (opts) {\n  if (typeof opts === 'string') {\n    if (opts !== 'mpint') return 'Unsupported Buffer representation';\n    var abs = this.abs();\n    var buf = abs.toBuffer({\n      size: 1,\n      endian: 'big'\n    });\n    var len = buf.length === 1 && buf[0] === 0 ? 0 : buf.length;\n    if (buf[0] & 0x80) len++;\n    var ret = new Buffer(4 + len);\n    if (len > 0) buf.copy(ret, 4 + (buf[0] & 0x80 ? 1 : 0));\n    if (buf[0] & 0x80) ret[4] = 0;\n    ret[0] = len & 0xff << 24;\n    ret[1] = len & 0xff << 16;\n    ret[2] = len & 0xff << 8;\n    ret[3] = len & 0xff << 0; // two's compliment for negative integers:\n\n    var isNeg = this.lt(0);\n\n    if (isNeg) {\n      for (var i = 4; i < ret.length; i++) {\n        ret[i] = 0xff - ret[i];\n      }\n    }\n\n    ret[4] = ret[4] & 0x7f | (isNeg ? 0x80 : 0);\n    if (isNeg) ret[ret.length - 1]++;\n    return ret;\n  }\n\n  if (!opts) opts = {};\n  var endian = {\n    1: 'big',\n    '-1': 'little'\n  }[opts.endian] || opts.endian || 'big';\n  var hex = this.toString(16);\n  if (hex.charAt(0) === '-') throw new Error('converting negative numbers to Buffers not supported yet');\n  var size = opts.size === 'auto' ? Math.ceil(hex.length / 2) : opts.size || 1;\n  var len = Math.ceil(hex.length / (2 * size)) * size;\n  var buf = new Buffer(len); // zero-pad the hex string so the chunks are all `size` long\n\n  while (hex.length < 2 * len) {\n    hex = '0' + hex;\n  }\n\n  var hx = hex.split(new RegExp('(.{' + 2 * size + '})')).filter(function (s) {\n    return s.length > 0;\n  });\n  hx.forEach(function (chunk, i) {\n    for (var j = 0; j < size; j++) {\n      var ix = i * size + (endian === 'big' ? j : size - j - 1);\n      buf[ix] = parseInt(chunk.slice(j * 2, j * 2 + 2), 16);\n    }\n  });\n  return buf;\n};\n/*\r\n * Return a string representing the value of this BigNumber in exponential\r\n * notation to dp fixed decimal places and rounded using ROUNDING_MODE if\r\n * necessary.\r\n *\r\n * [dp] {number} Integer, 0 to MAX inclusive.\r\n */\n\n\nP['toExponential'] = P['toE'] = function (dp) {\n  return format(this, (dp == null || ((outOfRange = dp < 0 || dp > MAX) ||\n  /*\r\n   * Include '&& dp !== 0' because with Opera -0 == parseFloat(-0) is\r\n   * false, despite -0 == parseFloat('-0') && 0 == -0 being true.\r\n   */\n  parse(dp) != dp && dp !== 0) && // 'toE() decimal places not an integer: {dp}'\n  // 'toE() decimal places out of range: {dp}'\n  !ifExceptionsThrow(dp, 'decimal places', 'toE')) && this['c'] ? this['c'].length - 1 : dp | 0, 1);\n};\n/*\r\n * Return a string representing the value of this BigNumber in normal\r\n * notation to dp fixed decimal places and rounded using ROUNDING_MODE if\r\n * necessary.\r\n *\r\n * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Integer, 0 to MAX inclusive.\r\n */\n\n\nP['toFixed'] = P['toF'] = function (dp) {\n  var n,\n      str,\n      d,\n      x = this;\n\n  if (!(dp == null || ((outOfRange = dp < 0 || dp > MAX) || parse(dp) != dp && dp !== 0) && // 'toF() decimal places not an integer: {dp}'\n  // 'toF() decimal places out of range: {dp}'\n  !ifExceptionsThrow(dp, 'decimal places', 'toF'))) {\n    d = x['e'] + (dp | 0);\n  }\n\n  n = TO_EXP_NEG, dp = TO_EXP_POS;\n  TO_EXP_NEG = -(TO_EXP_POS = 1 / 0); // Note: str is initially undefined.\n\n  if (d == str) {\n    str = x['toS']();\n  } else {\n    str = format(x, d); // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.\n    // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n\n    if (x['s'] < 0 && x['c']) {\n      // As e.g. -0 toFixed(3), will wrongly be returned as -0.000 from toString.\n      if (!x['c'][0]) {\n        str = str.replace(/^-/, ''); // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.\n      } else if (str.indexOf('-') < 0) {\n        str = '-' + str;\n      }\n    }\n  }\n\n  TO_EXP_NEG = n, TO_EXP_POS = dp;\n  return str;\n};\n/*\r\n * Return a string array representing the value of this BigNumber as a\r\n * simple fraction with an integer numerator and an integer denominator.\r\n * The denominator will be a positive non-zero value less than or equal to\r\n * the specified maximum denominator. If a maximum denominator is not\r\n * specified, the denominator will be the lowest value necessary to\r\n * represent the number exactly.\r\n *\r\n * [maxD] {number|string|BigNumber} Integer >= 1 and < Infinity.\r\n */\n\n\nP['toFraction'] = P['toFr'] = function (maxD) {\n  var q,\n      frac,\n      n0,\n      d0,\n      d2,\n      n,\n      e,\n      n1 = d0 = new BigNumber(ONE),\n      d1 = n0 = new BigNumber('0'),\n      x = this,\n      xc = x['c'],\n      exp = MAX_EXP,\n      dp = DECIMAL_PLACES,\n      rm = ROUNDING_MODE,\n      d = new BigNumber(ONE); // NaN, Infinity.\n\n  if (!xc) {\n    return x['toS']();\n  }\n\n  e = d['e'] = xc.length - x['e'] - 1; // If max denominator is undefined or null...\n\n  if (maxD == null || // or NaN...\n  (!(id = 12, n = new BigNumber(maxD))['s'] || ( // or less than 1, or Infinity...\n  outOfRange = n['cmp'](n1) < 0 || !n['c']) || // or not an integer...\n  ERRORS && n['e'] < n['c'].length - 1) && // 'toFr() max denominator not an integer: {maxD}'\n  // 'toFr() max denominator out of range: {maxD}'\n  !ifExceptionsThrow(maxD, 'max denominator', 'toFr') || // or greater than the maxD needed to specify the value exactly...\n  (maxD = n)['cmp'](d) > 0) {\n    // d is e.g. 10, 100, 1000, 10000... , n1 is 1.\n    maxD = e > 0 ? d : n1;\n  }\n\n  MAX_EXP = 1 / 0;\n  n = new BigNumber(xc.join(''));\n\n  for (DECIMAL_PLACES = 0, ROUNDING_MODE = 1;;) {\n    q = n['div'](d);\n    d2 = d0['plus'](q['times'](d1));\n\n    if (d2['cmp'](maxD) == 1) {\n      break;\n    }\n\n    d0 = d1, d1 = d2;\n    n1 = n0['plus'](q['times'](d2 = n1));\n    n0 = d2;\n    d = n['minus'](q['times'](d2 = d));\n    n = d2;\n  }\n\n  d2 = maxD['minus'](d0)['div'](d1);\n  n0 = n0['plus'](d2['times'](n1));\n  d0 = d0['plus'](d2['times'](d1));\n  n0['s'] = n1['s'] = x['s'];\n  DECIMAL_PLACES = e * 2;\n  ROUNDING_MODE = rm; // Determine which fraction is closer to x, n0 / d0 or n1 / d1?\n\n  frac = n1['div'](d1)['minus'](x)['abs']()['cmp'](n0['div'](d0)['minus'](x)['abs']()) < 1 ? [n1['toS'](), d1['toS']()] : [n0['toS'](), d0['toS']()];\n  return MAX_EXP = exp, DECIMAL_PLACES = dp, frac;\n};\n/*\r\n * Return a string representing the value of this BigNumber to sd significant\r\n * digits and rounded using ROUNDING_MODE if necessary.\r\n * If sd is less than the number of digits necessary to represent the integer\r\n * part of the value in normal notation, then use exponential notation.\r\n *\r\n * sd {number} Integer, 1 to MAX inclusive.\r\n */\n\n\nP['toPrecision'] = P['toP'] = function (sd) {\n  /*\r\n   * ERRORS true: Throw if sd not undefined, null or an integer in range.\r\n   * ERRORS false: Ignore sd if not a number or not in range.\r\n   * Truncate non-integers.\r\n   */\n  return sd == null || ((outOfRange = sd < 1 || sd > MAX) || parse(sd) != sd) && // 'toP() precision not an integer: {sd}'\n  // 'toP() precision out of range: {sd}'\n  !ifExceptionsThrow(sd, 'precision', 'toP') ? this['toS']() : format(this, --sd | 0, 2);\n};\n/*\r\n * Return a string representing the value of this BigNumber in base b, or\r\n * base 10 if b is omitted. If a base is specified, including base 10,\r\n * round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n * If a base is not specified, and this BigNumber has a positive exponent\r\n * that is equal to or greater than TO_EXP_POS, or a negative exponent equal\r\n * to or less than TO_EXP_NEG, return exponential notation.\r\n *\r\n * [b] {number} Integer, 2 to 64 inclusive.\r\n */\n\n\nP['toString'] = P['toS'] = function (b) {\n  var u,\n      str,\n      strL,\n      x = this,\n      xe = x['e']; // Infinity or NaN?\n\n  if (xe === null) {\n    str = x['s'] ? 'Infinity' : 'NaN'; // Exponential format?\n  } else if (b === u && (xe <= TO_EXP_NEG || xe >= TO_EXP_POS)) {\n    return format(x, x['c'].length - 1, 1);\n  } else {\n    str = x['c'].join(''); // Negative exponent?\n\n    if (xe < 0) {\n      // Prepend zeros.\n      for (; ++xe; str = '0' + str) {}\n\n      str = '0.' + str; // Positive exponent?\n    } else if (strL = str.length, xe > 0) {\n      if (++xe > strL) {\n        // Append zeros.\n        for (xe -= strL; xe--; str += '0') {}\n      } else if (xe < strL) {\n        str = str.slice(0, xe) + '.' + str.slice(xe);\n      } // Exponent zero.\n\n    } else {\n      if (u = str.charAt(0), strL > 1) {\n        str = u + '.' + str.slice(1); // Avoid '-0'\n      } else if (u == '0') {\n        return u;\n      }\n    }\n\n    if (b != null) {\n      if (!(outOfRange = !(b >= 2 && b < 65)) && (b == (b | 0) || !ERRORS)) {\n        str = convert(str, b | 0, 10, x['s']); // Avoid '-0'\n\n        if (str == '0') {\n          return str;\n        }\n      } else {\n        // 'toS() base not an integer: {b}'\n        // 'toS() base out of range: {b}'\n        ifExceptionsThrow(b, 'base', 'toS');\n      }\n    }\n  }\n\n  return x['s'] < 0 ? '-' + str : str;\n};\n\nP['toNumber'] = function () {\n  return parseInt(this['toString'](), 10);\n};\n/*\r\n * Return as toString, but do not accept a base argument.\r\n */\n\n\nP['valueOf'] = function () {\n  return this['toS']();\n}; // Add aliases for BigDecimal methods.\n//P['add'] = P['plus'];\n//P['subtract'] = P['minus'];\n//P['multiply'] = P['times'];\n//P['divide'] = P['div'];\n//P['remainder'] = P['mod'];\n//P['compareTo'] = P['cmp'];\n//P['negate'] = P['neg'];\n// EXPORT\n\n\nmodule.exports = BigNumber;","map":{"version":3,"sources":["C:/PoC/restaurant_sidechain/web/node_modules/@liskhq/bignum/bignum.js"],"names":["MAX","MAX_POWER","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","ERRORS","parse","parseInt","P","BigNumber","prototype","DIGITS","outOfRange","id","isValid","trim","String","replace","ONE","n","b","e","i","isNum","digits","valid","orig","x","slice","Object","toString","call","test","charAt","setMode","RegExp","length","ifExceptionsThrow","convert","indexOf","search","substring","buf","opts","endian","size","Math","ceil","RangeError","hex","chunk","j","push","map","c","join","v","p","r","a","arguments","o","inRange","lo","hi","has","hasOwnProperty","parseFloat","arg","isArray","isRange","isErrors","error","method","message","Error","nStr","baseOut","baseIn","sign","dvs","dvd","nArr","fracArr","fracBN","strToArr","str","bIn","strL","arrL","arr","reverse","arrToStr","toLowerCase","split","divide","unshift","exp","s","base","isOdd","dvsL","dvsT","next","cmp","remI","dvsZ","dvdI","dvdL","rem","remL","quo","qc","qi","dig","shift","rnd","format","d","splice","dp","xc","isNeg","half","more","pop","rm","y","yc","k","l","xe","xs","ye","ys","NaN","xLTy","pow","m","mod","re","t","sqrt","abs","toBuffer","len","ret","Buffer","copy","lt","hx","filter","forEach","ix","maxD","q","frac","n0","d0","d2","n1","d1","sd","u","module","exports"],"mappings":"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","sourcesContent":["/* bignumber.js v1.3.0 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n/*jslint bitwise: true, eqeq: true, plusplus: true, sub: true, white: true, maxerr: 500 */\r\n/*global module */\r\n\r\n/*\r\n  bignumber.js v1.3.0\r\n  A JavaScript library for arbitrary-precision arithmetic.\r\n  https://github.com/MikeMcl/bignumber.js\r\n  Copyright (c) 2012 Michael Mclaughlin <M8ch88l@gmail.com>\r\n  MIT Expat Licence\r\n*/\r\n\r\n/*********************************** DEFAULTS ************************************/\r\n\r\n/*\r\n * The default values below must be integers within the stated ranges (inclusive).\r\n * Most of these values can be changed during run-time using BigNumber.config().\r\n */\r\n\r\n/*\r\n * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP,\r\n * MAX_EXP, and the argument to toFixed, toPrecision and toExponential, beyond\r\n * which an exception is thrown (if ERRORS is true).\r\n */\r\nvar MAX = 1E9,                                   // 0 to 1e+9\r\n\r\n    // Limit of magnitude of exponent argument to toPower.\r\n    MAX_POWER = 1E6,                             // 1 to 1e+6\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                         // 0 to MAX\r\n\r\n    /*\r\n     * The rounding mode used when rounding to the above decimal places, and when\r\n     * using toFixed, toPrecision and toExponential, and round (default value).\r\n     * UP         0 Away from zero.\r\n     * DOWN       1 Towards zero.\r\n     * CEIL       2 Towards +Infinity.\r\n     * FLOOR      3 Towards -Infinity.\r\n     * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n     * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n     * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n     * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n     * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n     */\r\n    ROUNDING_MODE = 4,                           // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                             // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                             // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -MAX,                              // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    MAX_EXP = MAX,                               // 1 to MAX\r\n\r\n    // Whether BigNumber Errors are ever thrown.\r\n    // CHANGE parseInt to parseFloat if changing ERRORS to false.\r\n    ERRORS = true,                               // true or false\r\n    parse = parseInt,                            // parseInt or parseFloat\r\n\r\n/***********************************************************************************/\r\n\r\n    P = BigNumber.prototype,\r\n    DIGITS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n    outOfRange,\r\n    id = 0,\r\n    isValid = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n    trim = String.prototype.trim || function () {return this.replace(/^\\s+|\\s+$/g, '')},\r\n    ONE = BigNumber(1);\r\n\r\n\r\n// CONSTRUCTOR\r\n\r\n\r\n/*\r\n * The exported function.\r\n * Create and return a new instance of a BigNumber object.\r\n *\r\n * n {number|string|BigNumber} A numeric value.\r\n * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n */\r\nfunction BigNumber( n, b ) {\r\n    var e, i, isNum, digits, valid, orig,\r\n        x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if ( !(x instanceof BigNumber) ) {\r\n        return new BigNumber( n, b )\r\n    }\r\n\r\n    // Duplicate.\r\n    if ( n instanceof BigNumber ) {\r\n        id = 0;\r\n\r\n        // e is undefined.\r\n        if ( b !== e ) {\r\n            n += ''\r\n        } else {\r\n            x['s'] = n['s'];\r\n            x['e'] = n['e'];\r\n            x['c'] = ( n = n['c'] ) ? n.slice() : n;\r\n            return;\r\n        }\r\n    }\r\n\r\n    // If number, check if minus zero.\r\n    if ( typeof n != 'string' ) {\r\n        n = ( isNum = typeof n == 'number' ||\r\n            Object.prototype.toString.call(n) == '[object Number]' ) &&\r\n                n === 0 && 1 / n < 0 ? '-0' : n + '';\r\n    }\r\n\r\n    orig = n;\r\n\r\n    if ( b === e && isValid.test(n) ) {\r\n\r\n        // Determine sign.\r\n        x['s'] = n.charAt(0) == '-' ? ( n = n.slice(1), -1 ) : 1;\r\n\r\n    // Either n is not a valid BigNumber or a base has been specified.\r\n    } else {\r\n\r\n        // Enable exponential notation to be used with base 10 argument.\r\n        // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n        if ( b == 10 ) {\r\n\r\n            return setMode( n, DECIMAL_PLACES, ROUNDING_MODE );\r\n        }\r\n\r\n        n = trim.call(n).replace( /^\\+(?!-)/, '' );\r\n\r\n        x['s'] = n.charAt(0) == '-' ? ( n = n.replace( /^-(?!-)/, '' ), -1 ) : 1;\r\n\r\n        if ( b != null ) {\r\n\r\n            if ( ( b == (b | 0) || !ERRORS ) &&\r\n              !( outOfRange = !( b >= 2 && b < 65 ) ) ) {\r\n\r\n                digits = '[' + DIGITS.slice( 0, b = b | 0 ) + ']+';\r\n\r\n                // Before non-decimal number validity test and base conversion\r\n                // remove the `.` from e.g. '1.', and replace e.g. '.1' with '0.1'.\r\n                n = n.replace( /\\.$/, '' ).replace( /^\\./, '0.' );\r\n\r\n                // Any number in exponential form will fail due to the e+/-.\r\n                if ( valid = new RegExp(\r\n                  '^' + digits + '(?:\\\\.' + digits + ')?$', b < 37 ? 'i' : '' ).test(n) ) {\r\n\r\n                    if ( isNum ) {\r\n\r\n                        if ( n.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\r\n                            // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                            ifExceptionsThrow( orig, 0 );\r\n                        }\r\n\r\n                        // Prevent later check for length on converted number.\r\n                        isNum = !isNum;\r\n                    }\r\n                    n = convert( n, 10, b, x['s'] );\r\n\r\n                } else if ( n != 'Infinity' && n != 'NaN' ) {\r\n\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    ifExceptionsThrow( orig, 1, b );\r\n                    n = 'NaN';\r\n                }\r\n            } else {\r\n\r\n                // 'new BigNumber() base not an integer: {b}'\r\n                // 'new BigNumber() base out of range: {b}'\r\n                ifExceptionsThrow( b, 2 );\r\n\r\n                // Ignore base.\r\n                valid = isValid.test(n);\r\n            }\r\n        } else {\r\n            valid = isValid.test(n);\r\n        }\r\n\r\n        if ( !valid ) {\r\n\r\n            // Infinity/NaN\r\n            x['c'] = x['e'] = null;\r\n\r\n            // NaN\r\n            if ( n != 'Infinity' ) {\r\n\r\n                // No exception on NaN.\r\n                if ( n != 'NaN' ) {\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    ifExceptionsThrow( orig, 3 );\r\n                }\r\n                x['s'] = null;\r\n            }\r\n            id = 0;\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    // Decimal point?\r\n    if ( ( e = n.indexOf('.') ) > -1 ) {\r\n        n = n.replace( '.', '' );\r\n    }\r\n\r\n    // Exponential form?\r\n    if ( ( i = n.search( /e/i ) ) > 0 ) {\r\n\r\n        // Determine exponent.\r\n        if ( e < 0 ) {\r\n            e = i;\r\n        }\r\n        e += +n.slice( i + 1 );\r\n        n = n.substring( 0, i );\r\n\r\n    } else if ( e < 0 ) {\r\n\r\n        // Integer.\r\n        e = n.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for ( i = 0; n.charAt(i) == '0'; i++ ) {\r\n    }\r\n\r\n    b = n.length;\r\n\r\n    // Disallow numbers with over 15 significant digits if number type.\r\n    if ( isNum && b > 15 && n.slice(i).length > 15 ) {\r\n\r\n        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n        ifExceptionsThrow( orig, 0 );\r\n    }\r\n    id = 0;\r\n\r\n    // Overflow?\r\n    if ( ( e -= i + 1 ) > MAX_EXP ) {\r\n\r\n        // Infinity.\r\n        x['c'] = x['e'] = null;\r\n\r\n    // Zero or underflow?\r\n    } else if ( i == b || e < MIN_EXP ) {\r\n\r\n        // Zero.\r\n        x['c'] = [ x['e'] = 0 ];\r\n    } else {\r\n\r\n        // Determine trailing zeros.\r\n        for ( ; n.charAt(--b) == '0'; ) {\r\n        }\r\n\r\n        x['e'] = e;\r\n        x['c'] = [];\r\n\r\n        // Convert string to array of digits (without leading and trailing zeros).\r\n        for ( e = 0; i <= b; x['c'][e++] = +n.charAt(i++) ) {\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// CONSTRUCTOR PROPERTIES/METHODS\r\n\r\n\r\nBigNumber['ROUND_UP'] = 0;\r\nBigNumber['ROUND_DOWN'] = 1;\r\nBigNumber['ROUND_CEIL'] = 2;\r\nBigNumber['ROUND_FLOOR'] = 3;\r\nBigNumber['ROUND_HALF_UP'] = 4;\r\nBigNumber['ROUND_HALF_DOWN'] = 5;\r\nBigNumber['ROUND_HALF_EVEN'] = 6;\r\nBigNumber['ROUND_HALF_CEIL'] = 7;\r\nBigNumber['ROUND_HALF_FLOOR'] = 8;\r\n\r\n/*\r\n * Create an instance from a Buffer\r\n */\r\nBigNumber['fromBuffer'] = function (buf, opts) {\r\n\r\n    if (!opts) opts = {};\r\n\r\n    var endian = { 1 : 'big', '-1' : 'little' }[opts.endian]\r\n        || opts.endian || 'big'\r\n    ;\r\n\r\n    var size = opts.size === 'auto' ? Math.ceil(buf.length) : (opts.size || 1);\r\n\r\n    if (buf.length % size !== 0) {\r\n        throw new RangeError('Buffer length (' + buf.length + ')'\r\n            + ' must be a multiple of size (' + size + ')'\r\n        );\r\n    }\r\n\r\n    var hex = [];\r\n    for (var i = 0; i < buf.length; i += size) {\r\n        var chunk = [];\r\n        for (var j = 0; j < size; j++) {\r\n            chunk.push(buf[\r\n                i + (endian === 'big' ? j : (size - j - 1))\r\n            ]);\r\n        }\r\n\r\n        hex.push(chunk\r\n            .map(function (c) {\r\n                return (c < 16 ? '0' : '') + c.toString(16);\r\n            })\r\n            .join('')\r\n        );\r\n    }\r\n\r\n    return BigNumber(hex.join(''), 16);\r\n\r\n};\r\n\r\n/*\r\n * Configure infrequently-changing library-wide settings.\r\n *\r\n * Accept an object or an argument list, with one or many of the following\r\n * properties or parameters respectively:\r\n * [ DECIMAL_PLACES [, ROUNDING_MODE [, EXPONENTIAL_AT [, RANGE [, ERRORS ]]]]]\r\n *\r\n * E.g.\r\n * BigNumber.config(20, 4) is equivalent to\r\n * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n * Ignore properties/parameters set to null or undefined.\r\n *\r\n * Return an object with the properties current values.\r\n */\r\nBigNumber['config'] = function () {\r\n    var v, p,\r\n        i = 0,\r\n        r = {},\r\n        a = arguments,\r\n        o = a[0],\r\n        c = 'config',\r\n        inRange = function ( n, lo, hi ) {\r\n          return !( ( outOfRange = n < lo || n > hi ) ||\r\n            parse(n) != n && n !== 0 );\r\n        },\r\n        has = o && typeof o == 'object'\r\n          ? function () {if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null}\r\n          : function () {if ( a.length > i ) return ( v = a[i++] ) != null};\r\n\r\n    // [DECIMAL_PLACES] {number} Integer, 0 to MAX inclusive.\r\n    if ( has( p = 'DECIMAL_PLACES' ) ) {\r\n\r\n        if ( inRange( v, 0, MAX ) ) {\r\n            DECIMAL_PLACES = v | 0;\r\n        } else {\r\n\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            ifExceptionsThrow( v, p, c );\r\n        }\r\n    }\r\n    r[p] = DECIMAL_PLACES;\r\n\r\n    // [ROUNDING_MODE] {number} Integer, 0 to 8 inclusive.\r\n    if ( has( p = 'ROUNDING_MODE' ) ) {\r\n\r\n        if ( inRange( v, 0, 8 ) ) {\r\n            ROUNDING_MODE = v | 0;\r\n        } else {\r\n\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            ifExceptionsThrow( v, p, c );\r\n        }\r\n    }\r\n    r[p] = ROUNDING_MODE;\r\n\r\n    /*\r\n     * [EXPONENTIAL_AT] {number|number[]} Integer, -MAX to MAX inclusive or\r\n     * [ integer -MAX to 0 inclusive, 0 to MAX inclusive ].\r\n     */\r\n    if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\r\n        if ( inRange( v, -MAX, MAX ) ) {\r\n            TO_EXP_NEG = -( TO_EXP_POS = ~~( v < 0 ? -v : +v ) );\r\n        } else if ( !outOfRange && v && inRange( v[0], -MAX, 0 ) &&\r\n          inRange( v[1], 0, MAX ) ) {\r\n            TO_EXP_NEG = ~~v[0];\r\n            TO_EXP_POS = ~~v[1];\r\n        } else {\r\n\r\n            // 'config() EXPONENTIAL_AT not an integer or not [integer, integer]: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range or not [negative, positive: {v}'\r\n            ifExceptionsThrow( v, p, c, 1 );\r\n        }\r\n    }\r\n    r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\r\n    /*\r\n     * [RANGE][ {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n     * [ integer -MAX to -1 inclusive, integer 1 to MAX inclusive ].\r\n     */\r\n    if ( has( p = 'RANGE' ) ) {\r\n\r\n        if ( inRange( v, -MAX, MAX ) && ~~v ) {\r\n            MIN_EXP = -( MAX_EXP = ~~( v < 0 ? -v : +v ) );\r\n        } else if ( !outOfRange && v && inRange( v[0], -MAX, -1 ) &&\r\n          inRange( v[1], 1, MAX ) ) {\r\n            MIN_EXP = ~~v[0], MAX_EXP = ~~v[1];\r\n        } else {\r\n\r\n            // 'config() RANGE not a non-zero integer or not [integer, integer]: {v}'\r\n            // 'config() RANGE out of range or not [negative, positive: {v}'\r\n            ifExceptionsThrow( v, p, c, 1, 1 );\r\n        }\r\n    }\r\n    r[p] = [ MIN_EXP, MAX_EXP ];\r\n\r\n    // [ERRORS] {boolean|number} true, false, 1 or 0.\r\n    if ( has( p = 'ERRORS' ) ) {\r\n\r\n        if ( v === !!v || v === 1 || v === 0 ) {\r\n            parse = ( outOfRange = id = 0, ERRORS = !!v )\r\n              ? parseInt\r\n              : parseFloat;\r\n        } else {\r\n\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            ifExceptionsThrow( v, p, c, 0, 0, 1 );\r\n        }\r\n    }\r\n    r[p] = ERRORS;\r\n\r\n    return r;\r\n};\r\n\r\n\r\n// PRIVATE FUNCTIONS\r\n\r\n\r\n// Assemble error messages. Throw BigNumber Errors.\r\nfunction ifExceptionsThrow( arg, i, j, isArray, isRange, isErrors) {\r\n\r\n    if ( ERRORS ) {\r\n        var error,\r\n            method = ['new BigNumber', 'cmp', 'div', 'eq', 'gt', 'gte', 'lt',\r\n                 'lte', 'minus', 'mod', 'plus', 'times', 'toFr'\r\n                ][ id ? id < 0 ? -id : id : 1 / id < 0 ? 1 : 0 ] + '()',\r\n            message = outOfRange ? ' out of range' : ' not a' +\r\n              ( isRange ? ' non-zero' : 'n' ) + ' integer';\r\n\r\n        message = ( [\r\n            method + ' number type has more than 15 significant digits',\r\n            method + ' not a base ' + j + ' number',\r\n            method + ' base' + message,\r\n            method + ' not a number' ][i] ||\r\n              j + '() ' + i + ( isErrors\r\n                ? ' not a boolean or binary digit'\r\n                : message + ( isArray\r\n                  ? ' or not [' + ( outOfRange\r\n                    ? ' negative, positive'\r\n                    : ' integer, integer' ) + ' ]'\r\n                  : '' ) ) ) + ': ' + arg;\r\n\r\n        outOfRange = id = 0;\r\n        error = new Error(message);\r\n        error['name'] = 'BigNumber Error';\r\n\r\n        throw error;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * Convert a numeric string of baseIn to a numeric string of baseOut.\r\n */\r\nfunction convert( nStr, baseOut, baseIn, sign ) {\r\n    var e, dvs, dvd, nArr, fracArr, fracBN;\r\n\r\n    // Convert string of base bIn to an array of numbers of baseOut.\r\n    // Eg. strToArr('255', 10) where baseOut is 16, returns [15, 15].\r\n    // Eg. strToArr('ff', 16)  where baseOut is 10, returns [2, 5, 5].\r\n    function strToArr( str, bIn ) {\r\n        var j,\r\n            i = 0,\r\n            strL = str.length,\r\n            arrL,\r\n            arr = [0];\r\n\r\n        for ( bIn = bIn || baseIn; i < strL; i++ ) {\r\n\r\n            for ( arrL = arr.length, j = 0; j < arrL; arr[j] *= bIn, j++ ) {\r\n            }\r\n\r\n            for ( arr[0] += DIGITS.indexOf( str.charAt(i) ), j = 0;\r\n                  j < arr.length;\r\n                  j++ ) {\r\n\r\n                if ( arr[j] > baseOut - 1 ) {\r\n\r\n                    if ( arr[j + 1] == null ) {\r\n                        arr[j + 1] = 0;\r\n                    }\r\n                    arr[j + 1] += arr[j] / baseOut ^ 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n    // Convert array to string.\r\n    // E.g. arrToStr( [9, 10, 11] ) becomes '9ab' (in bases above 11).\r\n    function arrToStr( arr ) {\r\n        var i = 0,\r\n            arrL = arr.length,\r\n            str = '';\r\n\r\n        for ( ; i < arrL; str += DIGITS.charAt( arr[i++] ) ) {\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    if ( baseIn < 37 ) {\r\n        nStr = nStr.toLowerCase();\r\n    }\r\n\r\n    /*\r\n     * If non-integer convert integer part and fraction part separately.\r\n     * Convert the fraction part as if it is an integer than use division to\r\n     * reduce it down again to a value less than one.\r\n     */\r\n    if ( ( e = nStr.indexOf( '.' ) ) > -1 ) {\r\n\r\n        /*\r\n         * Calculate the power to which to raise the base to get the number\r\n         * to divide the fraction part by after it has been converted as an\r\n         * integer to the required base.\r\n         */\r\n        e = nStr.length - e - 1;\r\n\r\n        // Use toFixed to avoid possible exponential notation.\r\n        dvs = strToArr( new BigNumber(baseIn)['pow'](e)['toF'](), 10 );\r\n\r\n        nArr = nStr.split('.');\r\n\r\n        // Convert the base of the fraction part (as integer).\r\n        dvd = strToArr( nArr[1] );\r\n\r\n        // Convert the base of the integer part.\r\n        nArr = strToArr( nArr[0] );\r\n\r\n        // Result will be a BigNumber with a value less than 1.\r\n        fracBN = divide( dvd, dvs, dvd.length - dvs.length, sign, baseOut,\r\n          // Is least significant digit of integer part an odd number?\r\n          nArr[nArr.length - 1] & 1 );\r\n\r\n        fracArr = fracBN['c'];\r\n\r\n        // e can be <= 0  ( if e == 0, fracArr is [0] or [1] ).\r\n        if ( e = fracBN['e'] ) {\r\n\r\n            // Append zeros according to the exponent of the result.\r\n            for ( ; ++e; fracArr.unshift(0) ) {\r\n            }\r\n\r\n            // Append the fraction part to the converted integer part.\r\n            nStr = arrToStr(nArr) + '.' + arrToStr(fracArr);\r\n\r\n        // fracArr is [1].\r\n        // Fraction digits rounded up, so increment last digit of integer part.\r\n        } else if ( fracArr[0] ) {\r\n\r\n            if ( nArr[ e = nArr.length - 1 ] < baseOut - 1 ) {\r\n                ++nArr[e];\r\n                nStr = arrToStr(nArr);\r\n            } else {\r\n                nStr = new BigNumber( arrToStr(nArr),\r\n                  baseOut )['plus'](ONE)['toS'](baseOut);\r\n            }\r\n\r\n        // fracArr is [0]. No fraction digits.\r\n        } else {\r\n            nStr = arrToStr(nArr);\r\n        }\r\n    } else {\r\n\r\n        // Simple integer. Convert base.\r\n        nStr = arrToStr( strToArr(nStr) );\r\n    }\r\n\r\n    return nStr;\r\n}\r\n\r\n\r\n// Perform division in the specified base. Called by div and convert.\r\nfunction divide( dvd, dvs, exp, s, base, isOdd ) {\r\n    var dvsL, dvsT, next, cmp, remI,\r\n        dvsZ = dvs.slice(),\r\n        dvdI = dvsL = dvs.length,\r\n        dvdL = dvd.length,\r\n        rem = dvd.slice( 0, dvsL ),\r\n        remL = rem.length,\r\n        quo = new BigNumber(ONE),\r\n        qc = quo['c'] = [],\r\n        qi = 0,\r\n        dig = DECIMAL_PLACES + ( quo['e'] = exp ) + 1;\r\n\r\n    quo['s'] = s;\r\n    s = dig < 0 ? 0 : dig;\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for ( ; remL++ < dvsL; rem.push(0) ) {\r\n    }\r\n\r\n    // Create version of divisor with leading zero.\r\n    dvsZ.unshift(0);\r\n\r\n    do {\r\n\r\n        // 'next' is how many times the divisor goes into the current remainder.\r\n        for ( next = 0; next < base; next++ ) {\r\n\r\n            // Compare divisor and remainder.\r\n            if ( dvsL != ( remL = rem.length ) ) {\r\n                cmp = dvsL > remL ? 1 : -1;\r\n            } else {\r\n                for ( remI = -1, cmp = 0; ++remI < dvsL; ) {\r\n\r\n                    if ( dvs[remI] != rem[remI] ) {\r\n                        cmp = dvs[remI] > rem[remI] ? 1 : -1;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Subtract divisor from remainder (if divisor < remainder).\r\n            if ( cmp < 0 ) {\r\n\r\n                // Remainder cannot be more than one digit longer than divisor.\r\n                // Equalise lengths using divisor with extra leading zero?\r\n                for ( dvsT = remL == dvsL ? dvs : dvsZ; remL; ) {\r\n\r\n                    if ( rem[--remL] < dvsT[remL] ) {\r\n\r\n                        for ( remI = remL;\r\n                          remI && !rem[--remI];\r\n                            rem[remI] = base - 1 ) {\r\n                        }\r\n                        --rem[remI];\r\n                        rem[remL] += base;\r\n                    }\r\n                    rem[remL] -= dvsT[remL];\r\n                }\r\n                for ( ; !rem[0]; rem.shift() ) {\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Add the 'next' digit to the result array.\r\n        qc[qi++] = cmp ? next : ++next;\r\n\r\n        // Update the remainder.\r\n        rem[0] && cmp\r\n          ? ( rem[remL] = dvd[dvdI] || 0 )\r\n          : ( rem = [ dvd[dvdI] ] );\r\n\r\n    } while ( ( dvdI++ < dvdL || rem[0] != null ) && s-- );\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if ( !qc[0] && qi != 1 ) {\r\n\r\n        // There can't be more than one zero.\r\n        --quo['e'];\r\n        qc.shift();\r\n    }\r\n\r\n    // Round?\r\n    if ( qi > dig ) {\r\n        rnd( quo, DECIMAL_PLACES, base, isOdd, rem[0] != null );\r\n    }\r\n\r\n    // Overflow?\r\n    if ( quo['e'] > MAX_EXP ) {\r\n\r\n        // Infinity.\r\n        quo['c'] = quo['e'] = null;\r\n\r\n    // Underflow?\r\n    } else if ( quo['e'] < MIN_EXP ) {\r\n\r\n        // Zero.\r\n        quo['c'] = [quo['e'] = 0];\r\n    }\r\n\r\n    return quo;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of BigNumber n in normal or\r\n * exponential notation rounded to the specified decimal places or\r\n * significant digits.\r\n * Called by toString, toExponential (exp 1), toFixed, and toPrecision (exp 2).\r\n * d is the index (with the value in normal notation) of the digit that may be\r\n * rounded up.\r\n */\r\nfunction format( n, d, exp ) {\r\n\r\n    // Initially, i is the number of decimal places required.\r\n    var i = d - (n = new BigNumber(n))['e'],\r\n        c = n['c'];\r\n\r\n    // +-Infinity or NaN?\r\n    if ( !c ) {\r\n        return n['toS']();\r\n    }\r\n\r\n    // Round?\r\n    if ( c.length > ++d ) {\r\n        rnd( n, i, 10 );\r\n    }\r\n\r\n    // Recalculate d if toFixed as n['e'] may have changed if value rounded up.\r\n    i = c[0] == 0 ? i + 1 : exp ? d : n['e'] + i + 1;\r\n\r\n    // Append zeros?\r\n    for ( ; c.length < i; c.push(0) ) {\r\n    }\r\n    i = n['e'];\r\n\r\n    /*\r\n     * toPrecision returns exponential notation if the number of significant\r\n     * digits specified is less than the number of digits necessary to\r\n     * represent the integer part of the value in normal notation.\r\n     */\r\n    return exp == 1 || exp == 2 && ( --d < i || i <= TO_EXP_NEG )\r\n\r\n      // Exponential notation.\r\n      ? ( n['s'] < 0 && c[0] ? '-' : '' ) + ( c.length > 1\r\n        ? ( c.splice( 1, 0, '.' ), c.join('') )\r\n        : c[0] ) + ( i < 0 ? 'e' : 'e+' ) + i\r\n\r\n      // Normal notation.\r\n      : n['toS']();\r\n}\r\n\r\n\r\n// Round if necessary.\r\n// Called by divide, format, setMode and sqrt.\r\nfunction rnd( x, dp, base, isOdd, r ) {\r\n    var xc = x['c'],\r\n        isNeg = x['s'] < 0,\r\n        half = base / 2,\r\n        i = x['e'] + dp + 1,\r\n\r\n        // 'next' is the digit after the digit that may be rounded up.\r\n        next = xc[i],\r\n\r\n        /*\r\n         * 'more' is whether there are digits after 'next'.\r\n         * E.g.\r\n         * 0.005 (e = -3) to be rounded to 0 decimal places (dp = 0) gives i = -2\r\n         * The 'next' digit is zero, and there ARE 'more' digits after it.\r\n         * 0.5 (e = -1) dp = 0 gives i = 0\r\n         * The 'next' digit is 5 and there are no 'more' digits after it.\r\n         */\r\n        more = r || i < 0 || xc[i + 1] != null;\r\n\r\n    r = ROUNDING_MODE < 4\r\n      ? ( next != null || more ) &&\r\n        ( ROUNDING_MODE == 0 ||\r\n           ROUNDING_MODE == 2 && !isNeg ||\r\n             ROUNDING_MODE == 3 && isNeg )\r\n      : next > half || next == half &&\r\n        ( ROUNDING_MODE == 4 || more ||\r\n\r\n          /*\r\n           * isOdd is used in base conversion and refers to the least significant\r\n           * digit of the integer part of the value to be converted. The fraction\r\n           * part is rounded by this method separately from the integer part.\r\n           */\r\n          ROUNDING_MODE == 6 && ( xc[i - 1] & 1 || !dp && isOdd ) ||\r\n            ROUNDING_MODE == 7 && !isNeg ||\r\n              ROUNDING_MODE == 8 && isNeg );\r\n\r\n    if ( i < 1 || !xc[0] ) {\r\n        xc.length = 0;\r\n        xc.push(0);\r\n\r\n        if ( r ) {\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = 1;\r\n            x['e'] = -dp;\r\n        } else {\r\n\r\n            // Zero.\r\n            x['e'] = 0;\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n    // Remove any digits after the required decimal places.\r\n    xc.length = i--;\r\n\r\n    // Round up?\r\n    if ( r ) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for ( --base; ++xc[i] > base; ) {\r\n            xc[i] = 0;\r\n\r\n            if ( !i-- ) {\r\n                ++x['e'];\r\n                xc.unshift(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for ( i = xc.length; !xc[--i]; xc.pop() ) {\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\n\r\n// Round after setting the appropriate rounding mode.\r\n// Handles ceil, floor and round.\r\nfunction setMode( x, dp, rm ) {\r\n    var r = ROUNDING_MODE;\r\n\r\n    ROUNDING_MODE = rm;\r\n    x = new BigNumber(x);\r\n    x['c'] && rnd( x, dp, 10 );\r\n    ROUNDING_MODE = r;\r\n\r\n    return x;\r\n}\r\n\r\n\r\n// PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n/*\r\n * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n */\r\nP['abs'] = P['absoluteValue'] = function () {\r\n    var x = new BigNumber(this);\r\n\r\n    if ( x['s'] < 0 ) {\r\n        x['s'] = 1;\r\n    }\r\n\r\n    return x;\r\n};\r\n\r\n/*\r\n * Return the bit length of the number.\r\n */\r\nP['bitLength'] = function () {\r\n    return this.toString(2).length;\r\n};\r\n\r\n\r\n/*\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * rounded to a whole number in the direction of Infinity.\r\n */\r\nP['ceil'] = function () {\r\n    return setMode( this, 0, 2 );\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n * 0 if they have the same value,\r\n * or null if the value of either is NaN.\r\n */\r\nP['comparedTo'] = P['cmp'] = function ( y, b ) {\r\n    var a,\r\n        x = this,\r\n        xc = x['c'],\r\n        yc = ( id = -id, y = new BigNumber( y, b ) )['c'],\r\n        i = x['s'],\r\n        j = y['s'],\r\n        k = x['e'],\r\n        l = y['e'];\r\n\r\n    // Either NaN?\r\n    if ( !i || !j ) {\r\n        return null;\r\n    }\r\n\r\n    a = xc && !xc[0], b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if ( a || b ) {\r\n        return a ? b ? 0 : -j : i;\r\n    }\r\n\r\n    // Signs differ?\r\n    if ( i != j ) {\r\n        return i;\r\n    }\r\n\r\n    // Either Infinity?\r\n    if ( a = i < 0, b = k == l, !xc || !yc ) {\r\n        return b ? 0 : !xc ^ a ? 1 : -1;\r\n    }\r\n\r\n    // Compare exponents.\r\n    if ( !b ) {\r\n        return k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n    // Compare digit by digit.\r\n    for ( i = -1,\r\n          j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n          ++i < j; ) {\r\n\r\n        if ( xc[i] != yc[i] ) {\r\n            return xc[i] > yc[i] ^ a ? 1 : -1;\r\n        }\r\n    }\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * divided by the value of BigNumber(y, b), rounded according to\r\n * DECIMAL_PLACES and ROUNDING_MODE.\r\n */\r\nP['dividedBy'] = P['div'] = function ( y, b ) {\r\n    var xc = this['c'],\r\n        xe = this['e'],\r\n        xs = this['s'],\r\n        yc = ( id = 2, y = new BigNumber( y, b ) )['c'],\r\n        ye = y['e'],\r\n        ys = y['s'],\r\n        s = xs == ys ? 1 : -1;\r\n\r\n    // Either NaN/Infinity/0?\r\n    return !xe && ( !xc || !xc[0] ) || !ye && ( !yc || !yc[0] )\r\n\r\n      // Either NaN?\r\n      ? new BigNumber( !xs || !ys ||\r\n\r\n        // Both 0 or both Infinity?\r\n        ( xc ? yc && xc[0] == yc[0] : !yc )\r\n\r\n          // Return NaN.\r\n          ? NaN\r\n\r\n          // x is 0 or y is Infinity?\r\n          : xc && xc[0] == 0 || !yc\r\n\r\n            // Return +-0.\r\n            ? s * 0\r\n\r\n            // y is 0. Return +-Infinity.\r\n            : s / 0 )\r\n\r\n      : divide( xc, yc, xe - ye, s, 10 );\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this BigNumber is equal to the value of\r\n * BigNumber(n, b), otherwise returns false.\r\n */\r\nP['equals'] = P['eq'] = function ( n, b ) {\r\n    id = 3;\r\n    return this['cmp']( n, b ) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * rounded to a whole number in the direction of -Infinity.\r\n */\r\nP['floor'] = function () {\r\n    return setMode( this, 0, 3 );\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this BigNumber is greater than the value of\r\n * BigNumber(n, b), otherwise returns false.\r\n */\r\nP['greaterThan'] = P['gt'] = function ( n, b ) {\r\n    id = 4;\r\n    return this['cmp']( n, b ) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this BigNumber is greater than or equal to\r\n * the value of BigNumber(n, b), otherwise returns false.\r\n */\r\nP['greaterThanOrEqualTo'] = P['gte'] = function ( n, b ) {\r\n    id = 5;\r\n    return ( b = this['cmp']( n, b ) ) == 1 || b === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this BigNumber is a finite number, otherwise\r\n * returns false.\r\n */\r\nP['isFinite'] = P['isF'] = function () {\r\n    return !!this['c'];\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this BigNumber is NaN, otherwise returns\r\n * false.\r\n */\r\nP['isNaN'] = function () {\r\n    return !this['s'];\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this BigNumber is negative, otherwise\r\n * returns false.\r\n */\r\nP['isNegative'] = P['isNeg'] = function () {\r\n    return this['s'] < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this BigNumber is 0 or -0, otherwise returns\r\n * false.\r\n */\r\nP['isZero'] = P['isZ'] = function () {\r\n    return !!this['c'] && this['c'][0] == 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this BigNumber is less than the value of\r\n * BigNumber(n, b), otherwise returns false.\r\n */\r\nP['lessThan'] = P['lt'] = function ( n, b ) {\r\n    id = 6;\r\n    return this['cmp']( n, b ) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this BigNumber is less than or equal to the\r\n * value of BigNumber(n, b), otherwise returns false.\r\n */\r\nP['lessThanOrEqualTo'] = P['lte'] = P['le'] = function ( n, b ) {\r\n    id = 7;\r\n    return ( b = this['cmp']( n, b ) ) == -1 || b === 0;\r\n};\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber minus\r\n * the value of BigNumber(y, b).\r\n */\r\nP['minus'] = P['sub'] = function ( y, b ) {\r\n    var d, i, j, xLTy,\r\n        x = this,\r\n        a = x['s'];\r\n\r\n    b = ( id = 8, y = new BigNumber( y, b ) )['s'];\r\n\r\n    // Either NaN?\r\n    if ( !a || !b ) {\r\n        return new BigNumber(NaN);\r\n    }\r\n\r\n    // Signs differ?\r\n    if ( a != b ) {\r\n        return y['s'] = -b, x['plus'](y);\r\n    }\r\n\r\n    var xc = x['c'],\r\n        xe = x['e'],\r\n        yc = y['c'],\r\n        ye = y['e'];\r\n\r\n    if ( !xe || !ye ) {\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) {\r\n            return xc ? ( y['s'] = -b, y ) : new BigNumber( yc ? x : NaN );\r\n        }\r\n\r\n        // Either zero?\r\n        if ( !xc[0] || !yc[0] ) {\r\n\r\n            // y is non-zero?\r\n            return yc[0]\r\n              ? ( y['s'] = -b, y )\r\n\r\n              // x is non-zero?\r\n              : new BigNumber( xc[0]\r\n                ? x\r\n\r\n                // Both are zero.\r\n                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                : ROUNDING_MODE == 3 ? -0 : 0 );\r\n        }\r\n    }\r\n\r\n    // Determine which is the bigger number.\r\n    // Prepend zeros to equalise exponents.\r\n    if ( xc = xc.slice(), a = xe - ye ) {\r\n        d = ( xLTy = a < 0 ) ? ( a = -a, xc ) : ( ye = xe, yc );\r\n\r\n        for ( d.reverse(), b = a; b--; d.push(0) ) {\r\n        }\r\n        d.reverse();\r\n    } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = ( ( xLTy = xc.length < yc.length ) ? xc : yc ).length;\r\n\r\n        for ( a = b = 0; b < j; b++ ) {\r\n\r\n            if ( xc[b] != yc[b] ) {\r\n                xLTy = xc[b] < yc[b];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if ( xLTy ) {\r\n        d = xc, xc = yc, yc = d;\r\n        y['s'] = -y['s'];\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter\r\n     * as subtraction only needs to start at yc.length.\r\n     */\r\n    if ( ( b = -( ( j = xc.length ) - yc.length ) ) > 0 ) {\r\n\r\n        for ( ; b--; xc[j++] = 0 ) {\r\n        }\r\n    }\r\n\r\n    // Subtract yc from xc.\r\n    for ( b = yc.length; b > a; ){\r\n\r\n        if ( xc[--b] < yc[b] ) {\r\n\r\n            for ( i = b; i && !xc[--i]; xc[i] = 9 ) {\r\n            }\r\n            --xc[i];\r\n            xc[b] += 10;\r\n        }\r\n        xc[b] -= yc[b];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for ( ; xc[--j] == 0; xc.pop() ) {\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for ( ; xc[0] == 0; xc.shift(), --ye ) {\r\n    }\r\n\r\n    /*\r\n     * No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n     * when neither x or y are Infinity.\r\n     */\r\n\r\n    // Underflow?\r\n    if ( ye < MIN_EXP || !xc[0] ) {\r\n\r\n        /*\r\n         * Following IEEE 754 (2008) 6.3,\r\n         * n - n = +0  but  n - n = -0 when rounding towards -Infinity.\r\n         */\r\n        if ( !xc[0] ) {\r\n            y['s'] = ROUNDING_MODE == 3 ? -1 : 1;\r\n        }\r\n\r\n        // Result is zero.\r\n        xc = [ye = 0];\r\n    }\r\n\r\n    return y['c'] = xc, y['e'] = ye, y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber modulo\r\n * the value of BigNumber(y, b).\r\n */\r\nP['modulo'] = P['mod'] = function ( y, b ) {\r\n    var x = this,\r\n        xc = x['c'],\r\n        yc = ( id = 9, y = new BigNumber( y, b ) )['c'],\r\n        i = x['s'],\r\n        j = y['s'];\r\n\r\n    // Is x or y NaN, or y zero?\r\n    b = !i || !j || yc && !yc[0];\r\n\r\n    if ( b || xc && !xc[0] ) {\r\n        return new BigNumber( b ? NaN : x );\r\n    }\r\n\r\n    x['s'] = y['s'] = 1;\r\n    b = y['cmp'](x) == 1;\r\n    x['s'] = i, y['s'] = j;\r\n\r\n    return b\r\n      ? new BigNumber(x)\r\n      : ( i = DECIMAL_PLACES, j = ROUNDING_MODE,\r\n        DECIMAL_PLACES = 0, ROUNDING_MODE = 1,\r\n          x = x['div'](y),\r\n            DECIMAL_PLACES = i, ROUNDING_MODE = j,\r\n              this['minus']( x['times'](y) ) );\r\n};\r\n\r\n\r\n/*\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * negated, i.e. multiplied by -1.\r\n */\r\nP['negated'] = P['neg'] = function () {\r\n    var x = new BigNumber(this);\r\n\r\n    return x['s'] = -x['s'] || null, x;\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber plus\r\n * the value of BigNumber(y, b).\r\n */\r\nP['plus'] = P['add'] = function ( y, b ) {\r\n    var d,\r\n        x = this,\r\n        a = x['s'];\r\n\r\n    b = ( id = 10, y = new BigNumber( y, b ) )['s'];\r\n\r\n    // Either NaN?\r\n    if ( !a || !b ) {\r\n        return new BigNumber(NaN);\r\n    }\r\n\r\n    // Signs differ?\r\n    if ( a != b ) {\r\n        return y['s'] = -b, x['minus'](y);\r\n    }\r\n\r\n    var xe = x['e'],\r\n        xc = x['c'],\r\n        ye = y['e'],\r\n        yc = y['c'];\r\n\r\n    if ( !xe || !ye ) {\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) {\r\n\r\n            // Return +-Infinity.\r\n            return new BigNumber( a / 0 );\r\n        }\r\n\r\n        // Either zero?\r\n        if ( !xc[0] || !yc[0] ) {\r\n\r\n            // y is non-zero?\r\n            return yc[0]\r\n              ? y\r\n\r\n              // x is non-zero?\r\n              : new BigNumber( xc[0]\r\n                ? x\r\n\r\n                // Both are zero. Return zero.\r\n                : a * 0 );\r\n        }\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: Faster to use reverse then do unshifts.\r\n    if ( xc = xc.slice(), a = xe - ye ) {\r\n        d = a > 0 ? ( ye = xe, yc ) : ( a = -a, xc );\r\n\r\n        for ( d.reverse(); a--; d.push(0) ) {\r\n        }\r\n        d.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if ( xc.length - yc.length < 0 ) {\r\n        d = yc, yc = xc, xc = d;\r\n    }\r\n\r\n    /*\r\n     * Only start adding at yc.length - 1 as the\r\n     * further digits of xc can be left as they are.\r\n     */\r\n    for ( a = yc.length, b = 0; a;\r\n         b = ( xc[--a] = xc[a] + yc[a] + b ) / 10 ^ 0, xc[a] %= 10 ) {\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if ( b ) {\r\n        xc.unshift(b);\r\n\r\n        // Overflow? (MAX_EXP + 1 possible)\r\n        if ( ++ye > MAX_EXP ) {\r\n\r\n            // Infinity.\r\n            xc = ye = null;\r\n        }\r\n    }\r\n\r\n     // Remove trailing zeros.\r\n    for ( a = xc.length; xc[--a] == 0; xc.pop() ) {\r\n    }\r\n\r\n    return y['c'] = xc, y['e'] = ye, y;\r\n};\r\n\r\n\r\n/*\r\n * Return a BigNumber whose value is the value of this BigNumber raised to\r\n * the power e. If e is negative round according to DECIMAL_PLACES and\r\n * ROUNDING_MODE.\r\n *\r\n * e {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP['toPower'] = P['pow'] = function ( e ) {\r\n\r\n    // e to integer, avoiding NaN or Infinity becoming 0.\r\n    var i = e * 0 == 0 ? e | 0 : e,\r\n        x = new BigNumber(this),\r\n        y = new BigNumber(ONE);\r\n\r\n    // Use Math.pow?\r\n    // Pass +-Infinity for out of range exponents.\r\n    if ( ( ( ( outOfRange = e < -MAX_POWER || e > MAX_POWER ) &&\r\n      (i = e * 1 / 0) ) ||\r\n\r\n         /*\r\n          * Any exponent that fails the parse becomes NaN.\r\n          *\r\n          * Include 'e !== 0' because on Opera -0 == parseFloat(-0) is false,\r\n          * despite -0 === parseFloat(-0) && -0 == parseFloat('-0') is true.\r\n          */\r\n         parse(e) != e && e !== 0 && !(i = NaN) ) &&\r\n\r\n          // 'pow() exponent not an integer: {e}'\r\n          // 'pow() exponent out of range: {e}'\r\n          !ifExceptionsThrow( e, 'exponent', 'pow' ) ||\r\n\r\n            // Pass zero to Math.pow, as any value to the power zero is 1.\r\n            !i ) {\r\n\r\n        // i is +-Infinity, NaN or 0.\r\n        return new BigNumber( Math.pow( x['toS'](), i ) );\r\n    }\r\n\r\n    for ( i = i < 0 ? -i : i; ; ) {\r\n\r\n        if ( i & 1 ) {\r\n            y = y['times'](x);\r\n        }\r\n        i >>= 1;\r\n\r\n        if ( !i ) {\r\n            break;\r\n        }\r\n        x = x['times'](x);\r\n    }\r\n\r\n    return e < 0 ? ONE['div'](y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a BigNumber whose value is the value of this BigNumber raised to\r\n * the power m modulo n.\r\n *\r\n * m {BigNumber} the value to take the power of\r\n * n {BigNumber} the value to modulo by\r\n */\r\nP['powm'] = function ( m, n ) {\r\n    return this.pow(m).mod(n);\r\n};\r\n\r\n\r\n/*\r\n * Return a new BigNumber whose value is the value of this BigNumber\r\n * rounded to a maximum of dp decimal places using rounding mode rm, or to\r\n * 0 and ROUNDING_MODE respectively if omitted.\r\n *\r\n * [dp] {number} Integer, 0 to MAX inclusive.\r\n * [rm] {number} Integer, 0 to 8 inclusive.\r\n */\r\nP['round'] = function ( dp, rm ) {\r\n\r\n    dp = dp == null || ( ( ( outOfRange = dp < 0 || dp > MAX ) ||\r\n      parse(dp) != dp ) &&\r\n\r\n        // 'round() decimal places out of range: {dp}'\r\n        // 'round() decimal places not an integer: {dp}'\r\n        !ifExceptionsThrow( dp, 'decimal places', 'round' ) )\r\n          ? 0\r\n          : dp | 0;\r\n\r\n    rm = rm == null || ( ( ( outOfRange = rm < 0 || rm > 8 ) ||\r\n\r\n      // Include '&& rm !== 0' because with Opera -0 == parseFloat(-0) is false.\r\n      parse(rm) != rm && rm !== 0 ) &&\r\n\r\n        // 'round() mode not an integer: {rm}'\r\n        // 'round() mode out of range: {rm}'\r\n        !ifExceptionsThrow( rm, 'mode', 'round' ) )\r\n          ? ROUNDING_MODE\r\n          : rm | 0;\r\n\r\n    return setMode( this, dp, rm );\r\n};\r\n\r\n\r\n/*\r\n *  sqrt(-n) =  N\r\n *  sqrt( N) =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt( I) =  I\r\n *  sqrt( 0) =  0\r\n *  sqrt(-0) = -0\r\n *\r\n * Return a new BigNumber whose value is the square root of the value of\r\n * this BigNumber, rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n */\r\nP['squareRoot'] = P['sqrt'] = function () {\r\n    var n, r, re, t,\r\n        x = this,\r\n        c = x['c'],\r\n        s = x['s'],\r\n        e = x['e'],\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE,\r\n        half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if ( s !== 1 || !c || !c[0] ) {\r\n\r\n        return new BigNumber( !s || s < 0 && ( !c || c[0] )\r\n          ? NaN\r\n          : c ? x : 1 / 0 );\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt( x['toS']() );\r\n    ROUNDING_MODE = 1;\r\n\r\n    /*\r\n      Math.sqrt underflow/overflow?\r\n      Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n     */\r\n    if ( s == 0 || s == 1 / 0 ) {\r\n        n = c.join('');\r\n\r\n        if ( !( n.length + e & 1 ) ) {\r\n            n += '0';\r\n        }\r\n        r = new BigNumber( Math.sqrt(n) + '' );\r\n\r\n        // r may still not be finite.\r\n        if ( !r['c'] ) {\r\n            r['c'] = [1];\r\n        }\r\n        r['e'] = ( ( ( e + 1 ) / 2 ) | 0 ) - ( e < 0 || e & 1 );\r\n    } else {\r\n        r = new BigNumber( n = s.toString() );\r\n    }\r\n    re = r['e'];\r\n    s = re + ( DECIMAL_PLACES += 4 );\r\n\r\n    if ( s < 3 ) {\r\n        s = 0;\r\n    }\r\n    e = s;\r\n\r\n    // Newton-Raphson iteration.\r\n    for ( ; ; ) {\r\n        t = r;\r\n        r = half['times']( t['plus']( x['div'](t) ) );\r\n\r\n        if ( t['c'].slice( 0, s ).join('') === r['c'].slice( 0, s ).join('') ) {\r\n            c = r['c'];\r\n\r\n            /*\r\n              The exponent of r may here be one less than the final result\r\n              exponent (re), e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust\r\n              s so the rounding digits are indexed correctly.\r\n             */\r\n            s = s - ( n && r['e'] < re );\r\n\r\n            /*\r\n              The 4th rounding digit may be in error by -1 so if the 4 rounding\r\n              digits are 9999 or 4999 (i.e. approaching a rounding boundary)\r\n              continue the iteration.\r\n             */\r\n            if ( c[s] == 9 && c[s - 1] == 9 && c[s - 2] == 9 &&\r\n                    ( c[s - 3] == 9 || n && c[s - 3] == 4 ) ) {\r\n\r\n                /*\r\n                  If 9999 on first run through, check to see if rounding up\r\n                  gives the exact result as the nines may infinitely repeat.\r\n                 */\r\n                if ( n && c[s - 3] == 9 ) {\r\n                    t = r['round']( dp, 0 );\r\n\r\n                    if ( t['times'](t)['eq'](x) ) {\r\n                        ROUNDING_MODE = rm;\r\n                        DECIMAL_PLACES = dp;\r\n\r\n                        return t;\r\n                    }\r\n                }\r\n                DECIMAL_PLACES += 4;\r\n                s += 4;\r\n                n = '';\r\n            } else {\r\n\r\n                /*\r\n                  If the rounding digits are null, 0000 or 5000, check for an\r\n                  exact result. If not, then there are further digits so\r\n                  increment the 1st rounding digit to ensure correct rounding.\r\n                 */\r\n                if ( !c[e] && !c[e - 1] && !c[e - 2] &&\r\n                        ( !c[e - 3] || c[e - 3] == 5 ) ) {\r\n\r\n                    // Truncate to the first rounding digit.\r\n                    if ( c.length > e - 2 ) {\r\n                        c.length = e - 2;\r\n                    }\r\n\r\n                    if ( !r['times'](r)['eq'](x) ) {\r\n\r\n                        while ( c.length < e - 3 ) {\r\n                            c.push(0);\r\n                        }\r\n                        c[e - 3]++;\r\n                    }\r\n                }\r\n                ROUNDING_MODE = rm;\r\n                rnd( r, DECIMAL_PLACES = dp, 10 );\r\n\r\n                return r;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new BigNumber whose value is the value of this BigNumber times\r\n * the value of BigNumber(y, b).\r\n */\r\nP['times'] = P['mul'] = function ( y, b ) {\r\n    var c,\r\n        x = this,\r\n        xc = x['c'],\r\n        yc = ( id = 11, y = new BigNumber( y, b ) )['c'],\r\n        i = x['e'],\r\n        j = y['e'],\r\n        a = x['s'];\r\n\r\n    y['s'] = a == ( b = y['s'] ) ? 1 : -1;\r\n\r\n    // Either NaN/Infinity/0?\r\n    if ( !i && ( !xc || !xc[0] ) || !j && ( !yc || !yc[0] ) ) {\r\n\r\n        // Either NaN?\r\n        return new BigNumber( !a || !b ||\r\n\r\n          // x is 0 and y is Infinity  or  y is 0 and x is Infinity?\r\n          xc && !xc[0] && !yc || yc && !yc[0] && !xc\r\n\r\n            // Return NaN.\r\n            ? NaN\r\n\r\n            // Either Infinity?\r\n            : !xc || !yc\r\n\r\n              // Return +-Infinity.\r\n              ? y['s'] / 0\r\n\r\n              // x or y is 0. Return +-0.\r\n              : y['s'] * 0 );\r\n    }\r\n    y['e'] = i + j;\r\n\r\n    if ( ( a = xc.length ) < ( b = yc.length ) ) {\r\n        c = xc, xc = yc, yc = c, j = a, a = b, b = j;\r\n    }\r\n\r\n    for ( j = a + b, c = []; j--; c.push(0) ) {\r\n    }\r\n\r\n    // Multiply!\r\n    for ( i = b - 1; i > -1; i-- ) {\r\n\r\n        for ( b = 0, j = a + i;\r\n              j > i;\r\n              b = c[j] + yc[i] * xc[j - i - 1] + b,\r\n              c[j--] = b % 10 | 0,\r\n              b = b / 10 | 0 ) {\r\n        }\r\n\r\n        if ( b ) {\r\n            c[j] = ( c[j] + b ) % 10;\r\n        }\r\n    }\r\n\r\n    b && ++y['e'];\r\n\r\n    // Remove any leading zero.\r\n    !c[0] && c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for ( j = c.length; !c[--j]; c.pop() ) {\r\n    }\r\n\r\n    // No zero check needed as only x * 0 == 0 etc.\r\n\r\n    // Overflow?\r\n    y['c'] = y['e'] > MAX_EXP\r\n\r\n      // Infinity.\r\n      ? ( y['e'] = null )\r\n\r\n      // Underflow?\r\n      : y['e'] < MIN_EXP\r\n\r\n        // Zero.\r\n        ? [ y['e'] = 0 ]\r\n\r\n        // Neither.\r\n        : c;\r\n\r\n    return y;\r\n};\r\n\r\n/*\r\n * Return a buffer containing the \r\n */\r\nP['toBuffer'] = function ( opts ) {\r\n\r\n    if (typeof opts === 'string') {\r\n        if (opts !== 'mpint') return 'Unsupported Buffer representation';\r\n\r\n        var abs = this.abs();\r\n        var buf = abs.toBuffer({ size : 1, endian : 'big' });\r\n        var len = buf.length === 1 && buf[0] === 0 ? 0 : buf.length;\r\n        if (buf[0] & 0x80) len ++;\r\n\r\n        var ret = new Buffer(4 + len);\r\n        if (len > 0) buf.copy(ret, 4 + (buf[0] & 0x80 ? 1 : 0));\r\n        if (buf[0] & 0x80) ret[4] = 0;\r\n\r\n        ret[0] = len & (0xff << 24);\r\n        ret[1] = len & (0xff << 16);\r\n        ret[2] = len & (0xff << 8);\r\n        ret[3] = len & (0xff << 0);\r\n\r\n        // two's compliment for negative integers:\r\n        var isNeg = this.lt(0);\r\n        if (isNeg) {\r\n            for (var i = 4; i < ret.length; i++) {\r\n                ret[i] = 0xff - ret[i];\r\n            }\r\n        }\r\n        ret[4] = (ret[4] & 0x7f) | (isNeg ? 0x80 : 0);\r\n        if (isNeg) ret[ret.length - 1] ++;\r\n\r\n        return ret;\r\n    }\r\n\r\n    if (!opts) opts = {};\r\n\r\n    var endian = { 1 : 'big', '-1' : 'little' }[opts.endian]\r\n        || opts.endian || 'big'\r\n    ;\r\n\r\n    var hex = this.toString(16);\r\n    if (hex.charAt(0) === '-') throw new Error(\r\n        'converting negative numbers to Buffers not supported yet'\r\n    );\r\n\r\n    var size = opts.size === 'auto' ? Math.ceil(hex.length / 2) : (opts.size || 1);\r\n\r\n    var len = Math.ceil(hex.length / (2 * size)) * size;\r\n    var buf = new Buffer(len);\r\n\r\n    // zero-pad the hex string so the chunks are all `size` long\r\n    while (hex.length < 2 * len) hex = '0' + hex;\r\n\r\n    var hx = hex\r\n        .split(new RegExp('(.{' + (2 * size) + '})'))\r\n        .filter(function (s) { return s.length > 0 })\r\n    ;\r\n\r\n    hx.forEach(function (chunk, i) {\r\n        for (var j = 0; j < size; j++) {\r\n            var ix = i * size + (endian === 'big' ? j : size - j - 1);\r\n            buf[ix] = parseInt(chunk.slice(j*2,j*2+2), 16);\r\n        }\r\n    });\r\n\r\n    return buf;\r\n};\r\n\r\n/*\r\n * Return a string representing the value of this BigNumber in exponential\r\n * notation to dp fixed decimal places and rounded using ROUNDING_MODE if\r\n * necessary.\r\n *\r\n * [dp] {number} Integer, 0 to MAX inclusive.\r\n */\r\nP['toExponential'] = P['toE'] = function ( dp ) {\r\n\r\n    return format( this,\r\n      ( dp == null || ( ( outOfRange = dp < 0 || dp > MAX ) ||\r\n\r\n        /*\r\n         * Include '&& dp !== 0' because with Opera -0 == parseFloat(-0) is\r\n         * false, despite -0 == parseFloat('-0') && 0 == -0 being true.\r\n         */\r\n        parse(dp) != dp && dp !== 0 ) &&\r\n\r\n          // 'toE() decimal places not an integer: {dp}'\r\n          // 'toE() decimal places out of range: {dp}'\r\n          !ifExceptionsThrow( dp, 'decimal places', 'toE' ) ) && this['c']\r\n            ? this['c'].length - 1\r\n            : dp | 0, 1 );\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this BigNumber in normal\r\n * notation to dp fixed decimal places and rounded using ROUNDING_MODE if\r\n * necessary.\r\n *\r\n * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Integer, 0 to MAX inclusive.\r\n */\r\nP['toFixed'] = P['toF'] = function ( dp ) {\r\n    var n, str, d,\r\n        x = this;\r\n\r\n    if ( !( dp == null || ( ( outOfRange = dp < 0 || dp > MAX ) ||\r\n        parse(dp) != dp && dp !== 0 ) &&\r\n\r\n        // 'toF() decimal places not an integer: {dp}'\r\n        // 'toF() decimal places out of range: {dp}'\r\n        !ifExceptionsThrow( dp, 'decimal places', 'toF' ) ) ) {\r\n          d = x['e'] + ( dp | 0 );\r\n    }\r\n\r\n    n = TO_EXP_NEG, dp = TO_EXP_POS;\r\n    TO_EXP_NEG = -( TO_EXP_POS = 1 / 0 );\r\n\r\n    // Note: str is initially undefined.\r\n    if ( d == str ) {\r\n        str = x['toS']();\r\n    } else {\r\n        str = format( x, d );\r\n\r\n        // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.\r\n        // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n        if ( x['s'] < 0 && x['c'] ) {\r\n\r\n            // As e.g. -0 toFixed(3), will wrongly be returned as -0.000 from toString.\r\n            if ( !x['c'][0] ) {\r\n                str = str.replace(/^-/, '');\r\n\r\n            // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.\r\n            } else if ( str.indexOf('-') < 0 ) {\r\n                str = '-' + str;\r\n            }\r\n        }\r\n    }\r\n    TO_EXP_NEG = n, TO_EXP_POS = dp;\r\n\r\n    return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string array representing the value of this BigNumber as a\r\n * simple fraction with an integer numerator and an integer denominator.\r\n * The denominator will be a positive non-zero value less than or equal to\r\n * the specified maximum denominator. If a maximum denominator is not\r\n * specified, the denominator will be the lowest value necessary to\r\n * represent the number exactly.\r\n *\r\n * [maxD] {number|string|BigNumber} Integer >= 1 and < Infinity.\r\n */\r\nP['toFraction'] = P['toFr'] = function ( maxD ) {\r\n    var q, frac, n0, d0, d2, n, e,\r\n        n1 = d0 = new BigNumber(ONE),\r\n        d1 = n0 = new BigNumber('0'),\r\n        x = this,\r\n        xc = x['c'],\r\n        exp = MAX_EXP,\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE,\r\n        d = new BigNumber(ONE);\r\n\r\n    // NaN, Infinity.\r\n    if ( !xc ) {\r\n        return x['toS']();\r\n    }\r\n\r\n    e = d['e'] = xc.length - x['e'] - 1;\r\n\r\n    // If max denominator is undefined or null...\r\n    if ( maxD == null ||\r\n\r\n         // or NaN...\r\n         ( !( id = 12, n = new BigNumber(maxD) )['s'] ||\r\n\r\n           // or less than 1, or Infinity...\r\n           ( outOfRange = n['cmp'](n1) < 0 || !n['c'] ) ||\r\n\r\n             // or not an integer...\r\n             ( ERRORS && n['e'] < n['c'].length - 1 ) ) &&\r\n\r\n               // 'toFr() max denominator not an integer: {maxD}'\r\n               // 'toFr() max denominator out of range: {maxD}'\r\n               !ifExceptionsThrow( maxD, 'max denominator', 'toFr' ) ||\r\n\r\n                 // or greater than the maxD needed to specify the value exactly...\r\n                 ( maxD = n )['cmp'](d) > 0 ) {\r\n\r\n        // d is e.g. 10, 100, 1000, 10000... , n1 is 1.\r\n        maxD = e > 0 ? d : n1;\r\n    }\r\n\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber( xc.join('') );\r\n\r\n    for ( DECIMAL_PLACES = 0, ROUNDING_MODE = 1; ; )  {\r\n        q = n['div'](d);\r\n        d2 = d0['plus']( q['times'](d1) );\r\n\r\n        if ( d2['cmp'](maxD) == 1 ) {\r\n            break;\r\n        }\r\n\r\n        d0 = d1, d1 = d2;\r\n\r\n        n1 = n0['plus']( q['times']( d2 = n1 ) );\r\n        n0 = d2;\r\n\r\n        d = n['minus']( q['times']( d2 = d ) );\r\n        n = d2;\r\n    }\r\n\r\n    d2 = maxD['minus'](d0)['div'](d1);\r\n    n0 = n0['plus']( d2['times'](n1) );\r\n    d0 = d0['plus']( d2['times'](d1) );\r\n\r\n    n0['s'] = n1['s'] = x['s'];\r\n\r\n    DECIMAL_PLACES = e * 2;\r\n    ROUNDING_MODE = rm;\r\n\r\n    // Determine which fraction is closer to x, n0 / d0 or n1 / d1?\r\n    frac = n1['div'](d1)['minus'](x)['abs']()['cmp'](\r\n      n0['div'](d0)['minus'](x)['abs']() ) < 1\r\n      ? [ n1['toS'](), d1['toS']() ]\r\n      : [ n0['toS'](), d0['toS']() ];\r\n\r\n    return MAX_EXP = exp, DECIMAL_PLACES = dp, frac;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this BigNumber to sd significant\r\n * digits and rounded using ROUNDING_MODE if necessary.\r\n * If sd is less than the number of digits necessary to represent the integer\r\n * part of the value in normal notation, then use exponential notation.\r\n *\r\n * sd {number} Integer, 1 to MAX inclusive.\r\n */\r\nP['toPrecision'] = P['toP'] = function ( sd ) {\r\n\r\n    /*\r\n     * ERRORS true: Throw if sd not undefined, null or an integer in range.\r\n     * ERRORS false: Ignore sd if not a number or not in range.\r\n     * Truncate non-integers.\r\n     */\r\n    return sd == null || ( ( ( outOfRange = sd < 1 || sd > MAX ) ||\r\n      parse(sd) != sd ) &&\r\n\r\n        // 'toP() precision not an integer: {sd}'\r\n        // 'toP() precision out of range: {sd}'\r\n        !ifExceptionsThrow( sd, 'precision', 'toP' ) )\r\n          ? this['toS']()\r\n          : format( this, --sd | 0, 2 );\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this BigNumber in base b, or\r\n * base 10 if b is omitted. If a base is specified, including base 10,\r\n * round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n * If a base is not specified, and this BigNumber has a positive exponent\r\n * that is equal to or greater than TO_EXP_POS, or a negative exponent equal\r\n * to or less than TO_EXP_NEG, return exponential notation.\r\n *\r\n * [b] {number} Integer, 2 to 64 inclusive.\r\n */\r\nP['toString'] = P['toS'] = function ( b ) {\r\n    var u, str, strL,\r\n        x = this,\r\n        xe = x['e'];\r\n\r\n    // Infinity or NaN?\r\n    if ( xe === null ) {\r\n        str = x['s'] ? 'Infinity' : 'NaN';\r\n\r\n    // Exponential format?\r\n    } else if ( b === u && ( xe <= TO_EXP_NEG || xe >= TO_EXP_POS ) ) {\r\n        return format( x, x['c'].length - 1, 1 );\r\n    } else {\r\n        str = x['c'].join('');\r\n\r\n        // Negative exponent?\r\n        if ( xe < 0 ) {\r\n\r\n            // Prepend zeros.\r\n            for ( ; ++xe; str = '0' + str ) {\r\n            }\r\n            str = '0.' + str;\r\n\r\n        // Positive exponent?\r\n        } else if ( strL = str.length, xe > 0 ) {\r\n\r\n            if ( ++xe > strL ) {\r\n\r\n                // Append zeros.\r\n                for ( xe -= strL; xe-- ; str += '0' ) {\r\n                }\r\n            } else if ( xe < strL ) {\r\n                str = str.slice( 0, xe ) + '.' + str.slice(xe);\r\n            }\r\n\r\n        // Exponent zero.\r\n        } else {\r\n            if ( u = str.charAt(0), strL > 1 ) {\r\n                str = u + '.' + str.slice(1);\r\n\r\n            // Avoid '-0'\r\n            } else if ( u == '0' ) {\r\n                return u;\r\n            }\r\n        }\r\n\r\n        if ( b != null ) {\r\n\r\n            if ( !( outOfRange = !( b >= 2 && b < 65 ) ) &&\r\n              ( b == (b | 0) || !ERRORS ) ) {\r\n                str = convert( str, b | 0, 10, x['s'] );\r\n\r\n                // Avoid '-0'\r\n                if ( str == '0' ) {\r\n                    return str;\r\n                }\r\n            } else {\r\n\r\n                // 'toS() base not an integer: {b}'\r\n                // 'toS() base out of range: {b}'\r\n                ifExceptionsThrow( b, 'base', 'toS' );\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return x['s'] < 0 ? '-' + str : str;\r\n};\r\n\r\nP['toNumber'] = function () {\r\n  return parseInt(this['toString'](), 10);\r\n};\r\n\r\n\r\n/*\r\n * Return as toString, but do not accept a base argument.\r\n */\r\nP['valueOf'] = function () {\r\n    return this['toS']();\r\n};\r\n\r\n\r\n// Add aliases for BigDecimal methods.\r\n//P['add'] = P['plus'];\r\n//P['subtract'] = P['minus'];\r\n//P['multiply'] = P['times'];\r\n//P['divide'] = P['div'];\r\n//P['remainder'] = P['mod'];\r\n//P['compareTo'] = P['cmp'];\r\n//P['negate'] = P['neg'];\r\n\r\n\r\n// EXPORT\r\nmodule.exports = BigNumber;\r\n"]},"metadata":{},"sourceType":"script"}