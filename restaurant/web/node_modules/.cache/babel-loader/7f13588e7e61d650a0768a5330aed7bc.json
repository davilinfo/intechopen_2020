{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BigNum = require(\"@liskhq/bignum\");\n\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nconst base_transaction_1 = require(\"./base_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst errors_1 = require(\"./errors\");\n\nconst utils_1 = require(\"./utils\");\n\nexports.transferAssetFormatSchema = {\n  type: 'object',\n  required: ['recipientId', 'amount'],\n  properties: {\n    recipientId: {\n      type: 'string',\n      format: 'address'\n    },\n    amount: {\n      type: 'string',\n      format: 'amount'\n    },\n    data: {\n      type: 'string',\n      format: 'transferData',\n      maxLength: 64\n    }\n  }\n};\n\nclass TransferTransaction extends base_transaction_1.BaseTransaction {\n  constructor(rawTransaction) {\n    super(rawTransaction);\n    const tx = typeof rawTransaction === 'object' && rawTransaction !== null ? rawTransaction : {};\n\n    if (tx.asset) {\n      const rawAsset = tx.asset;\n      this.asset = {\n        data: rawAsset.data,\n        recipientId: rawAsset.recipientId,\n        amount: new BigNum(lisk_validator_1.isPositiveNumberString(rawAsset.amount) ? rawAsset.amount : '0')\n      };\n    } else {\n      this.asset = {\n        amount: new BigNum('0'),\n        recipientId: ''\n      };\n    }\n  }\n\n  assetToBytes() {\n    const transactionAmount = lisk_cryptography_1.bigNumberToBuffer(this.asset.amount.toString(), constants_1.BYTESIZES.AMOUNT, 'big');\n    const transactionRecipientID = this.asset.recipientId ? lisk_cryptography_1.intToBuffer(this.asset.recipientId.slice(0, -1), constants_1.BYTESIZES.RECIPIENT_ID).slice(0, constants_1.BYTESIZES.RECIPIENT_ID) : Buffer.alloc(0);\n    const dataBuffer = this.asset.data ? lisk_cryptography_1.stringToBuffer(this.asset.data) : Buffer.alloc(0);\n    return Buffer.concat([transactionAmount, transactionRecipientID, dataBuffer]);\n  }\n\n  assetToJSON() {\n    return {\n      data: this.asset.data,\n      amount: this.asset.amount.toString(),\n      recipientId: this.asset.recipientId\n    };\n  }\n\n  async prepare(store) {\n    await store.account.cache([{\n      address: this.senderId\n    }, {\n      address: this.asset.recipientId\n    }]);\n  }\n\n  validateAsset() {\n    const asset = this.assetToJSON();\n    const schemaErrors = lisk_validator_1.validator.validate(exports.transferAssetFormatSchema, asset);\n    const errors = errors_1.convertToAssetError(this.id, schemaErrors);\n\n    if (!lisk_validator_1.isValidTransferAmount(this.asset.amount.toString())) {\n      errors.push(new errors_1.TransactionError('Amount must be a valid number in string format.', this.id, '.asset.amount', this.asset.amount.toString()));\n    }\n\n    if (!this.asset.recipientId) {\n      errors.push(new errors_1.TransactionError('`recipientId` must be provided.', this.id, '.asset.recipientId'));\n    }\n\n    return errors;\n  }\n\n  applyAsset(store) {\n    const errors = [];\n    const sender = store.account.get(this.senderId);\n    const balanceError = utils_1.verifyAmountBalance(this.id, sender, this.asset.amount, this.fee);\n\n    if (balanceError) {\n      errors.push(balanceError);\n    }\n\n    const updatedSenderBalance = new BigNum(sender.balance).sub(this.asset.amount);\n    const updatedSender = { ...sender,\n      balance: updatedSenderBalance.toString()\n    };\n    store.account.set(updatedSender.address, updatedSender);\n    const recipient = store.account.getOrDefault(this.asset.recipientId);\n    const updatedRecipientBalance = new BigNum(recipient.balance).add(this.asset.amount);\n\n    if (updatedRecipientBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n      errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.asset.amount.toString()));\n    }\n\n    const updatedRecipient = { ...recipient,\n      balance: updatedRecipientBalance.toString()\n    };\n    store.account.set(updatedRecipient.address, updatedRecipient);\n    return errors;\n  }\n\n  undoAsset(store) {\n    const errors = [];\n    const sender = store.account.get(this.senderId);\n    const updatedSenderBalance = new BigNum(sender.balance).add(this.asset.amount);\n\n    if (updatedSenderBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n      errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.asset.amount.toString()));\n    }\n\n    const updatedSender = { ...sender,\n      balance: updatedSenderBalance.toString()\n    };\n    store.account.set(updatedSender.address, updatedSender);\n    const recipient = store.account.getOrDefault(this.asset.recipientId);\n    const balanceError = utils_1.verifyBalance(this.id, recipient, this.asset.amount);\n\n    if (balanceError) {\n      errors.push(balanceError);\n    }\n\n    const updatedRecipientBalance = new BigNum(recipient.balance).sub(this.asset.amount);\n    const updatedRecipient = { ...recipient,\n      balance: updatedRecipientBalance.toString()\n    };\n    store.account.set(updatedRecipient.address, updatedRecipient);\n    return errors;\n  }\n\n}\n\nexports.TransferTransaction = TransferTransaction;\nTransferTransaction.TYPE = 8;\nTransferTransaction.FEE = constants_1.TRANSFER_FEE.toString();","map":{"version":3,"sources":["../src/8_transfer_transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BigNum = require(\"@liskhq/bignum\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst base_transaction_1 = require(\"./base_transaction\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"./utils\");\nexports.transferAssetFormatSchema = {\n    type: 'object',\n    required: ['recipientId', 'amount'],\n    properties: {\n        recipientId: {\n            type: 'string',\n            format: 'address',\n        },\n        amount: {\n            type: 'string',\n            format: 'amount',\n        },\n        data: {\n            type: 'string',\n            format: 'transferData',\n            maxLength: 64,\n        },\n    },\n};\nclass TransferTransaction extends base_transaction_1.BaseTransaction {\n    constructor(rawTransaction) {\n        super(rawTransaction);\n        const tx = (typeof rawTransaction === 'object' && rawTransaction !== null\n            ? rawTransaction\n            : {});\n        if (tx.asset) {\n            const rawAsset = tx.asset;\n            this.asset = {\n                data: rawAsset.data,\n                recipientId: rawAsset.recipientId,\n                amount: new BigNum(lisk_validator_1.isPositiveNumberString(rawAsset.amount) ? rawAsset.amount : '0'),\n            };\n        }\n        else {\n            this.asset = {\n                amount: new BigNum('0'),\n                recipientId: '',\n            };\n        }\n    }\n    assetToBytes() {\n        const transactionAmount = lisk_cryptography_1.bigNumberToBuffer(this.asset.amount.toString(), constants_1.BYTESIZES.AMOUNT, 'big');\n        const transactionRecipientID = this.asset.recipientId\n            ? lisk_cryptography_1.intToBuffer(this.asset.recipientId.slice(0, -1), constants_1.BYTESIZES.RECIPIENT_ID).slice(0, constants_1.BYTESIZES.RECIPIENT_ID)\n            : Buffer.alloc(0);\n        const dataBuffer = this.asset.data\n            ? lisk_cryptography_1.stringToBuffer(this.asset.data)\n            : Buffer.alloc(0);\n        return Buffer.concat([\n            transactionAmount,\n            transactionRecipientID,\n            dataBuffer,\n        ]);\n    }\n    assetToJSON() {\n        return {\n            data: this.asset.data,\n            amount: this.asset.amount.toString(),\n            recipientId: this.asset.recipientId,\n        };\n    }\n    async prepare(store) {\n        await store.account.cache([\n            {\n                address: this.senderId,\n            },\n            {\n                address: this.asset.recipientId,\n            },\n        ]);\n    }\n    validateAsset() {\n        const asset = this.assetToJSON();\n        const schemaErrors = lisk_validator_1.validator.validate(exports.transferAssetFormatSchema, asset);\n        const errors = errors_1.convertToAssetError(this.id, schemaErrors);\n        if (!lisk_validator_1.isValidTransferAmount(this.asset.amount.toString())) {\n            errors.push(new errors_1.TransactionError('Amount must be a valid number in string format.', this.id, '.asset.amount', this.asset.amount.toString()));\n        }\n        if (!this.asset.recipientId) {\n            errors.push(new errors_1.TransactionError('`recipientId` must be provided.', this.id, '.asset.recipientId'));\n        }\n        return errors;\n    }\n    applyAsset(store) {\n        const errors = [];\n        const sender = store.account.get(this.senderId);\n        const balanceError = utils_1.verifyAmountBalance(this.id, sender, this.asset.amount, this.fee);\n        if (balanceError) {\n            errors.push(balanceError);\n        }\n        const updatedSenderBalance = new BigNum(sender.balance).sub(this.asset.amount);\n        const updatedSender = {\n            ...sender,\n            balance: updatedSenderBalance.toString(),\n        };\n        store.account.set(updatedSender.address, updatedSender);\n        const recipient = store.account.getOrDefault(this.asset.recipientId);\n        const updatedRecipientBalance = new BigNum(recipient.balance).add(this.asset.amount);\n        if (updatedRecipientBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n            errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.asset.amount.toString()));\n        }\n        const updatedRecipient = {\n            ...recipient,\n            balance: updatedRecipientBalance.toString(),\n        };\n        store.account.set(updatedRecipient.address, updatedRecipient);\n        return errors;\n    }\n    undoAsset(store) {\n        const errors = [];\n        const sender = store.account.get(this.senderId);\n        const updatedSenderBalance = new BigNum(sender.balance).add(this.asset.amount);\n        if (updatedSenderBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n            errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.asset.amount.toString()));\n        }\n        const updatedSender = {\n            ...sender,\n            balance: updatedSenderBalance.toString(),\n        };\n        store.account.set(updatedSender.address, updatedSender);\n        const recipient = store.account.getOrDefault(this.asset.recipientId);\n        const balanceError = utils_1.verifyBalance(this.id, recipient, this.asset.amount);\n        if (balanceError) {\n            errors.push(balanceError);\n        }\n        const updatedRecipientBalance = new BigNum(recipient.balance).sub(this.asset.amount);\n        const updatedRecipient = {\n            ...recipient,\n            balance: updatedRecipientBalance.toString(),\n        };\n        store.account.set(updatedRecipient.address, updatedRecipient);\n        return errors;\n    }\n}\nexports.TransferTransaction = TransferTransaction;\nTransferTransaction.TYPE = 8;\nTransferTransaction.FEE = constants_1.TRANSFER_FEE.toString();\n//# sourceMappingURL=8_transfer_transaction.js.map"]},"metadata":{},"sourceType":"script"}