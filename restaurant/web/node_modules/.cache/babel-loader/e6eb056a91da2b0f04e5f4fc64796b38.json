{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _3_vote_transaction_1 = require(\"./3_vote_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\");\n\nconst validateInputs = ({\n  votes = [],\n  unvotes = []\n}) => {\n  if (!Array.isArray(votes)) {\n    throw new Error('Please provide a valid votes value. Expected an array if present.');\n  }\n\n  if (!Array.isArray(unvotes)) {\n    throw new Error('Please provide a valid unvotes value. Expected an array if present.');\n  }\n\n  utils_1.validatePublicKeys([...votes, ...unvotes]);\n};\n\nexports.castVotes = inputs => {\n  validateInputs(inputs);\n  const {\n    passphrase,\n    secondPassphrase,\n    votes = [],\n    unvotes = []\n  } = inputs;\n  const plusPrependedVotes = utils_1.prependPlusToPublicKeys(votes);\n  const minusPrependedUnvotes = utils_1.prependMinusToPublicKeys(unvotes);\n  const allVotes = [...plusPrependedVotes, ...minusPrependedUnvotes];\n  const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), {\n    type: 3,\n    fee: constants_1.VOTE_FEE.toString(),\n    asset: {\n      votes: allVotes\n    }\n  });\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  const transactionWithSenderInfo = Object.assign({}, transaction, {\n    senderId: transaction.senderId,\n    senderPublicKey: transaction.senderPublicKey,\n    recipientId: transaction.senderId,\n    recipientPublicKey: transaction.senderPublicKey\n  });\n  const voteTransaction = new _3_vote_transaction_1.VoteTransaction(transactionWithSenderInfo);\n  voteTransaction.sign(passphrase, secondPassphrase);\n  return voteTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/3_cast_votes.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,qBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAoBA,MAAM,cAAc,GAAG,CAAC;AAAE,EAAA,KAAK,GAAG,EAAV;AAAc,EAAA,OAAO,GAAG;AAAxB,CAAD,KAAoD;AAC1E,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;AAC1B,UAAM,IAAI,KAAJ,CACL,mEADK,CAAN;AAGA;;AACD,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,OAAd,CAAL,EAA6B;AAC5B,UAAM,IAAI,KAAJ,CACL,qEADK,CAAN;AAGA;;AAED,EAAA,OAAA,CAAA,kBAAA,CAAmB,CAAC,GAAG,KAAJ,EAAW,GAAG,OAAd,CAAnB;AACA,CAbD;;AAea,OAAA,CAAA,SAAA,GAAa,MAAD,IAAqD;AAC7E,EAAA,cAAc,CAAC,MAAD,CAAd;AACA,QAAM;AAAE,IAAA,UAAF;AAAc,IAAA,gBAAd;AAAgC,IAAA,KAAK,GAAG,EAAxC;AAA4C,IAAA,OAAO,GAAG;AAAtD,MAA6D,MAAnE;AAEA,QAAM,kBAAkB,GAAG,OAAA,CAAA,uBAAA,CAAwB,KAAxB,CAA3B;AACA,QAAM,qBAAqB,GAAG,OAAA,CAAA,wBAAA,CAAyB,OAAzB,CAA9B;AACA,QAAM,QAAQ,GAA0B,CACvC,GAAG,kBADoC,EAEvC,GAAG,qBAFoC,CAAxC;AAKA,QAAM,WAAW,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACb,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CADa,EACgB;AAChC,IAAA,IAAI,EAAE,CAD0B;AAEhC,IAAA,GAAG,EAAE,WAAA,CAAA,QAAA,CAAS,QAAT,EAF2B;AAGhC,IAAA,KAAK,EAAE;AACN,MAAA,KAAK,EAAE;AADD;AAHyB,GADhB,CAAjB;;AASA,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,WAAP;AACA;;AAED,QAAM,yBAAyB,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC3B,WAD2B,EAChB;AAEd,IAAA,QAAQ,EAAE,WAAW,CAAC,QAFR;AAGd,IAAA,eAAe,EAAE,WAAW,CAAC,eAHf;AAId,IAAA,WAAW,EAAE,WAAW,CAAC,QAJX;AAKd,IAAA,kBAAkB,EAAE,WAAW,CAAC;AALlB,GADgB,CAA/B;AASA,QAAM,eAAe,GAAG,IAAI,qBAAA,CAAA,eAAJ,CAAoB,yBAApB,CAAxB;AACA,EAAA,eAAe,CAAC,IAAhB,CAAqB,UAArB,EAAiC,gBAAjC;AAEA,SAAO,eAAe,CAAC,MAAhB,EAAP;AACA,CArCY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _3_vote_transaction_1 = require(\"./3_vote_transaction\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nconst validateInputs = ({ votes = [], unvotes = [] }) => {\n    if (!Array.isArray(votes)) {\n        throw new Error('Please provide a valid votes value. Expected an array if present.');\n    }\n    if (!Array.isArray(unvotes)) {\n        throw new Error('Please provide a valid unvotes value. Expected an array if present.');\n    }\n    utils_1.validatePublicKeys([...votes, ...unvotes]);\n};\nexports.castVotes = (inputs) => {\n    validateInputs(inputs);\n    const { passphrase, secondPassphrase, votes = [], unvotes = [] } = inputs;\n    const plusPrependedVotes = utils_1.prependPlusToPublicKeys(votes);\n    const minusPrependedUnvotes = utils_1.prependMinusToPublicKeys(unvotes);\n    const allVotes = [\n        ...plusPrependedVotes,\n        ...minusPrependedUnvotes,\n    ];\n    const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 3, fee: constants_1.VOTE_FEE.toString(), asset: {\n            votes: allVotes,\n        } });\n    if (!passphrase) {\n        return transaction;\n    }\n    const transactionWithSenderInfo = Object.assign({}, transaction, { senderId: transaction.senderId, senderPublicKey: transaction.senderPublicKey, recipientId: transaction.senderId, recipientPublicKey: transaction.senderPublicKey });\n    const voteTransaction = new _3_vote_transaction_1.VoteTransaction(transactionWithSenderInfo);\n    voteTransaction.sign(passphrase, secondPassphrase);\n    return voteTransaction.toJSON();\n};\n//# sourceMappingURL=3_cast_votes.js.map"]},"metadata":{},"sourceType":"script"}