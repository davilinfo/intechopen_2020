{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nconst _11_vote_transaction_1 = require(\"./11_vote_transaction\");\n\nconst utils_1 = require(\"./utils\");\n\nconst validateInputs = ({\n  votes = [],\n  unvotes = [],\n  networkIdentifier\n}) => {\n  if (!Array.isArray(votes)) {\n    throw new Error('Please provide a valid votes value. Expected an array if present.');\n  }\n\n  if (!Array.isArray(unvotes)) {\n    throw new Error('Please provide a valid unvotes value. Expected an array if present.');\n  }\n\n  lisk_validator_1.validatePublicKeys([...votes, ...unvotes]);\n  lisk_validator_1.validateNetworkIdentifier(networkIdentifier);\n};\n\nexports.castVotes = inputs => {\n  validateInputs(inputs);\n  const {\n    networkIdentifier,\n    passphrase,\n    secondPassphrase,\n    votes = [],\n    unvotes = []\n  } = inputs;\n  const plusPrependedVotes = utils_1.prependPlusToPublicKeys(votes);\n  const minusPrependedUnvotes = utils_1.prependMinusToPublicKeys(unvotes);\n  const allVotes = [...plusPrependedVotes, ...minusPrependedUnvotes];\n  const transaction = { ...utils_1.createBaseTransaction(inputs),\n    type: 11,\n    asset: {\n      amount: '0',\n      votes: allVotes\n    }\n  };\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  const recipientId = lisk_cryptography_1.getAddressFromPassphrase(passphrase);\n  const transactionWithSenderInfo = { ...transaction,\n    senderPublicKey: transaction.senderPublicKey,\n    asset: { ...transaction.asset,\n      recipientId\n    },\n    networkIdentifier\n  };\n  const voteTransaction = new _11_vote_transaction_1.VoteTransaction(transactionWithSenderInfo);\n  voteTransaction.sign(passphrase, secondPassphrase);\n  return voteTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/cast_votes.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAKA,MAAA,sBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAqBA,MAAM,cAAc,GAAG,CAAC;AACvB,EAAA,KAAK,GAAG,EADe;AAEvB,EAAA,OAAO,GAAG,EAFa;AAGvB,EAAA;AAHuB,CAAD,KAIC;AACvB,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;AAC1B,UAAM,IAAI,KAAJ,CACL,mEADK,CAAN;AAGA;;AACD,MAAI,CAAC,KAAK,CAAC,OAAN,CAAc,OAAd,CAAL,EAA6B;AAC5B,UAAM,IAAI,KAAJ,CACL,qEADK,CAAN;AAGA;;AAED,EAAA,gBAAA,CAAA,kBAAA,CAAmB,CAAC,GAAG,KAAJ,EAAW,GAAG,OAAd,CAAnB;AAEA,EAAA,gBAAA,CAAA,yBAAA,CAA0B,iBAA1B;AACA,CAnBD;;AAqBa,OAAA,CAAA,SAAA,GAAa,MAAD,IAAqD;AAC7E,EAAA,cAAc,CAAC,MAAD,CAAd;AACA,QAAM;AACL,IAAA,iBADK;AAEL,IAAA,UAFK;AAGL,IAAA,gBAHK;AAIL,IAAA,KAAK,GAAG,EAJH;AAKL,IAAA,OAAO,GAAG;AALL,MAMF,MANJ;AAQA,QAAM,kBAAkB,GAAG,OAAA,CAAA,uBAAA,CAAwB,KAAxB,CAA3B;AACA,QAAM,qBAAqB,GAAG,OAAA,CAAA,wBAAA,CAAyB,OAAzB,CAA9B;AACA,QAAM,QAAQ,GAA0B,CACvC,GAAG,kBADoC,EAEvC,GAAG,qBAFoC,CAAxC;AAKA,QAAM,WAAW,GAAG,EACnB,GAAG,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CADgB;AAEnB,IAAA,IAAI,EAAE,EAFa;AAGnB,IAAA,KAAK,EAAE;AAEN,MAAA,MAAM,EAAE,GAFF;AAGN,MAAA,KAAK,EAAE;AAHD;AAHY,GAApB;;AAUA,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,WAAP;AACA;;AAED,QAAM,WAAW,GAAG,mBAAA,CAAA,wBAAA,CAAyB,UAAzB,CAApB;AACA,QAAM,yBAAyB,GAAG,EACjC,GAAG,WAD8B;AAGjC,IAAA,eAAe,EAAE,WAAW,CAAC,eAHI;AAIjC,IAAA,KAAK,EAAE,EACN,GAAG,WAAW,CAAC,KADT;AAEN,MAAA;AAFM,KAJ0B;AAQjC,IAAA;AARiC,GAAlC;AAWA,QAAM,eAAe,GAAG,IAAI,sBAAA,CAAA,eAAJ,CAAoB,yBAApB,CAAxB;AACA,EAAA,eAAe,CAAC,IAAhB,CAAqB,UAArB,EAAiC,gBAAjC;AAEA,SAAO,eAAe,CAAC,MAAhB,EAAP;AACA,CA/CY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst _11_vote_transaction_1 = require(\"./11_vote_transaction\");\nconst utils_1 = require(\"./utils\");\nconst validateInputs = ({ votes = [], unvotes = [], networkIdentifier, }) => {\n    if (!Array.isArray(votes)) {\n        throw new Error('Please provide a valid votes value. Expected an array if present.');\n    }\n    if (!Array.isArray(unvotes)) {\n        throw new Error('Please provide a valid unvotes value. Expected an array if present.');\n    }\n    lisk_validator_1.validatePublicKeys([...votes, ...unvotes]);\n    lisk_validator_1.validateNetworkIdentifier(networkIdentifier);\n};\nexports.castVotes = (inputs) => {\n    validateInputs(inputs);\n    const { networkIdentifier, passphrase, secondPassphrase, votes = [], unvotes = [], } = inputs;\n    const plusPrependedVotes = utils_1.prependPlusToPublicKeys(votes);\n    const minusPrependedUnvotes = utils_1.prependMinusToPublicKeys(unvotes);\n    const allVotes = [\n        ...plusPrependedVotes,\n        ...minusPrependedUnvotes,\n    ];\n    const transaction = {\n        ...utils_1.createBaseTransaction(inputs),\n        type: 11,\n        asset: {\n            amount: '0',\n            votes: allVotes,\n        },\n    };\n    if (!passphrase) {\n        return transaction;\n    }\n    const recipientId = lisk_cryptography_1.getAddressFromPassphrase(passphrase);\n    const transactionWithSenderInfo = {\n        ...transaction,\n        senderPublicKey: transaction.senderPublicKey,\n        asset: {\n            ...transaction.asset,\n            recipientId,\n        },\n        networkIdentifier,\n    };\n    const voteTransaction = new _11_vote_transaction_1.VoteTransaction(transactionWithSenderInfo);\n    voteTransaction.sign(passphrase, secondPassphrase);\n    return voteTransaction.toJSON();\n};\n//# sourceMappingURL=cast_votes.js.map"]},"metadata":{},"sourceType":"script"}