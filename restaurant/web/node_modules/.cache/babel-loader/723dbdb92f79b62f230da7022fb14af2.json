{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BigNum = require(\"@liskhq/bignum\");\n\nconst constants_1 = require(\"../constants\");\n\nconst validation_1 = require(\"./validation\");\n\nconst BASE_10 = 10;\nconst LISK_MAX_DECIMAL_POINTS = 8;\n\nconst getDecimalPlaces = amount => (amount.split('.')[1] || '').length;\n\nexports.convertBeddowsToLSK = beddowsAmount => {\n  if (typeof beddowsAmount !== 'string') {\n    throw new Error('Cannot convert non-string amount');\n  }\n\n  if (getDecimalPlaces(beddowsAmount)) {\n    throw new Error('Beddows amount should not have decimal points');\n  }\n\n  const beddowsAmountBigNum = new BigNum(beddowsAmount);\n\n  if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {\n    throw new Error('Beddows amount out of range');\n  }\n\n  const lskAmountBigNum = beddowsAmountBigNum.div(constants_1.FIXED_POINT);\n  return lskAmountBigNum.toString(BASE_10);\n};\n\nexports.convertLSKToBeddows = lskAmount => {\n  if (typeof lskAmount !== 'string') {\n    throw new Error('Cannot convert non-string amount');\n  }\n\n  if (getDecimalPlaces(lskAmount) > LISK_MAX_DECIMAL_POINTS) {\n    throw new Error('LSK amount has too many decimal points');\n  }\n\n  const lskAmountBigNum = new BigNum(lskAmount);\n  const beddowsAmountBigNum = lskAmountBigNum.mul(constants_1.FIXED_POINT);\n\n  if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {\n    throw new Error('LSK amount out of range');\n  }\n\n  return beddowsAmountBigNum.toString();\n};\n\nexports.prependPlusToPublicKeys = publicKeys => publicKeys.map(publicKey => `+${publicKey}`);\n\nexports.prependMinusToPublicKeys = publicKeys => publicKeys.map(publicKey => `-${publicKey}`);","map":{"version":3,"sources":["../../src/utils/format.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,MAAM,OAAO,GAAG,EAAhB;AACA,MAAM,uBAAuB,GAAG,CAAhC;;AACA,MAAM,gBAAgB,GAAI,MAAD,IACxB,CAAC,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB,CAAlB,KAAwB,EAAzB,EAA6B,MAD9B;;AAGa,OAAA,CAAA,mBAAA,GAAuB,aAAD,IAAmC;AACrE,MAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AACtC,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACA;;AACD,MAAI,gBAAgB,CAAC,aAAD,CAApB,EAAqC;AACpC,UAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACA;;AACD,QAAM,mBAAmB,GAAG,IAAI,MAAJ,CAAW,aAAX,CAA5B;;AACA,MAAI,YAAA,CAAA,iCAAA,CAAkC,mBAAlC,CAAJ,EAA4D;AAC3D,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACA;;AACD,QAAM,eAAe,GAAG,mBAAmB,CAAC,GAApB,CAAwB,WAAA,CAAA,WAAxB,CAAxB;AAEA,SAAO,eAAe,CAAC,QAAhB,CAAyB,OAAzB,CAAP;AACA,CAdY;;AAgBA,OAAA,CAAA,mBAAA,GAAuB,SAAD,IAA+B;AACjE,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AAClC,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACA;;AACD,MAAI,gBAAgB,CAAC,SAAD,CAAhB,GAA8B,uBAAlC,EAA2D;AAC1D,UAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACA;;AACD,QAAM,eAAe,GAAG,IAAI,MAAJ,CAAW,SAAX,CAAxB;AACA,QAAM,mBAAmB,GAAG,eAAe,CAAC,GAAhB,CAAoB,WAAA,CAAA,WAApB,CAA5B;;AACA,MAAI,YAAA,CAAA,iCAAA,CAAkC,mBAAlC,CAAJ,EAA4D;AAC3D,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACA;;AAED,SAAO,mBAAmB,CAAC,QAApB,EAAP;AACA,CAdY;;AAgBA,OAAA,CAAA,uBAAA,GACZ,UADsC,IAEX,UAAU,CAAC,GAAX,CAAe,SAAS,IAAI,IAAI,SAAS,EAAzC,CAFf;;AAIA,OAAA,CAAA,wBAAA,GACZ,UADuC,IAEZ,UAAU,CAAC,GAAX,CAAe,SAAS,IAAI,IAAI,SAAS,EAAzC,CAFf","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst BigNum = require(\"@liskhq/bignum\");\r\nconst constants_1 = require(\"../constants\");\r\nconst validation_1 = require(\"./validation\");\r\nconst BASE_10 = 10;\r\nconst LISK_MAX_DECIMAL_POINTS = 8;\r\nconst getDecimalPlaces = (amount) => (amount.split('.')[1] || '').length;\r\nexports.convertBeddowsToLSK = (beddowsAmount) => {\r\n    if (typeof beddowsAmount !== 'string') {\r\n        throw new Error('Cannot convert non-string amount');\r\n    }\r\n    if (getDecimalPlaces(beddowsAmount)) {\r\n        throw new Error('Beddows amount should not have decimal points');\r\n    }\r\n    const beddowsAmountBigNum = new BigNum(beddowsAmount);\r\n    if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {\r\n        throw new Error('Beddows amount out of range');\r\n    }\r\n    const lskAmountBigNum = beddowsAmountBigNum.div(constants_1.FIXED_POINT);\r\n    return lskAmountBigNum.toString(BASE_10);\r\n};\r\nexports.convertLSKToBeddows = (lskAmount) => {\r\n    if (typeof lskAmount !== 'string') {\r\n        throw new Error('Cannot convert non-string amount');\r\n    }\r\n    if (getDecimalPlaces(lskAmount) > LISK_MAX_DECIMAL_POINTS) {\r\n        throw new Error('LSK amount has too many decimal points');\r\n    }\r\n    const lskAmountBigNum = new BigNum(lskAmount);\r\n    const beddowsAmountBigNum = lskAmountBigNum.mul(constants_1.FIXED_POINT);\r\n    if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {\r\n        throw new Error('LSK amount out of range');\r\n    }\r\n    return beddowsAmountBigNum.toString();\r\n};\r\nexports.prependPlusToPublicKeys = (publicKeys) => publicKeys.map(publicKey => `+${publicKey}`);\r\nexports.prependMinusToPublicKeys = (publicKeys) => publicKeys.map(publicKey => `-${publicKey}`);\r\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"script"}