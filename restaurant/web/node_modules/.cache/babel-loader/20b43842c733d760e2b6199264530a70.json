{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar _1_second_signature_transaction_1 = require(\"./1_second_signature_transaction\");\n\nvar constants_1 = require(\"./constants\");\n\nvar utils_1 = require(\"./utils\");\n\nvar validateInputs = function validateInputs(_ref) {\n  var secondPassphrase = _ref.secondPassphrase;\n\n  if (typeof secondPassphrase !== 'string') {\n    throw new Error('Please provide a secondPassphrase. Expected string.');\n  }\n};\n\nexports.registerSecondPassphrase = function (inputs) {\n  validateInputs(inputs);\n  var passphrase = inputs.passphrase,\n      secondPassphrase = inputs.secondPassphrase;\n\n  var _lisk_cryptography_1$ = lisk_cryptography_1.getKeys(secondPassphrase),\n      publicKey = _lisk_cryptography_1$.publicKey;\n\n  var transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), {\n    type: 1,\n    fee: constants_1.SIGNATURE_FEE.toString(),\n    asset: {\n      signature: {\n        publicKey: publicKey\n      }\n    }\n  });\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  var secondSignatureTransaction = new _1_second_signature_transaction_1.SecondSignatureTransaction(transaction);\n  secondSignatureTransaction.sign(passphrase);\n  return secondSignatureTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/1_register_second_passphrase.ts"],"names":[],"mappings":";;;;;;AAcA,IAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,iCAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAQA,IAAM,cAAc,GAAG,SAAjB,cAAiB,OAIZ;AAAA,MAHV,gBAGU,QAHV,gBAGU;;AACV,MAAI,OAAO,gBAAP,KAA4B,QAAhC,EAA0C;AACzC,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACA;AACD,CARD;;AAUa,OAAA,CAAA,wBAAA,GAA2B,UACvC,MADuC,EAEV;AAC7B,EAAA,cAAc,CAAC,MAAD,CAAd;AAD6B,MAErB,UAFqB,GAEY,MAFZ,CAErB,UAFqB;AAAA,MAET,gBAFS,GAEY,MAFZ,CAET,gBAFS;;AAAA,8BAGP,mBAAA,CAAA,OAAA,CAAQ,gBAAR,CAHO;AAAA,MAGrB,SAHqB,yBAGrB,SAHqB;;AAK7B,MAAM,WAAW,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACb,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CADa,EACgB;AAChC,IAAA,IAAI,EAAE,CAD0B;AAEhC,IAAA,GAAG,EAAE,WAAA,CAAA,aAAA,CAAc,QAAd,EAF2B;AAGhC,IAAA,KAAK,EAAE;AAAE,MAAA,SAAS,EAAE;AAAE,QAAA,SAAS,EAAT;AAAF;AAAb;AAHyB,GADhB,CAAjB;;AAOA,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,WAAP;AACA;;AAED,MAAM,0BAA0B,GAAG,IAAI,iCAAA,CAAA,0BAAJ,CAClC,WADkC,CAAnC;AAGA,EAAA,0BAA0B,CAAC,IAA3B,CAAgC,UAAhC;AAEA,SAAO,0BAA0B,CAAC,MAA3B,EAAP;AACA,CAxBY","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\r\nconst _1_second_signature_transaction_1 = require(\"./1_second_signature_transaction\");\r\nconst constants_1 = require(\"./constants\");\r\nconst utils_1 = require(\"./utils\");\r\nconst validateInputs = ({ secondPassphrase, }) => {\r\n    if (typeof secondPassphrase !== 'string') {\r\n        throw new Error('Please provide a secondPassphrase. Expected string.');\r\n    }\r\n};\r\nexports.registerSecondPassphrase = (inputs) => {\r\n    validateInputs(inputs);\r\n    const { passphrase, secondPassphrase } = inputs;\r\n    const { publicKey } = lisk_cryptography_1.getKeys(secondPassphrase);\r\n    const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 1, fee: constants_1.SIGNATURE_FEE.toString(), asset: { signature: { publicKey } } });\r\n    if (!passphrase) {\r\n        return transaction;\r\n    }\r\n    const secondSignatureTransaction = new _1_second_signature_transaction_1.SecondSignatureTransaction(transaction);\r\n    secondSignatureTransaction.sign(passphrase);\r\n    return secondSignatureTransaction.toJSON();\r\n};\r\n//# sourceMappingURL=1_register_second_passphrase.js.map"]},"metadata":{},"sourceType":"script"}