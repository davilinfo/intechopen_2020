{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nconst _12_multisignature_transaction_1 = require(\"./12_multisignature_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\");\n\nconst validateInputs = ({\n  keysgroup,\n  lifetime,\n  minimum,\n  networkIdentifier\n}) => {\n  if (!lisk_validator_1.isValidInteger(lifetime) || lifetime < constants_1.MULTISIGNATURE_MIN_LIFETIME || lifetime > constants_1.MULTISIGNATURE_MAX_LIFETIME) {\n    throw new Error(`Please provide a valid lifetime value. Expected integer between ${constants_1.MULTISIGNATURE_MIN_LIFETIME} and ${constants_1.MULTISIGNATURE_MAX_LIFETIME}.`);\n  }\n\n  if (!lisk_validator_1.isValidInteger(minimum) || minimum < constants_1.MULTISIGNATURE_MIN_KEYSGROUP || minimum > constants_1.MULTISIGNATURE_MAX_KEYSGROUP) {\n    throw new Error(`Please provide a valid minimum value. Expected integer between ${constants_1.MULTISIGNATURE_MIN_KEYSGROUP} and ${constants_1.MULTISIGNATURE_MAX_KEYSGROUP}.`);\n  }\n\n  if (keysgroup.length < minimum) {\n    throw new Error('Minimum number of signatures is larger than the number of keys in the keysgroup.');\n  }\n\n  lisk_validator_1.validateKeysgroup(keysgroup, constants_1.MULTISIGNATURE_MIN_KEYSGROUP, constants_1.MULTISIGNATURE_MAX_KEYSGROUP);\n  lisk_validator_1.validateNetworkIdentifier(networkIdentifier);\n};\n\nexports.registerMultisignature = inputs => {\n  validateInputs(inputs);\n  const {\n    keysgroup,\n    lifetime,\n    minimum,\n    passphrase,\n    secondPassphrase,\n    networkIdentifier\n  } = inputs;\n  const plusPrependedKeysgroup = utils_1.prependPlusToPublicKeys(keysgroup);\n  const keygroupFees = plusPrependedKeysgroup.length + 1;\n  const transaction = { ...utils_1.createBaseTransaction(inputs),\n    type: 12,\n    fee: (constants_1.MULTISIGNATURE_FEE * keygroupFees).toString(),\n    asset: {\n      min: minimum,\n      lifetime,\n      keysgroup: plusPrependedKeysgroup\n    },\n    networkIdentifier\n  };\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  const multisignatureTransaction = new _12_multisignature_transaction_1.MultisignatureTransaction(transaction);\n  multisignatureTransaction.sign(passphrase, secondPassphrase);\n  return multisignatureTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/register_multisignature_account.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAMA,MAAA,gCAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAQA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAYA,MAAM,cAAc,GAAG,CAAC;AACvB,EAAA,SADuB;AAEvB,EAAA,QAFuB;AAGvB,EAAA,OAHuB;AAIvB,EAAA;AAJuB,CAAD,KAKkB;AACxC,MACC,CAAC,gBAAA,CAAA,cAAA,CAAe,QAAf,CAAD,IACA,QAAQ,GAAG,WAAA,CAAA,2BADX,IAEA,QAAQ,GAAG,WAAA,CAAA,2BAHZ,EAIE;AACD,UAAM,IAAI,KAAJ,CACL,mEAAmE,WAAA,CAAA,2BAA2B,QAAQ,WAAA,CAAA,2BAA2B,GAD5H,CAAN;AAGA;;AAED,MACC,CAAC,gBAAA,CAAA,cAAA,CAAe,OAAf,CAAD,IACA,OAAO,GAAG,WAAA,CAAA,4BADV,IAEA,OAAO,GAAG,WAAA,CAAA,4BAHX,EAIE;AACD,UAAM,IAAI,KAAJ,CACL,kEAAkE,WAAA,CAAA,4BAA4B,QAAQ,WAAA,CAAA,4BAA4B,GAD7H,CAAN;AAGA;;AAED,MAAI,SAAS,CAAC,MAAV,GAAmB,OAAvB,EAAgC;AAC/B,UAAM,IAAI,KAAJ,CACL,kFADK,CAAN;AAGA;;AAED,EAAA,gBAAA,CAAA,iBAAA,CACC,SADD,EAEC,WAAA,CAAA,4BAFD,EAGC,WAAA,CAAA,4BAHD;AAMA,EAAA,gBAAA,CAAA,yBAAA,CAA0B,iBAA1B;AACA,CAvCD;;AAyCa,OAAA,CAAA,sBAAA,GACZ,MADqC,IAER;AAC7B,EAAA,cAAc,CAAC,MAAD,CAAd;AACA,QAAM;AACL,IAAA,SADK;AAEL,IAAA,QAFK;AAGL,IAAA,OAHK;AAIL,IAAA,UAJK;AAKL,IAAA,gBALK;AAML,IAAA;AANK,MAOF,MAPJ;AASA,QAAM,sBAAsB,GAAG,OAAA,CAAA,uBAAA,CAAwB,SAAxB,CAA/B;AACA,QAAM,YAAY,GAAG,sBAAsB,CAAC,MAAvB,GAAgC,CAArD;AAEA,QAAM,WAAW,GAAG,EACnB,GAAG,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CADgB;AAEnB,IAAA,IAAI,EAAE,EAFa;AAGnB,IAAA,GAAG,EAAE,CAAC,WAAA,CAAA,kBAAA,GAAqB,YAAtB,EAAoC,QAApC,EAHc;AAInB,IAAA,KAAK,EAAE;AACN,MAAA,GAAG,EAAE,OADC;AAEN,MAAA,QAFM;AAGN,MAAA,SAAS,EAAE;AAHL,KAJY;AASnB,IAAA;AATmB,GAApB;;AAYA,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,WAAP;AACA;;AAED,QAAM,yBAAyB,GAAG,IAAI,gCAAA,CAAA,yBAAJ,CAA8B,WAA9B,CAAlC;AACA,EAAA,yBAAyB,CAAC,IAA1B,CAA+B,UAA/B,EAA2C,gBAA3C;AAEA,SAAO,yBAAyB,CAAC,MAA1B,EAAP;AACA,CApCY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst _12_multisignature_transaction_1 = require(\"./12_multisignature_transaction\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nconst validateInputs = ({ keysgroup, lifetime, minimum, networkIdentifier, }) => {\n    if (!lisk_validator_1.isValidInteger(lifetime) ||\n        lifetime < constants_1.MULTISIGNATURE_MIN_LIFETIME ||\n        lifetime > constants_1.MULTISIGNATURE_MAX_LIFETIME) {\n        throw new Error(`Please provide a valid lifetime value. Expected integer between ${constants_1.MULTISIGNATURE_MIN_LIFETIME} and ${constants_1.MULTISIGNATURE_MAX_LIFETIME}.`);\n    }\n    if (!lisk_validator_1.isValidInteger(minimum) ||\n        minimum < constants_1.MULTISIGNATURE_MIN_KEYSGROUP ||\n        minimum > constants_1.MULTISIGNATURE_MAX_KEYSGROUP) {\n        throw new Error(`Please provide a valid minimum value. Expected integer between ${constants_1.MULTISIGNATURE_MIN_KEYSGROUP} and ${constants_1.MULTISIGNATURE_MAX_KEYSGROUP}.`);\n    }\n    if (keysgroup.length < minimum) {\n        throw new Error('Minimum number of signatures is larger than the number of keys in the keysgroup.');\n    }\n    lisk_validator_1.validateKeysgroup(keysgroup, constants_1.MULTISIGNATURE_MIN_KEYSGROUP, constants_1.MULTISIGNATURE_MAX_KEYSGROUP);\n    lisk_validator_1.validateNetworkIdentifier(networkIdentifier);\n};\nexports.registerMultisignature = (inputs) => {\n    validateInputs(inputs);\n    const { keysgroup, lifetime, minimum, passphrase, secondPassphrase, networkIdentifier, } = inputs;\n    const plusPrependedKeysgroup = utils_1.prependPlusToPublicKeys(keysgroup);\n    const keygroupFees = plusPrependedKeysgroup.length + 1;\n    const transaction = {\n        ...utils_1.createBaseTransaction(inputs),\n        type: 12,\n        fee: (constants_1.MULTISIGNATURE_FEE * keygroupFees).toString(),\n        asset: {\n            min: minimum,\n            lifetime,\n            keysgroup: plusPrependedKeysgroup,\n        },\n        networkIdentifier,\n    };\n    if (!passphrase) {\n        return transaction;\n    }\n    const multisignatureTransaction = new _12_multisignature_transaction_1.MultisignatureTransaction(transaction);\n    multisignatureTransaction.sign(passphrase, secondPassphrase);\n    return multisignatureTransaction.toJSON();\n};\n//# sourceMappingURL=register_multisignature_account.js.map"]},"metadata":{},"sourceType":"script"}