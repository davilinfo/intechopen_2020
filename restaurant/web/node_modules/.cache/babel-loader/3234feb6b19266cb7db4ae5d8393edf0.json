{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\src\\\\components\\\\FoodOrderPayment.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport api from '../services/api';\nimport FormPayment from './FormPayment';\nimport '../styles.css';\n\nconst liskCryptography = require('@liskhq/lisk-cryptography');\n\nconst liskTransactions = require('@liskhq/lisk-transactions');\n\nconst FoodRequest = require('liskrestaurant_transactions');\n\nfunction FoodOrderPayment(props) {\n  var [order, setOrder] = useState([]);\n\n  async function getPublicKeyFromPassphrase(passphrase) {\n    return liskCryptography.getAddressAndPublicKeyFromPassphrase(passphrase).publicKey;\n  }\n\n  async function handleSubmit(data) {\n    var food = {};\n    var orderstring = props.orderstring;\n\n    if (orderstring !== null && orderstring !== undefined) {\n      orderstring = orderstring.split(\"&\");\n      food.recipientAddress = orderstring[0].split('=')[1];\n      food.amount = orderstring[1].split('=')[1];\n      food.name = orderstring[2].split('=')[1];\n      food.foodtype = orderstring[3].split('=')[1];\n      food.timestamp = orderstring[4].split('=')[1];\n      food.username = orderstring[5].split('=')[1];\n      food.phone = orderstring[6].split('=')[1];\n      food.deliveryaddress = orderstring[7].split('=')[1];\n    }\n\n    let txFood = {\n      type: 0,\n      amount: food.amount,\n      recipientId: food.address,\n      fee: liskTransactions.constants.TRANSFER_FEE.toString(),\n      asset: {},\n      timestamp: food.timestamp,\n      senderPublicKey: 'c094ebee7ec0c50ebee32918655e089f6e1a604b83bcaa760293c61e0f18ab6f' //getPublicKeyFromPassphrase(data)\n\n    };\n    let preparedTxn = liskTransactions.utils.prepareTransaction(txFood, data);\n    let {\n      signature,\n      signSignature,\n      ...transactionToHash\n    } = preparedTxn;\n    let txnHash = liskCryptography.hash(liskTransactions.utils.getTransactionBytes(transactionToHash));\n    liskCryptography.signData(txnHash, data);\n    /*var txFood = new FoodRequest({\r\n        asset: {\r\n            name: food.name,\r\n            description: food.name,\r\n            username: food.username,\r\n            phone: food.phone,\r\n            deliveryaddress: food.deliveryaddress,\r\n            foodType: food.foodtype\r\n        },\r\n        type:20,\r\n        amount: food.amount,\r\n        senderPublicKey: getPublicKeyFromPassphrase(data),\r\n        recipientId: food.address,\r\n        timestamp: food.timestamp\r\n    });       */\n\n    order = await api.post('/payment', JSON.stringify({\n      transaction: preparedTxn,\n      networkid: \"identifier\"\n    }));\n    setOrder(order);\n    /*const transaction_result = (\r\n        <div className=\"recipes_topic\">                    \r\n            Testing             \r\n            <div className=\"clear\"></div>\r\n        </div>\r\n    )*/\n\n    const transaction_result = /*#__PURE__*/React.createElement(\"div\", {\n      className: \"recipes_topic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, \"Transaction result: \", order.data.status, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }), \"Transaction id: \", order.data.response.transaction.id, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }), \"Paid Amount: LSK \", order.data.response.transaction.amount / 100000000, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }), \"Payer LSK address: \", order.data.response.transaction.senderId, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }), \"Restaurant LSK address: \", order.data.response.transaction.recipientId, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }), \"Broadcast info: \", order.data.response.broadcastInfo.data.message, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"clear\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }));\n    ReactDOM.render(transaction_result, document.getElementById('content'));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormPayment, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default FoodOrderPayment;","map":{"version":3,"sources":["C:/Users/davin.DESKTOP-83VQBDE/Documents/restaurant_sidechain/web/src/components/FoodOrderPayment.js"],"names":["React","useState","useEffect","ReactDOM","api","FormPayment","liskCryptography","require","liskTransactions","FoodRequest","FoodOrderPayment","props","order","setOrder","getPublicKeyFromPassphrase","passphrase","getAddressAndPublicKeyFromPassphrase","publicKey","handleSubmit","data","food","orderstring","undefined","split","recipientAddress","amount","name","foodtype","timestamp","username","phone","deliveryaddress","txFood","type","recipientId","address","fee","constants","TRANSFER_FEE","toString","asset","senderPublicKey","preparedTxn","utils","prepareTransaction","signature","signSignature","transactionToHash","txnHash","hash","getTransactionBytes","signData","post","JSON","stringify","transaction","networkid","transaction_result","status","response","id","senderId","broadcastInfo","message","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport api from '../services/api';\r\nimport FormPayment from './FormPayment';\r\nimport '../styles.css';\r\nconst liskCryptography = require('@liskhq/lisk-cryptography');\r\nconst liskTransactions = require('@liskhq/lisk-transactions');\r\nconst FoodRequest = require('liskrestaurant_transactions');\r\n\r\nfunction FoodOrderPayment(props){                   \r\n    \r\n    var [order, setOrder] = useState([]);                    \r\n\r\n    async function  getPublicKeyFromPassphrase(passphrase) {\r\n        return liskCryptography.getAddressAndPublicKeyFromPassphrase(passphrase).publicKey;\r\n    }\r\n\r\n    async function handleSubmit(data){      \r\n\r\n        var food = {};\r\n        var orderstring = props.orderstring;\r\n        if (orderstring !== null && orderstring !== undefined){    \r\n            orderstring = orderstring.split(\"&\");\r\n                \r\n            food.recipientAddress = orderstring[0].split('=')[1];\r\n            food.amount = orderstring[1].split('=')[1];\r\n            food.name = orderstring[2].split('=')[1];\r\n            food.foodtype = orderstring[3].split('=')[1];\r\n            food.timestamp = orderstring[4].split('=')[1];\r\n            food.username = orderstring[5].split('=')[1];\r\n            food.phone = orderstring[6].split('=')[1];\r\n            food.deliveryaddress = orderstring[7].split('=')[1];\r\n        }                        \r\n\r\n        let txFood = {\r\n            type: 0,\r\n            amount: food.amount,\r\n            recipientId: food.address,\r\n            fee: liskTransactions.constants.TRANSFER_FEE.toString(),\r\n            asset: {},\r\n            timestamp: food.timestamp,\r\n            senderPublicKey: 'c094ebee7ec0c50ebee32918655e089f6e1a604b83bcaa760293c61e0f18ab6f'//getPublicKeyFromPassphrase(data)\r\n          };\r\n\r\n          let preparedTxn = liskTransactions.utils.prepareTransaction(txFood, data);\r\n          let {signature, signSignature, ...transactionToHash} = preparedTxn;\r\n          let txnHash = liskCryptography.hash(liskTransactions.utils.getTransactionBytes(transactionToHash));\r\n          liskCryptography.signData(txnHash, data);\r\n\r\n        /*var txFood = new FoodRequest({\r\n            asset: {\r\n                name: food.name,\r\n                description: food.name,\r\n                username: food.username,\r\n                phone: food.phone,\r\n                deliveryaddress: food.deliveryaddress,\r\n                foodType: food.foodtype\r\n            },\r\n            type:20,\r\n            amount: food.amount,\r\n            senderPublicKey: getPublicKeyFromPassphrase(data),\r\n            recipientId: food.address,\r\n            timestamp: food.timestamp\r\n        });       */                                                         \r\n        \r\n        order = await api.post('/payment', JSON.stringify({ transaction: preparedTxn, networkid: \"identifier\"}) );   \r\n        setOrder(order);    \r\n        \r\n        /*const transaction_result = (\r\n            <div className=\"recipes_topic\">                    \r\n                Testing             \r\n                <div className=\"clear\"></div>\r\n            </div>\r\n        )*/\r\n\r\n        const transaction_result = (\r\n            <div className=\"recipes_topic\">                    \r\n                Transaction result: {order.data.status}\r\n                <br />\r\n                Transaction id: {order.data.response.transaction.id}\r\n                <br/>\r\n                Paid Amount: LSK {order.data.response.transaction.amount/100000000}\r\n                <br/>\r\n                Payer LSK address: {order.data.response.transaction.senderId}\r\n                <br/>\r\n                Restaurant LSK address: {order.data.response.transaction.recipientId}\r\n                <br/>\r\n                Broadcast info: {order.data.response.broadcastInfo.data.message}                \r\n                <div className=\"clear\"></div>\r\n            </div>\r\n        );\r\n\r\n        ReactDOM.render(transaction_result, document.getElementById('content'));        \r\n    }        \r\n\r\n    return (\r\n        <div id=\"app\">\r\n            <div id=\"content\" align=\"center\">                \r\n                <FormPayment onSubmit={handleSubmit}></FormPayment>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FoodOrderPayment;"]},"metadata":{},"sourceType":"module"}