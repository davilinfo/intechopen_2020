{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nconst _1_second_signature_transaction_1 = require(\"./1_second_signature_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\");\n\nconst validateInputs = ({\n  secondPassphrase\n}) => {\n  if (typeof secondPassphrase !== 'string') {\n    throw new Error('Please provide a secondPassphrase. Expected string.');\n  }\n};\n\nexports.registerSecondPassphrase = inputs => {\n  validateInputs(inputs);\n  const {\n    passphrase,\n    secondPassphrase\n  } = inputs;\n  const {\n    publicKey\n  } = lisk_cryptography_1.getKeys(secondPassphrase);\n  const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), {\n    type: 1,\n    fee: constants_1.SIGNATURE_FEE.toString(),\n    asset: {\n      signature: {\n        publicKey\n      }\n    }\n  });\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  const secondSignatureTransaction = new _1_second_signature_transaction_1.SecondSignatureTransaction(transaction);\n  secondSignatureTransaction.sign(passphrase);\n  return secondSignatureTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/1_register_second_passphrase.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,iCAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAQA,MAAM,cAAc,GAAG,CAAC;AACvB,EAAA;AADuB,CAAD,KAIZ;AACV,MAAI,OAAO,gBAAP,KAA4B,QAAhC,EAA0C;AACzC,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACA;AACD,CARD;;AAUa,OAAA,CAAA,wBAAA,GACZ,MADuC,IAEV;AAC7B,EAAA,cAAc,CAAC,MAAD,CAAd;AACA,QAAM;AAAE,IAAA,UAAF;AAAc,IAAA;AAAd,MAAmC,MAAzC;AACA,QAAM;AAAE,IAAA;AAAF,MAAgB,mBAAA,CAAA,OAAA,CAAQ,gBAAR,CAAtB;AAEA,QAAM,WAAW,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACb,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CADa,EACgB;AAChC,IAAA,IAAI,EAAE,CAD0B;AAEhC,IAAA,GAAG,EAAE,WAAA,CAAA,aAAA,CAAc,QAAd,EAF2B;AAGhC,IAAA,KAAK,EAAE;AAAE,MAAA,SAAS,EAAE;AAAE,QAAA;AAAF;AAAb;AAHyB,GADhB,CAAjB;;AAOA,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,WAAP;AACA;;AAED,QAAM,0BAA0B,GAAG,IAAI,iCAAA,CAAA,0BAAJ,CAClC,WADkC,CAAnC;AAGA,EAAA,0BAA0B,CAAC,IAA3B,CAAgC,UAAhC;AAEA,SAAO,0BAA0B,CAAC,MAA3B,EAAP;AACA,CAxBY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst _1_second_signature_transaction_1 = require(\"./1_second_signature_transaction\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nconst validateInputs = ({ secondPassphrase, }) => {\n    if (typeof secondPassphrase !== 'string') {\n        throw new Error('Please provide a secondPassphrase. Expected string.');\n    }\n};\nexports.registerSecondPassphrase = (inputs) => {\n    validateInputs(inputs);\n    const { passphrase, secondPassphrase } = inputs;\n    const { publicKey } = lisk_cryptography_1.getKeys(secondPassphrase);\n    const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 1, fee: constants_1.SIGNATURE_FEE.toString(), asset: { signature: { publicKey } } });\n    if (!passphrase) {\n        return transaction;\n    }\n    const secondSignatureTransaction = new _1_second_signature_transaction_1.SecondSignatureTransaction(transaction);\n    secondSignatureTransaction.sign(passphrase);\n    return secondSignatureTransaction.toJSON();\n};\n//# sourceMappingURL=1_register_second_passphrase.js.map"]},"metadata":{},"sourceType":"script"}