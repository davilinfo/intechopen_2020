{"ast":null,"code":"const {\n  BaseTransaction,\n  TransactionError,\n  utils\n} = require('@liskhq/lisk-transactions');\n\nclass FoodTransaction extends BaseTransaction {\n  get sidechainAccountId() {\n    return \"6181773985994883123L\";\n  }\n\n  get sidechainFee() {\n    return '50000000';\n  }\n\n  static get TYPE() {\n    return 20;\n  }\n\n  static get FEE() {\n    return `10000000`;\n  }\n\n  /* Prepare function stores both sender and recipient account in the cache so it is possible to\r\n     modify the accounts during the `applyAsset` and `undoAsset` steps. */\n  async prepare(store) {\n    await store.account.cache([{\n      address: this.recipientId\n    }, {\n      address: this.senderId\n    }, {\n      address: this.sidechainAccountId\n    }]);\n  }\n\n  validateAsset() {\n    const errors = [];\n\n    if (!utils.validateAddress(this.senderId)) {\n      errors.push(new TransactionError('Invalid client \"Lisk address\" defined on transaction', this.id, \"client lisk address\", this.senderId));\n    }\n\n    if (!utils.validatePublicKey(this.senderPublicKey)) {\n      errors.push(new TransactionError('Invalid client \"Lisk public key\" defined on transaction', this.id, \"client public key\", this.senderPublicKey));\n    }\n\n    if (!this.asset.description || typeof this.asset.description !== 'string' || this.asset.name.length > 1500) {\n      errors.push(new TransactionError('Invalid \"description\" defined on transaction', this.id, '.asset.description', this.asset.name, 'A string value no longer than 1500 characters'));\n    }\n\n    if (!this.asset.foodType || this.asset.foodType <= 0) {\n      errors.push(new TransactionError('Invalid \"food type\" defined on transaction', this.id, '.foodType', this.asset.foodType, 'A value bigger than 0'));\n    }\n\n    if (!this.asset.deliveryaddress) {\n      errors.push(new TransactionError('Invalid \"delivery address\" defined on transaction', this.id, '.deliveryaddress', this.asset.phone, 'A string value bigger than 0'));\n    }\n\n    if (!this.asset.phone) {\n      errors.push(new TransactionError('Invalid \"phone\" defined on transaction', this.id, '.phone', this.asset.phone, 'A value bigger than 0'));\n    }\n\n    if (!this.asset.username) {\n      errors.push(new TransactionError('Invalid \"username\" defined on transaction', this.id, '.username', this.asset.username, 'A string value bigger than 0'));\n    }\n\n    if (!this.amount || this.amount <= 0) {\n      errors.push(new TransactionError('Invalid \"value\" defined on transaction', this.id, '.amount', this.amount, 'A value bigger than 0'));\n    }\n\n    return errors;\n  }\n\n  applyAsset(store) {\n    const errors = [];\n    const sender = store.account.get(this.senderId);\n\n    if (!sender) {\n      errors.push(new TransactionError('Invalid \"sender\", please verify your passphrase', this.id, '.sender', this.senderId, 'Verify your passpahrase and address'));\n    }\n\n    const senderBalanceDeducted = new utils.BigNum(sender.balance).sub(new utils.BigNum(this.amount));\n\n    if (senderBalanceDeducted < 0) {\n      errors.push(new TransactionError('Not enough \"balance\" for the transaction', this.id, '.amount', this.amount, 'Need a balance at least equal than amount'));\n    }\n\n    const updatedSender = { ...sender,\n      balance: senderBalanceDeducted.toString()\n    };\n    store.account.set(sender.address, updatedSender);\n    const restaurantAccount = store.account.get(this.recipientId);\n    const restaurantBalanceWithFoodRequest = new utils.BigNum(restaurantAccount.balance).add(new utils.BigNum(this.amount)).sub(new utils.BigNum(this.sidechainFee));\n    const updatedRestaurantAccount = { ...restaurantAccount,\n      ...{\n        balance: restaurantBalanceWithFoodRequest.toString(),\n        asset: {\n          name: this.asset.name,\n          description: this.asset.description,\n          foodType: this.asset.foodType,\n          username: this.asset.username,\n          phone: this.asset.phone,\n          deliveryaddress: this.asset.deliveryaddress\n        }\n      }\n    };\n    store.account.set(restaurantAccount.address, updatedRestaurantAccount);\n    const sidechainAcc = store.account.get(this.sidechainAccountId);\n    const sidechainBalanceWithFee = new utils.BigNum(sidechainAcc.balance).add(new utils.BigNum(this.sidechainFee));\n    const updatedSidechainAccount = { ...sidechainAcc,\n      balance: sidechainBalanceWithFee.toString(),\n      asset: {\n        message: \"fee\"\n      }\n    };\n    store.account.set(sidechainAcc.address, updatedSidechainAccount);\n    return errors;\n  }\n  /* UndoAsset function tells the blockchain how to rollback changes made in the applyAsset function.\r\n      The original balance for both the sender and restaurant account is restored.\r\n      In addition, the `asset` field for the restaurant account `null` is reseted, as it did not hold any previous data.*/\n\n  /* --- Revert sender account --- */\n\n\n  undoAsset(store) {\n    const sender = store.account.get(this.senderId);\n    const senderBalanceWithFoodAmount = new utils.BigNum(sender.balance).add(new utils.BigNum(this.amount));\n    const updatedSender = { ...sender,\n      balance: senderBalanceWithFoodAmount.toString()\n    };\n    store.account.set(sender.address, updatedSender);\n    const restaurantAccount = store.account.get(this.recipientId);\n    const restaurantBalanceWithFoodRequest = new utils.BigNum(restaurantAccount.balance).sub(new utils.BigNum(this.amount).add(new utils.BigNum(this.sidechainFee)));\n    const updatedRestaurantAccount = { ...sender,\n      ...{\n        balance: restaurantBalanceWithFoodRequest.toString(),\n        asset: null\n      }\n    };\n    store.account.set(restaurantAccount.address, updatedRestaurantAccount);\n    const sidechainAcc = store.account.get(this.sidechainAccount);\n    const sidechainBalanceWithoutFee = new utils.BigNum(sidechainAcc.balance).sub(new utils.BigNum(this.sidechainFee));\n    const updatedSidechainAccount = { ...sidechainAcc,\n      balance: sidechainBalanceWithoutFee.toString()\n    };\n    store.account.set(sidechainAcc.address, updatedSidechainAccount);\n    return [];\n  }\n\n}\n\nmodule.exports = FoodTransaction;","map":{"version":3,"sources":["C:/Users/davin.DESKTOP-83VQBDE/Documents/restaurant_sidechain/web/node_modules/liskrestaurant_transactions/FoodTransaction.js"],"names":["BaseTransaction","TransactionError","utils","require","FoodTransaction","sidechainAccountId","sidechainFee","TYPE","FEE","prepare","store","account","cache","address","recipientId","senderId","validateAsset","errors","validateAddress","push","id","validatePublicKey","senderPublicKey","asset","description","name","length","foodType","deliveryaddress","phone","username","amount","applyAsset","sender","get","senderBalanceDeducted","BigNum","balance","sub","updatedSender","toString","set","restaurantAccount","restaurantBalanceWithFoodRequest","add","updatedRestaurantAccount","sidechainAcc","sidechainBalanceWithFee","updatedSidechainAccount","message","undoAsset","senderBalanceWithFoodAmount","sidechainAccount","sidechainBalanceWithoutFee","module","exports"],"mappings":"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","sourcesContent":["const {\r\n    BaseTransaction,\r\n    TransactionError,\r\n    utils\r\n} = require('@liskhq/lisk-transactions');\r\n\r\nclass FoodTransaction extends BaseTransaction {\r\n\r\n    get sidechainAccountId () {\r\n        return \"6181773985994883123L\";\r\n    }\r\n\r\n    get sidechainFee () {\r\n        return '50000000';\r\n    }\r\n\r\n    static get TYPE() {\r\n        return 20;\r\n    }\r\n\r\n    static get FEE () {\r\n\t\treturn `10000000`;\r\n    };        \r\n\r\n    /* Prepare function stores both sender and recipient account in the cache so it is possible to\r\n       modify the accounts during the `applyAsset` and `undoAsset` steps. */\r\n    async prepare(store) {\r\n        await store.account.cache([\r\n            {\r\n                address: this.recipientId,\r\n            },\r\n            {\r\n                address: this.senderId,\r\n            },\r\n            {\r\n                address: this.sidechainAccountId\r\n            }\r\n        ]);\r\n    }\r\n\r\n    validateAsset(){\r\n        const errors = [];        \r\n\r\n        if(!utils.validateAddress(this.senderId)){\r\n            errors.push(new TransactionError(\r\n                'Invalid client \"Lisk address\" defined on transaction',\r\n                this.id,\r\n                \"client lisk address\",\r\n                this.senderId\r\n            ));\r\n        }\r\n\r\n        if (!utils.validatePublicKey(this.senderPublicKey)){\r\n            errors.push(new TransactionError(\r\n                'Invalid client \"Lisk public key\" defined on transaction',\r\n                this.id,\r\n                \"client public key\",\r\n                this.senderPublicKey\r\n            ));\r\n        }                               \r\n\r\n        if (!this.asset.description || typeof this.asset.description !== 'string' || this.asset.name.length > 1500){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"description\" defined on transaction',\r\n                    this.id,\r\n                    '.asset.description',\r\n                    this.asset.name,\r\n                    'A string value no longer than 1500 characters'\r\n                )\r\n            );\r\n        }\r\n\r\n        if (!this.asset.foodType || this.asset.foodType <= 0){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"food type\" defined on transaction',\r\n                    this.id,\r\n                    '.foodType',\r\n                    this.asset.foodType,\r\n                    'A value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n\r\n        if (!this.asset.deliveryaddress){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"delivery address\" defined on transaction',\r\n                    this.id,\r\n                    '.deliveryaddress',\r\n                    this.asset.phone,\r\n                    'A string value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n\r\n        if (!this.asset.phone){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"phone\" defined on transaction',\r\n                    this.id,\r\n                    '.phone',\r\n                    this.asset.phone,\r\n                    'A value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n\r\n        if (!this.asset.username){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"username\" defined on transaction',\r\n                    this.id,\r\n                    '.username',\r\n                    this.asset.username,\r\n                    'A string value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n        \r\n        if (!this.amount || this.amount <= 0){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"value\" defined on transaction',\r\n                    this.id,\r\n                    '.amount',\r\n                    this.amount,\r\n                    'A value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    applyAsset(store){               \r\n        const errors = [];\r\n        \r\n        const sender = store.account.get(this.senderId);\r\n\r\n        if (!sender){           \r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"sender\", please verify your passphrase',\r\n                    this.id,\r\n                    '.sender',\r\n                    this.senderId,\r\n                    'Verify your passpahrase and address'\r\n                )\r\n            );            \r\n        }\r\n\r\n        const senderBalanceDeducted = new utils.BigNum(sender.balance).sub(new utils.BigNum(this.amount));            \r\n\r\n        if (senderBalanceDeducted < 0){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Not enough \"balance\" for the transaction',\r\n                    this.id,\r\n                    '.amount',\r\n                    this.amount,\r\n                    'Need a balance at least equal than amount'\r\n                )\r\n            );\r\n        }\r\n\r\n        const updatedSender = {\r\n            ...sender,\r\n            balance: senderBalanceDeducted.toString()\r\n        }\r\n        store.account.set(sender.address, updatedSender);\r\n\r\n        const restaurantAccount = store.account.get(this.recipientId);\r\n        const restaurantBalanceWithFoodRequest = new utils.BigNum(restaurantAccount.balance).add(new utils.BigNum(this.amount)).sub(new utils.BigNum(this.sidechainFee)); \r\n        \r\n        const updatedRestaurantAccount = {...restaurantAccount, \r\n            ...{ \r\n                balance: restaurantBalanceWithFoodRequest.toString(),\r\n                asset: { \r\n                    name: this.asset.name, \r\n                    description: this.asset.description, \r\n                    foodType: this.asset.foodType, \r\n                    username: this.asset.username, \r\n                    phone: this.asset.phone, \r\n                    deliveryaddress: this.asset.deliveryaddress \r\n                }\r\n            }\r\n        };        \r\n\r\n        store.account.set(restaurantAccount.address, updatedRestaurantAccount);\r\n        \r\n        const sidechainAcc = store.account.get(this.sidechainAccountId);\r\n        const sidechainBalanceWithFee = new utils.BigNum(sidechainAcc.balance).add(new utils.BigNum(this.sidechainFee));\r\n        const updatedSidechainAccount = {\r\n            ...sidechainAcc,\r\n            balance: sidechainBalanceWithFee.toString(),\r\n            asset: {\r\n                message: \"fee\"\r\n            }\r\n        };\r\n\r\n        store.account.set(sidechainAcc.address, updatedSidechainAccount);\r\n                \r\n        return errors;\r\n    }\r\n\r\n    /* UndoAsset function tells the blockchain how to rollback changes made in the applyAsset function.\r\n        The original balance for both the sender and restaurant account is restored.\r\n        In addition, the `asset` field for the restaurant account `null` is reseted, as it did not hold any previous data.*/\r\n    /* --- Revert sender account --- */\r\n    undoAsset(store){\r\n        const sender = store.account.get(this.senderId);\r\n\r\n        const senderBalanceWithFoodAmount = new utils.BigNum(sender.balance).add(new utils.BigNum(this.amount));\r\n        const updatedSender = {\r\n            ...sender,\r\n            balance: senderBalanceWithFoodAmount.toString()\r\n        };\r\n        store.account.set(sender.address, updatedSender);\r\n\r\n        const restaurantAccount = store.account.get(this.recipientId);\r\n        const restaurantBalanceWithFoodRequest = new utils.BigNum(restaurantAccount.balance).sub(new utils.BigNum(this.amount).add(new utils.BigNum(this.sidechainFee)));\r\n\r\n        const updatedRestaurantAccount = {...sender, \r\n            ... { balance: restaurantBalanceWithFoodRequest.toString(),\r\n            asset: null }\r\n        };\r\n        store.account.set(restaurantAccount.address, updatedRestaurantAccount);\r\n\r\n        const sidechainAcc = store.account.get(this.sidechainAccount);\r\n        const sidechainBalanceWithoutFee = new utils.BigNum(sidechainAcc.balance).sub(new utils.BigNum(this.sidechainFee));\r\n\r\n        const updatedSidechainAccount = {\r\n            ...sidechainAcc,\r\n            balance: sidechainBalanceWithoutFee.toString()\r\n        };\r\n\r\n        store.account.set(sidechainAcc.address, updatedSidechainAccount);\r\n\r\n        return [];\r\n    }\r\n}\r\n\r\nmodule.exports = FoodTransaction;"]},"metadata":{},"sourceType":"script"}