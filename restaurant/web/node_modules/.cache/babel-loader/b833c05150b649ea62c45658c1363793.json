{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar base_transaction_1 = require(\"./base_transaction\");\n\nvar constants_1 = require(\"./constants\");\n\nvar errors_1 = require(\"./errors\");\n\nvar utils_1 = require(\"./utils\");\n\nexports.secondSignatureAssetFormatSchema = {\n  type: 'object',\n  required: ['signature'],\n  properties: {\n    signature: {\n      type: 'object',\n      required: ['publicKey'],\n      properties: {\n        publicKey: {\n          type: 'string',\n          format: 'publicKey'\n        }\n      }\n    }\n  }\n};\n\nvar SecondSignatureTransaction = /*#__PURE__*/function (_base_transaction_1$B) {\n  _inherits(SecondSignatureTransaction, _base_transaction_1$B);\n\n  var _super = _createSuper(SecondSignatureTransaction);\n\n  function SecondSignatureTransaction(rawTransaction) {\n    var _this;\n\n    _classCallCheck(this, SecondSignatureTransaction);\n\n    _this = _super.call(this, rawTransaction);\n    var tx = typeof rawTransaction === 'object' && rawTransaction !== null ? rawTransaction : {};\n    _this.asset = tx.asset || {\n      signature: {}\n    };\n    return _this;\n  }\n\n  _createClass(SecondSignatureTransaction, [{\n    key: \"assetToBytes\",\n    value: function assetToBytes() {\n      var publicKey = this.asset.signature.publicKey;\n      return lisk_cryptography_1.hexToBuffer(publicKey);\n    }\n  }, {\n    key: \"prepare\",\n    value: function () {\n      var _prepare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(store) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return store.account.cache([{\n                  address: this.senderId\n                }]);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function prepare(_x) {\n        return _prepare.apply(this, arguments);\n      }\n\n      return prepare;\n    }()\n  }, {\n    key: \"verifyAgainstTransactions\",\n    value: function verifyAgainstTransactions(transactions) {\n      var _this2 = this;\n\n      return transactions.filter(function (tx) {\n        return tx.type === _this2.type && tx.senderPublicKey === _this2.senderPublicKey;\n      }).map(function (tx) {\n        return new errors_1.TransactionError('Register second signature only allowed once per account.', tx.id, '.asset.signature');\n      });\n    }\n  }, {\n    key: \"validateAsset\",\n    value: function validateAsset() {\n      utils_1.validator.validate(exports.secondSignatureAssetFormatSchema, this.asset);\n      var errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);\n\n      if (!this.amount.eq(0)) {\n        errors.push(new errors_1.TransactionError('Amount must be zero for second signature registration transaction', this.id, '.amount', this.amount.toString(), '0'));\n      }\n\n      if (this.recipientId) {\n        errors.push(new errors_1.TransactionError('RecipientId is expected to be undefined.', this.id, '.recipientId', this.recipientId, ''));\n      }\n\n      if (this.recipientPublicKey) {\n        errors.push(new errors_1.TransactionError('RecipientPublicKey is expected to be undefined.', this.id, '.recipientPublicKey', this.recipientPublicKey, ''));\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"applyAsset\",\n    value: function applyAsset(store) {\n      var errors = [];\n      var sender = store.account.get(this.senderId);\n\n      if (sender.secondPublicKey) {\n        errors.push(new errors_1.TransactionError('Register second signature only allowed once per account.', this.id, '.secondPublicKey'));\n      }\n\n      var updatedSender = Object.assign({}, sender, {\n        secondPublicKey: this.asset.signature.publicKey,\n        secondSignature: 1\n      });\n      store.account.set(updatedSender.address, updatedSender);\n      return errors;\n    }\n  }, {\n    key: \"undoAsset\",\n    value: function undoAsset(store) {\n      var sender = store.account.get(this.senderId);\n      var resetSender = Object.assign({}, sender, {\n        secondPublicKey: null,\n        secondSignature: 0\n      });\n      store.account.set(resetSender.address, resetSender);\n      return [];\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(passphrase) {\n      this._signature = undefined;\n      this._signSignature = undefined;\n      this._signature = lisk_cryptography_1.signData(lisk_cryptography_1.hash(this.getBytes()), passphrase);\n      this._id = utils_1.getId(this.getBytes());\n    }\n  }, {\n    key: \"assetFromSync\",\n    value: function assetFromSync(raw) {\n      if (!raw.s_publicKey) {\n        return undefined;\n      }\n\n      var signature = {\n        transactionId: raw.t_id,\n        publicKey: raw.s_publicKey\n      };\n      return {\n        signature: signature\n      };\n    }\n  }]);\n\n  return SecondSignatureTransaction;\n}(base_transaction_1.BaseTransaction);\n\nSecondSignatureTransaction.TYPE = 1;\nSecondSignatureTransaction.FEE = constants_1.SIGNATURE_FEE.toString();\nexports.SecondSignatureTransaction = SecondSignatureTransaction;","map":{"version":3,"sources":["../src/1_second_signature_transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\r\nconst base_transaction_1 = require(\"./base_transaction\");\r\nconst constants_1 = require(\"./constants\");\r\nconst errors_1 = require(\"./errors\");\r\nconst utils_1 = require(\"./utils\");\r\nexports.secondSignatureAssetFormatSchema = {\r\n    type: 'object',\r\n    required: ['signature'],\r\n    properties: {\r\n        signature: {\r\n            type: 'object',\r\n            required: ['publicKey'],\r\n            properties: {\r\n                publicKey: {\r\n                    type: 'string',\r\n                    format: 'publicKey',\r\n                },\r\n            },\r\n        },\r\n    },\r\n};\r\nclass SecondSignatureTransaction extends base_transaction_1.BaseTransaction {\r\n    constructor(rawTransaction) {\r\n        super(rawTransaction);\r\n        const tx = (typeof rawTransaction === 'object' && rawTransaction !== null\r\n            ? rawTransaction\r\n            : {});\r\n        this.asset = (tx.asset || { signature: {} });\r\n    }\r\n    assetToBytes() {\r\n        const { signature: { publicKey }, } = this.asset;\r\n        return lisk_cryptography_1.hexToBuffer(publicKey);\r\n    }\r\n    async prepare(store) {\r\n        await store.account.cache([\r\n            {\r\n                address: this.senderId,\r\n            },\r\n        ]);\r\n    }\r\n    verifyAgainstTransactions(transactions) {\r\n        return transactions\r\n            .filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey)\r\n            .map(tx => new errors_1.TransactionError('Register second signature only allowed once per account.', tx.id, '.asset.signature'));\r\n    }\r\n    validateAsset() {\r\n        utils_1.validator.validate(exports.secondSignatureAssetFormatSchema, this.asset);\r\n        const errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);\r\n        if (!this.amount.eq(0)) {\r\n            errors.push(new errors_1.TransactionError('Amount must be zero for second signature registration transaction', this.id, '.amount', this.amount.toString(), '0'));\r\n        }\r\n        if (this.recipientId) {\r\n            errors.push(new errors_1.TransactionError('RecipientId is expected to be undefined.', this.id, '.recipientId', this.recipientId, ''));\r\n        }\r\n        if (this.recipientPublicKey) {\r\n            errors.push(new errors_1.TransactionError('RecipientPublicKey is expected to be undefined.', this.id, '.recipientPublicKey', this.recipientPublicKey, ''));\r\n        }\r\n        return errors;\r\n    }\r\n    applyAsset(store) {\r\n        const errors = [];\r\n        const sender = store.account.get(this.senderId);\r\n        if (sender.secondPublicKey) {\r\n            errors.push(new errors_1.TransactionError('Register second signature only allowed once per account.', this.id, '.secondPublicKey'));\r\n        }\r\n        const updatedSender = Object.assign({}, sender, { secondPublicKey: this.asset.signature.publicKey, secondSignature: 1 });\r\n        store.account.set(updatedSender.address, updatedSender);\r\n        return errors;\r\n    }\r\n    undoAsset(store) {\r\n        const sender = store.account.get(this.senderId);\r\n        const resetSender = Object.assign({}, sender, { secondPublicKey: null, secondSignature: 0 });\r\n        store.account.set(resetSender.address, resetSender);\r\n        return [];\r\n    }\r\n    sign(passphrase) {\r\n        this._signature = undefined;\r\n        this._signSignature = undefined;\r\n        this._signature = lisk_cryptography_1.signData(lisk_cryptography_1.hash(this.getBytes()), passphrase);\r\n        this._id = utils_1.getId(this.getBytes());\r\n    }\r\n    assetFromSync(raw) {\r\n        if (!raw.s_publicKey) {\r\n            return undefined;\r\n        }\r\n        const signature = {\r\n            transactionId: raw.t_id,\r\n            publicKey: raw.s_publicKey,\r\n        };\r\n        return { signature };\r\n    }\r\n}\r\nSecondSignatureTransaction.TYPE = 1;\r\nSecondSignatureTransaction.FEE = constants_1.SIGNATURE_FEE.toString();\r\nexports.SecondSignatureTransaction = SecondSignatureTransaction;\r\n//# sourceMappingURL=1_second_signature_transaction.js.map"]},"metadata":{},"sourceType":"script"}