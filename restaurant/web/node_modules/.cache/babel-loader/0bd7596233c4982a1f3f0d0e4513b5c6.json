{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BigNum = require(\"@liskhq/bignum\");\n\nconst Ajv = require(\"ajv\");\n\nconst addKeywords = require(\"ajv-merge-patch\");\n\nconst schemas = require(\"./schema\");\n\nconst validation_1 = require(\"./validation\");\n\nexports.validator = new Ajv({\n  allErrors: true,\n  removeAdditional: 'all'\n});\naddKeywords(exports.validator);\nexports.validator.addFormat('signature', validation_1.validateSignature);\nexports.validator.addFormat('id', data => validation_1.isNumberString(data) && !validation_1.isGreaterThanMaxTransactionId(new BigNum(data)));\nexports.validator.addFormat('address', data => {\n  try {\n    validation_1.validateAddress(data);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('amount', validation_1.isNumberString);\nexports.validator.addFormat('transferAmount', validation_1.validateTransferAmount);\nexports.validator.addFormat('nonTransferAmount', validation_1.validateNonTransferAmount);\nexports.validator.addFormat('transferData', data => !validation_1.isNullByteIncluded(data) && validation_1.isValidTransferData(data));\nexports.validator.addFormat('fee', validation_1.validateFee);\nexports.validator.addFormat('emptyOrPublicKey', data => {\n  if (data === null || data === '') {\n    return true;\n  }\n\n  try {\n    validation_1.validatePublicKey(data);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('publicKey', data => {\n  try {\n    validation_1.validatePublicKey(data);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('signedPublicKey', data => {\n  try {\n    const action = data[0];\n\n    if (action !== '+' && action !== '-') {\n      return false;\n    }\n\n    const publicKey = data.slice(1);\n    validation_1.validatePublicKey(publicKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('additionPublicKey', data => {\n  const action = data[0];\n\n  if (action !== '+') {\n    return false;\n  }\n\n  try {\n    const publicKey = data.slice(1);\n    validation_1.validatePublicKey(publicKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('username', validation_1.validateUsername);\nexports.validator.addFormat('noNullByte', data => !validation_1.isNullByteIncluded(data));\nexports.validator.addKeyword('uniqueSignedPublicKeys', {\n  type: 'array',\n  compile: () => data => new Set(data.filter(datum => typeof datum === 'string').map(key => key.slice(1))).size === data.length\n});\nexports.validator.addSchema(schemas.baseTransaction);","map":{"version":3,"sources":["../../../src/utils/validation/validator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BigNum = require(\"@liskhq/bignum\");\nconst Ajv = require(\"ajv\");\nconst addKeywords = require(\"ajv-merge-patch\");\nconst schemas = require(\"./schema\");\nconst validation_1 = require(\"./validation\");\nexports.validator = new Ajv({ allErrors: true, removeAdditional: 'all' });\naddKeywords(exports.validator);\nexports.validator.addFormat('signature', validation_1.validateSignature);\nexports.validator.addFormat('id', data => validation_1.isNumberString(data) && !validation_1.isGreaterThanMaxTransactionId(new BigNum(data)));\nexports.validator.addFormat('address', data => {\n    try {\n        validation_1.validateAddress(data);\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n});\nexports.validator.addFormat('amount', validation_1.isNumberString);\nexports.validator.addFormat('transferAmount', validation_1.validateTransferAmount);\nexports.validator.addFormat('nonTransferAmount', validation_1.validateNonTransferAmount);\nexports.validator.addFormat('transferData', data => !validation_1.isNullByteIncluded(data) && validation_1.isValidTransferData(data));\nexports.validator.addFormat('fee', validation_1.validateFee);\nexports.validator.addFormat('emptyOrPublicKey', data => {\n    if (data === null || data === '') {\n        return true;\n    }\n    try {\n        validation_1.validatePublicKey(data);\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n});\nexports.validator.addFormat('publicKey', data => {\n    try {\n        validation_1.validatePublicKey(data);\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n});\nexports.validator.addFormat('signedPublicKey', data => {\n    try {\n        const action = data[0];\n        if (action !== '+' && action !== '-') {\n            return false;\n        }\n        const publicKey = data.slice(1);\n        validation_1.validatePublicKey(publicKey);\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n});\nexports.validator.addFormat('additionPublicKey', data => {\n    const action = data[0];\n    if (action !== '+') {\n        return false;\n    }\n    try {\n        const publicKey = data.slice(1);\n        validation_1.validatePublicKey(publicKey);\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n});\nexports.validator.addFormat('username', validation_1.validateUsername);\nexports.validator.addFormat('noNullByte', data => !validation_1.isNullByteIncluded(data));\nexports.validator.addKeyword('uniqueSignedPublicKeys', {\n    type: 'array',\n    compile: () => (data) => new Set(data\n        .filter(datum => typeof datum === 'string')\n        .map((key) => key.slice(1))).size === data.length,\n});\nexports.validator.addSchema(schemas.baseTransaction);\n//# sourceMappingURL=validator.js.map"]},"metadata":{},"sourceType":"script"}