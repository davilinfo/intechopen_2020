{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar _0_transfer_transaction_1 = require(\"./0_transfer_transaction\");\n\nvar constants_1 = require(\"./constants\");\n\nvar utils_1 = require(\"./utils\");\n\nvar validateInputs = function validateInputs(_ref) {\n  var amount = _ref.amount,\n      recipientId = _ref.recipientId,\n      recipientPublicKey = _ref.recipientPublicKey,\n      data = _ref.data;\n\n  if (!utils_1.validateTransferAmount(amount)) {\n    throw new Error('Amount must be a valid number in string format.');\n  }\n\n  if (!recipientId && !recipientPublicKey) {\n    throw new Error('Either recipientId or recipientPublicKey must be provided.');\n  }\n\n  if (typeof recipientId !== 'undefined') {\n    utils_1.validateAddress(recipientId);\n  }\n\n  if (typeof recipientPublicKey !== 'undefined') {\n    utils_1.validatePublicKey(recipientPublicKey);\n  }\n\n  if (recipientId && recipientPublicKey && recipientId !== lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)) {\n    throw new Error('recipientId does not match recipientPublicKey.');\n  }\n\n  if (data && data.length > 0) {\n    if (typeof data !== 'string') {\n      throw new Error('Invalid encoding in transaction data. Data must be utf-8 encoded string.');\n    }\n\n    if (data.length > constants_1.BYTESIZES.DATA) {\n      throw new Error('Transaction data field cannot exceed 64 bytes.');\n    }\n  }\n};\n\nexports.transfer = function (inputs) {\n  validateInputs(inputs);\n  var data = inputs.data,\n      amount = inputs.amount,\n      recipientPublicKey = inputs.recipientPublicKey,\n      passphrase = inputs.passphrase,\n      secondPassphrase = inputs.secondPassphrase;\n  var recipientIdFromPublicKey = recipientPublicKey ? lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey) : undefined;\n  var recipientId = inputs.recipientId ? inputs.recipientId : recipientIdFromPublicKey;\n  var transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), {\n    asset: data ? {\n      data: data\n    } : {},\n    amount: amount,\n    fee: constants_1.TRANSFER_FEE.toString(),\n    recipientId: recipientId,\n    recipientPublicKey: recipientPublicKey,\n    type: 0\n  });\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  var transactionWithSenderInfo = Object.assign({}, transaction, {\n    recipientId: recipientId,\n    senderId: transaction.senderId,\n    senderPublicKey: transaction.senderPublicKey\n  });\n  var transferTransaction = new _0_transfer_transaction_1.TransferTransaction(transactionWithSenderInfo);\n  transferTransaction.sign(passphrase, secondPassphrase);\n  return transferTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/0_transfer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst _0_transfer_transaction_1 = require(\"./0_transfer_transaction\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nconst validateInputs = ({ amount, recipientId, recipientPublicKey, data, }) => {\n    if (!utils_1.validateTransferAmount(amount)) {\n        throw new Error('Amount must be a valid number in string format.');\n    }\n    if (!recipientId && !recipientPublicKey) {\n        throw new Error('Either recipientId or recipientPublicKey must be provided.');\n    }\n    if (typeof recipientId !== 'undefined') {\n        utils_1.validateAddress(recipientId);\n    }\n    if (typeof recipientPublicKey !== 'undefined') {\n        utils_1.validatePublicKey(recipientPublicKey);\n    }\n    if (recipientId &&\n        recipientPublicKey &&\n        recipientId !== lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)) {\n        throw new Error('recipientId does not match recipientPublicKey.');\n    }\n    if (data && data.length > 0) {\n        if (typeof data !== 'string') {\n            throw new Error('Invalid encoding in transaction data. Data must be utf-8 encoded string.');\n        }\n        if (data.length > constants_1.BYTESIZES.DATA) {\n            throw new Error('Transaction data field cannot exceed 64 bytes.');\n        }\n    }\n};\nexports.transfer = (inputs) => {\n    validateInputs(inputs);\n    const { data, amount, recipientPublicKey, passphrase, secondPassphrase, } = inputs;\n    const recipientIdFromPublicKey = recipientPublicKey\n        ? lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)\n        : undefined;\n    const recipientId = inputs.recipientId\n        ? inputs.recipientId\n        : recipientIdFromPublicKey;\n    const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { asset: data ? { data } : {}, amount, fee: constants_1.TRANSFER_FEE.toString(), recipientId: recipientId, recipientPublicKey, type: 0 });\n    if (!passphrase) {\n        return transaction;\n    }\n    const transactionWithSenderInfo = Object.assign({}, transaction, { recipientId: recipientId, senderId: transaction.senderId, senderPublicKey: transaction.senderPublicKey });\n    const transferTransaction = new _0_transfer_transaction_1.TransferTransaction(transactionWithSenderInfo);\n    transferTransaction.sign(passphrase, secondPassphrase);\n    return transferTransaction.toJSON();\n};\n//# sourceMappingURL=0_transfer.js.map"]},"metadata":{},"sourceType":"script"}