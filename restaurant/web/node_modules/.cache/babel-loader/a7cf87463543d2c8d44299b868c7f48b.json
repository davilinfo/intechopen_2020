{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar cryptography = require(\"@liskhq/lisk-cryptography\");\n\nvar errors_1 = require(\"../errors\");\n\nvar get_transaction_bytes_1 = require(\"./get_transaction_bytes\");\n\nexports.getId = function (transactionBytes) {\n  var transactionHash = cryptography.hash(transactionBytes);\n  var bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);\n  var transactionId = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);\n  return transactionId;\n};\n\nexports.validateTransactionId = function (id, bytes) {\n  var expectedId = exports.getId(bytes);\n  return id !== expectedId ? new errors_1.TransactionError(\"Invalid transaction id\", id, '.id', id, expectedId) : undefined;\n};\n\nexports.getTransactionId = function (transaction) {\n  var transactionBytes = get_transaction_bytes_1.getTransactionBytes(transaction);\n  var transactionHash = cryptography.hash(transactionBytes);\n  var bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);\n  var firstEntriesToNumber = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);\n  return firstEntriesToNumber;\n};","map":{"version":3,"sources":["../../src/utils/transaction_id.ts"],"names":[],"mappings":";;;;;;AAcA,IAAA,YAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAA,uBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEa,OAAA,CAAA,KAAA,GAAQ,UAAC,gBAAD,EAAqC;AACzD,MAAM,eAAe,GAAG,YAAY,CAAC,IAAb,CAAkB,gBAAlB,CAAxB;AACA,MAAM,8BAA8B,GAAG,YAAY,CAAC,0BAAb,CACtC,eADsC,CAAvC;AAGA,MAAM,aAAa,GAAG,YAAY,CAAC,mBAAb,CACrB,8BADqB,CAAtB;AAIA,SAAO,aAAP;AACA,CAVY;;AAYA,OAAA,CAAA,qBAAA,GAAwB,UACpC,EADoC,EAEpC,KAFoC,EAGH;AACjC,MAAM,UAAU,GAAG,OAAA,CAAA,KAAA,CAAM,KAAN,CAAnB;AAEA,SAAO,EAAE,KAAK,UAAP,GACJ,IAAI,QAAA,CAAA,gBAAJ,2BAA+C,EAA/C,EAAmD,KAAnD,EAA0D,EAA1D,EAA8D,UAA9D,CADI,GAEJ,SAFH;AAGA,CATY;;AAYA,OAAA,CAAA,gBAAA,GAAmB,UAAC,WAAD,EAAyC;AACxE,MAAM,gBAAgB,GAAG,uBAAA,CAAA,mBAAA,CAAoB,WAApB,CAAzB;AACA,MAAM,eAAe,GAAG,YAAY,CAAC,IAAb,CAAkB,gBAAlB,CAAxB;AACA,MAAM,8BAA8B,GAAG,YAAY,CAAC,0BAAb,CACtC,eADsC,CAAvC;AAGA,MAAM,oBAAoB,GAAG,YAAY,CAAC,mBAAb,CAC5B,8BAD4B,CAA7B;AAIA,SAAO,oBAAP;AACA,CAXY","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst cryptography = require(\"@liskhq/lisk-cryptography\");\r\nconst errors_1 = require(\"../errors\");\r\nconst get_transaction_bytes_1 = require(\"./get_transaction_bytes\");\r\nexports.getId = (transactionBytes) => {\r\n    const transactionHash = cryptography.hash(transactionBytes);\r\n    const bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);\r\n    const transactionId = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);\r\n    return transactionId;\r\n};\r\nexports.validateTransactionId = (id, bytes) => {\r\n    const expectedId = exports.getId(bytes);\r\n    return id !== expectedId\r\n        ? new errors_1.TransactionError(`Invalid transaction id`, id, '.id', id, expectedId)\r\n        : undefined;\r\n};\r\nexports.getTransactionId = (transaction) => {\r\n    const transactionBytes = get_transaction_bytes_1.getTransactionBytes(transaction);\r\n    const transactionHash = cryptography.hash(transactionBytes);\r\n    const bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);\r\n    const firstEntriesToNumber = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);\r\n    return firstEntriesToNumber;\r\n};\r\n//# sourceMappingURL=transaction_id.js.map"]},"metadata":{},"sourceType":"script"}