{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cryptography = require(\"@liskhq/lisk-cryptography\");\n\nconst errors_1 = require(\"../errors\");\n\nconst get_transaction_bytes_1 = require(\"./get_transaction_bytes\");\n\nexports.getId = transactionBytes => {\n  const transactionHash = cryptography.hash(transactionBytes);\n  const bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);\n  const transactionId = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);\n  return transactionId;\n};\n\nexports.validateTransactionId = (id, bytes) => {\n  const expectedId = exports.getId(bytes);\n  return id !== expectedId ? new errors_1.TransactionError(`Invalid transaction id`, id, '.id', id, expectedId) : undefined;\n};\n\nexports.getTransactionId = transaction => {\n  const transactionBytes = get_transaction_bytes_1.getTransactionBytes(transaction);\n  const transactionHash = cryptography.hash(transactionBytes);\n  const bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);\n  const firstEntriesToNumber = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);\n  return firstEntriesToNumber;\n};","map":{"version":3,"sources":["../../src/utils/transaction_id.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,YAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAA,uBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AAEa,OAAA,CAAA,KAAA,GAAS,gBAAD,IAAqC;AACzD,QAAM,eAAe,GAAG,YAAY,CAAC,IAAb,CAAkB,gBAAlB,CAAxB;AACA,QAAM,8BAA8B,GAAG,YAAY,CAAC,0BAAb,CACtC,eADsC,CAAvC;AAGA,QAAM,aAAa,GAAG,YAAY,CAAC,mBAAb,CACrB,8BADqB,CAAtB;AAIA,SAAO,aAAP;AACA,CAVY;;AAYA,OAAA,CAAA,qBAAA,GAAwB,CACpC,EADoC,EAEpC,KAFoC,KAGH;AACjC,QAAM,UAAU,GAAG,OAAA,CAAA,KAAA,CAAM,KAAN,CAAnB;AAEA,SAAO,EAAE,KAAK,UAAP,GACJ,IAAI,QAAA,CAAA,gBAAJ,CAAqB,wBAArB,EAA+C,EAA/C,EAAmD,KAAnD,EAA0D,EAA1D,EAA8D,UAA9D,CADI,GAEJ,SAFH;AAGA,CATY;;AAYA,OAAA,CAAA,gBAAA,GAAoB,WAAD,IAAyC;AACxE,QAAM,gBAAgB,GAAG,uBAAA,CAAA,mBAAA,CAAoB,WAApB,CAAzB;AACA,QAAM,eAAe,GAAG,YAAY,CAAC,IAAb,CAAkB,gBAAlB,CAAxB;AACA,QAAM,8BAA8B,GAAG,YAAY,CAAC,0BAAb,CACtC,eADsC,CAAvC;AAGA,QAAM,oBAAoB,GAAG,YAAY,CAAC,mBAAb,CAC5B,8BAD4B,CAA7B;AAIA,SAAO,oBAAP;AACA,CAXY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cryptography = require(\"@liskhq/lisk-cryptography\");\nconst errors_1 = require(\"../errors\");\nconst get_transaction_bytes_1 = require(\"./get_transaction_bytes\");\nexports.getId = (transactionBytes) => {\n    const transactionHash = cryptography.hash(transactionBytes);\n    const bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);\n    const transactionId = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);\n    return transactionId;\n};\nexports.validateTransactionId = (id, bytes) => {\n    const expectedId = exports.getId(bytes);\n    return id !== expectedId\n        ? new errors_1.TransactionError(`Invalid transaction id`, id, '.id', id, expectedId)\n        : undefined;\n};\nexports.getTransactionId = (transaction) => {\n    const transactionBytes = get_transaction_bytes_1.getTransactionBytes(transaction);\n    const transactionHash = cryptography.hash(transactionBytes);\n    const bufferFromFirstEntriesReversed = cryptography.getFirstEightBytesReversed(transactionHash);\n    const firstEntriesToNumber = cryptography.bufferToIntAsString(bufferFromFirstEntriesReversed);\n    return firstEntriesToNumber;\n};\n//# sourceMappingURL=transaction_id.js.map"]},"metadata":{},"sourceType":"script"}