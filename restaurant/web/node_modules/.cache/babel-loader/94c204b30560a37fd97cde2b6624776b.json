{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BigNum = require(\"@liskhq/bignum\");\n\nvar constants_1 = require(\"../constants\");\n\nvar validation_1 = require(\"./validation\");\n\nvar BASE_10 = 10;\nvar LISK_MAX_DECIMAL_POINTS = 8;\n\nvar getDecimalPlaces = function getDecimalPlaces(amount) {\n  return (amount.split('.')[1] || '').length;\n};\n\nexports.convertBeddowsToLSK = function (beddowsAmount) {\n  if (typeof beddowsAmount !== 'string') {\n    throw new Error('Cannot convert non-string amount');\n  }\n\n  if (getDecimalPlaces(beddowsAmount)) {\n    throw new Error('Beddows amount should not have decimal points');\n  }\n\n  var beddowsAmountBigNum = new BigNum(beddowsAmount);\n\n  if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {\n    throw new Error('Beddows amount out of range');\n  }\n\n  var lskAmountBigNum = beddowsAmountBigNum.div(constants_1.FIXED_POINT);\n  return lskAmountBigNum.toString(BASE_10);\n};\n\nexports.convertLSKToBeddows = function (lskAmount) {\n  if (typeof lskAmount !== 'string') {\n    throw new Error('Cannot convert non-string amount');\n  }\n\n  if (getDecimalPlaces(lskAmount) > LISK_MAX_DECIMAL_POINTS) {\n    throw new Error('LSK amount has too many decimal points');\n  }\n\n  var lskAmountBigNum = new BigNum(lskAmount);\n  var beddowsAmountBigNum = lskAmountBigNum.mul(constants_1.FIXED_POINT);\n\n  if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {\n    throw new Error('LSK amount out of range');\n  }\n\n  return beddowsAmountBigNum.toString();\n};\n\nexports.prependPlusToPublicKeys = function (publicKeys) {\n  return publicKeys.map(function (publicKey) {\n    return \"+\".concat(publicKey);\n  });\n};\n\nexports.prependMinusToPublicKeys = function (publicKeys) {\n  return publicKeys.map(function (publicKey) {\n    return \"-\".concat(publicKey);\n  });\n};","map":{"version":3,"sources":["../../src/utils/format.ts"],"names":[],"mappings":";;;;;;AAcA,IAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,IAAM,OAAO,GAAG,EAAhB;AACA,IAAM,uBAAuB,GAAG,CAAhC;;AACA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,MAAD;AAAA,SACxB,CAAC,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB,CAAlB,KAAwB,EAAzB,EAA6B,MADL;AAAA,CAAzB;;AAGa,OAAA,CAAA,mBAAA,GAAsB,UAAC,aAAD,EAAmC;AACrE,MAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AACtC,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACA;;AACD,MAAI,gBAAgB,CAAC,aAAD,CAApB,EAAqC;AACpC,UAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACA;;AACD,MAAM,mBAAmB,GAAG,IAAI,MAAJ,CAAW,aAAX,CAA5B;;AACA,MAAI,YAAA,CAAA,iCAAA,CAAkC,mBAAlC,CAAJ,EAA4D;AAC3D,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACA;;AACD,MAAM,eAAe,GAAG,mBAAmB,CAAC,GAApB,CAAwB,WAAA,CAAA,WAAxB,CAAxB;AAEA,SAAO,eAAe,CAAC,QAAhB,CAAyB,OAAzB,CAAP;AACA,CAdY;;AAgBA,OAAA,CAAA,mBAAA,GAAsB,UAAC,SAAD,EAA+B;AACjE,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AAClC,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACA;;AACD,MAAI,gBAAgB,CAAC,SAAD,CAAhB,GAA8B,uBAAlC,EAA2D;AAC1D,UAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACA;;AACD,MAAM,eAAe,GAAG,IAAI,MAAJ,CAAW,SAAX,CAAxB;AACA,MAAM,mBAAmB,GAAG,eAAe,CAAC,GAAhB,CAAoB,WAAA,CAAA,WAApB,CAA5B;;AACA,MAAI,YAAA,CAAA,iCAAA,CAAkC,mBAAlC,CAAJ,EAA4D;AAC3D,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACA;;AAED,SAAO,mBAAmB,CAAC,QAApB,EAAP;AACA,CAdY;;AAgBA,OAAA,CAAA,uBAAA,GAA0B,UACtC,UADsC;AAAA,SAEX,UAAU,CAAC,GAAX,CAAe,UAAA,SAAS;AAAA,sBAAQ,SAAR;AAAA,GAAxB,CAFW;AAAA,CAA1B;;AAIA,OAAA,CAAA,wBAAA,GAA2B,UACvC,UADuC;AAAA,SAEZ,UAAU,CAAC,GAAX,CAAe,UAAA,SAAS;AAAA,sBAAQ,SAAR;AAAA,GAAxB,CAFY;AAAA,CAA3B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BigNum = require(\"@liskhq/bignum\");\nconst constants_1 = require(\"../constants\");\nconst validation_1 = require(\"./validation\");\nconst BASE_10 = 10;\nconst LISK_MAX_DECIMAL_POINTS = 8;\nconst getDecimalPlaces = (amount) => (amount.split('.')[1] || '').length;\nexports.convertBeddowsToLSK = (beddowsAmount) => {\n    if (typeof beddowsAmount !== 'string') {\n        throw new Error('Cannot convert non-string amount');\n    }\n    if (getDecimalPlaces(beddowsAmount)) {\n        throw new Error('Beddows amount should not have decimal points');\n    }\n    const beddowsAmountBigNum = new BigNum(beddowsAmount);\n    if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {\n        throw new Error('Beddows amount out of range');\n    }\n    const lskAmountBigNum = beddowsAmountBigNum.div(constants_1.FIXED_POINT);\n    return lskAmountBigNum.toString(BASE_10);\n};\nexports.convertLSKToBeddows = (lskAmount) => {\n    if (typeof lskAmount !== 'string') {\n        throw new Error('Cannot convert non-string amount');\n    }\n    if (getDecimalPlaces(lskAmount) > LISK_MAX_DECIMAL_POINTS) {\n        throw new Error('LSK amount has too many decimal points');\n    }\n    const lskAmountBigNum = new BigNum(lskAmount);\n    const beddowsAmountBigNum = lskAmountBigNum.mul(constants_1.FIXED_POINT);\n    if (validation_1.isGreaterThanMaxTransactionAmount(beddowsAmountBigNum)) {\n        throw new Error('LSK amount out of range');\n    }\n    return beddowsAmountBigNum.toString();\n};\nexports.prependPlusToPublicKeys = (publicKeys) => publicKeys.map(publicKey => `+${publicKey}`);\nexports.prependMinusToPublicKeys = (publicKeys) => publicKeys.map(publicKey => `-${publicKey}`);\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"script"}