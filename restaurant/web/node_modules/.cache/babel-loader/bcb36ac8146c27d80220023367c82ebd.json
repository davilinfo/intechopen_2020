{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nconst base_transaction_1 = require(\"./base_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst errors_1 = require(\"./errors\");\n\nexports.delegateAssetFormatSchema = {\n  type: 'object',\n  required: ['username'],\n  properties: {\n    username: {\n      type: 'string',\n      minLength: 1,\n      maxLength: 20,\n      format: 'username'\n    }\n  }\n};\n\nclass DelegateTransaction extends base_transaction_1.BaseTransaction {\n  constructor(rawTransaction) {\n    super(rawTransaction);\n    const tx = typeof rawTransaction === 'object' && rawTransaction !== null ? rawTransaction : {};\n    this.asset = tx.asset || {\n      delegate: {}\n    };\n    this.containsUniqueData = true;\n  }\n\n  assetToBytes() {\n    const {\n      username\n    } = this.asset;\n    return Buffer.from(username, 'utf8');\n  }\n\n  async prepare(store) {\n    await store.account.cache([{\n      address: this.senderId\n    }, {\n      username: this.asset.username\n    }]);\n  }\n\n  verifyAgainstTransactions(transactions) {\n    return transactions.filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey).map(tx => new errors_1.TransactionError('Register delegate only allowed once per account.', tx.id, '.asset.delegate'));\n  }\n\n  validateAsset() {\n    const schemaErrors = lisk_validator_1.validator.validate(exports.delegateAssetFormatSchema, this.asset);\n    const errors = errors_1.convertToAssetError(this.id, schemaErrors);\n    return errors;\n  }\n\n  applyAsset(store) {\n    const errors = [];\n    const sender = store.account.get(this.senderId);\n    const usernameExists = store.account.find(account => account.username === this.asset.username);\n\n    if (usernameExists) {\n      errors.push(new errors_1.TransactionError(`Username is not unique.`, this.id, '.asset.username'));\n    }\n\n    if (sender.isDelegate || sender.username) {\n      errors.push(new errors_1.TransactionError('Account is already a delegate', this.id, '.asset.username'));\n    }\n\n    const updatedSender = { ...sender,\n      username: this.asset.username,\n      vote: 0,\n      isDelegate: 1\n    };\n    store.account.set(updatedSender.address, updatedSender);\n    return errors;\n  }\n\n  undoAsset(store) {\n    const sender = store.account.get(this.senderId);\n    const {\n      username,\n      ...strippedSender\n    } = sender;\n    const resetSender = { ...sender,\n      username: null,\n      vote: 0,\n      isDelegate: 0\n    };\n    store.account.set(strippedSender.address, resetSender);\n    return [];\n  }\n\n}\n\nexports.DelegateTransaction = DelegateTransaction;\nDelegateTransaction.TYPE = 10;\nDelegateTransaction.FEE = constants_1.DELEGATE_FEE.toString();","map":{"version":3,"sources":["../src/10_delegate_transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst base_transaction_1 = require(\"./base_transaction\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nexports.delegateAssetFormatSchema = {\n    type: 'object',\n    required: ['username'],\n    properties: {\n        username: {\n            type: 'string',\n            minLength: 1,\n            maxLength: 20,\n            format: 'username',\n        },\n    },\n};\nclass DelegateTransaction extends base_transaction_1.BaseTransaction {\n    constructor(rawTransaction) {\n        super(rawTransaction);\n        const tx = (typeof rawTransaction === 'object' && rawTransaction !== null\n            ? rawTransaction\n            : {});\n        this.asset = (tx.asset || { delegate: {} });\n        this.containsUniqueData = true;\n    }\n    assetToBytes() {\n        const { username } = this.asset;\n        return Buffer.from(username, 'utf8');\n    }\n    async prepare(store) {\n        await store.account.cache([\n            {\n                address: this.senderId,\n            },\n            {\n                username: this.asset.username,\n            },\n        ]);\n    }\n    verifyAgainstTransactions(transactions) {\n        return transactions\n            .filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey)\n            .map(tx => new errors_1.TransactionError('Register delegate only allowed once per account.', tx.id, '.asset.delegate'));\n    }\n    validateAsset() {\n        const schemaErrors = lisk_validator_1.validator.validate(exports.delegateAssetFormatSchema, this.asset);\n        const errors = errors_1.convertToAssetError(this.id, schemaErrors);\n        return errors;\n    }\n    applyAsset(store) {\n        const errors = [];\n        const sender = store.account.get(this.senderId);\n        const usernameExists = store.account.find((account) => account.username === this.asset.username);\n        if (usernameExists) {\n            errors.push(new errors_1.TransactionError(`Username is not unique.`, this.id, '.asset.username'));\n        }\n        if (sender.isDelegate || sender.username) {\n            errors.push(new errors_1.TransactionError('Account is already a delegate', this.id, '.asset.username'));\n        }\n        const updatedSender = {\n            ...sender,\n            username: this.asset.username,\n            vote: 0,\n            isDelegate: 1,\n        };\n        store.account.set(updatedSender.address, updatedSender);\n        return errors;\n    }\n    undoAsset(store) {\n        const sender = store.account.get(this.senderId);\n        const { username, ...strippedSender } = sender;\n        const resetSender = {\n            ...sender,\n            username: null,\n            vote: 0,\n            isDelegate: 0,\n        };\n        store.account.set(strippedSender.address, resetSender);\n        return [];\n    }\n}\nexports.DelegateTransaction = DelegateTransaction;\nDelegateTransaction.TYPE = 10;\nDelegateTransaction.FEE = constants_1.DELEGATE_FEE.toString();\n//# sourceMappingURL=10_delegate_transaction.js.map"]},"metadata":{},"sourceType":"script"}