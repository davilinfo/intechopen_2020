{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BigNum = require(\"@liskhq/bignum\");\n\nvar cryptography = require(\"@liskhq/lisk-cryptography\");\n\nvar constants_1 = require(\"../../constants\");\n\nexports.validatePublicKey = function (publicKey) {\n  var publicKeyBuffer = cryptography.hexToBuffer(publicKey);\n\n  if (publicKeyBuffer.length !== constants_1.MAX_PUBLIC_KEY_LENGTH) {\n    throw new Error(\"Public key \".concat(publicKey, \" length differs from the expected 32 bytes for a public key.\"));\n  }\n\n  return true;\n};\n\nexports.isNullByteIncluded = function (input) {\n  return new RegExp(\"\\\\0|\\\\U00000000\").test(input);\n};\n\nexports.validateUsername = function (username) {\n  if (exports.isNullByteIncluded(username)) {\n    return false;\n  }\n\n  if (username !== username.trim().toLowerCase()) {\n    return false;\n  }\n\n  if (/^[0-9]{1,21}[L|l]$/g.test(username)) {\n    return false;\n  }\n\n  if (!/^[a-z0-9!@$&_.]+$/g.test(username)) {\n    return false;\n  }\n\n  return true;\n};\n\nexports.validateSignature = function (signature) {\n  return /^[a-f0-9]{128}$/i.test(signature);\n};\n\nexports.checkPublicKeysForDuplicates = function (publicKeys) {\n  return publicKeys.every(function (element, index) {\n    if (publicKeys.slice(index + 1).includes(element)) {\n      throw new Error(\"Duplicated public key: \".concat(publicKeys[index], \".\"));\n    }\n\n    return true;\n  });\n};\n\nexports.stringEndsWith = function (target, suffixes) {\n  return suffixes.some(function (suffix) {\n    return target.endsWith(suffix);\n  });\n};\n\nexports.validatePublicKeys = function (publicKeys) {\n  return publicKeys.every(exports.validatePublicKey) && exports.checkPublicKeysForDuplicates(publicKeys);\n};\n\nexports.validateKeysgroup = function (keysgroup) {\n  if (keysgroup.length < constants_1.MULTISIGNATURE_MIN_KEYSGROUP || keysgroup.length > constants_1.MULTISIGNATURE_MAX_KEYSGROUP) {\n    throw new Error(\"Expected between \".concat(constants_1.MULTISIGNATURE_MIN_KEYSGROUP, \" and \").concat(constants_1.MULTISIGNATURE_MAX_KEYSGROUP, \" public keys in the keysgroup.\"));\n  }\n\n  return exports.validatePublicKeys(keysgroup);\n};\n\nvar MIN_ADDRESS_LENGTH = 2;\nvar MAX_ADDRESS_LENGTH = 22;\nvar BASE_TEN = 10;\n\nexports.validateAddress = function (address) {\n  if (address.length < MIN_ADDRESS_LENGTH || address.length > MAX_ADDRESS_LENGTH) {\n    throw new Error('Address length does not match requirements. Expected between 2 and 22 characters.');\n  }\n\n  if (address[address.length - 1] !== 'L') {\n    throw new Error('Address format does not match requirements. Expected \"L\" at the end.');\n  }\n\n  if (address.includes('.')) {\n    throw new Error('Address format does not match requirements. Address includes invalid character: `.`.');\n  }\n\n  var addressString = address.slice(0, -1);\n  var addressNumber = new BigNum(addressString);\n\n  if (addressNumber.cmp(new BigNum(constants_1.MAX_ADDRESS_NUMBER)) > 0) {\n    throw new Error('Address format does not match requirements. Address out of maximum range.');\n  }\n\n  if (addressString !== addressNumber.toString(BASE_TEN)) {\n    throw new Error(\"Address string format does not match it's number representation.\");\n  }\n\n  return true;\n};\n\nexports.isGreaterThanZero = function (amount) {\n  return amount.cmp(0) > 0;\n};\n\nexports.isGreaterThanOrEqualToZero = function (amount) {\n  return amount.cmp(0) >= 0;\n};\n\nexports.isGreaterThanMaxTransactionAmount = function (amount) {\n  return amount.cmp(constants_1.MAX_TRANSACTION_AMOUNT) > 0;\n};\n\nexports.isGreaterThanMaxTransactionId = function (id) {\n  return id.cmp(constants_1.MAX_TRANSACTION_ID) > 0;\n};\n\nexports.isNumberString = function (str) {\n  if (typeof str !== 'string') {\n    return false;\n  }\n\n  return /^[0-9]+$/g.test(str);\n};\n\nexports.validateNonTransferAmount = function (data) {\n  return exports.isNumberString(data) && data === '0';\n};\n\nexports.validateTransferAmount = function (data) {\n  return exports.isNumberString(data) && exports.isGreaterThanZero(new BigNum(data)) && !exports.isGreaterThanMaxTransactionAmount(new BigNum(data));\n};\n\nexports.isValidTransferData = function (data) {\n  return Buffer.byteLength(data, 'utf8') <= constants_1.MAX_TRANSFER_ASSET_DATA_LENGTH;\n};\n\nexports.validateFee = function (data) {\n  return exports.isNumberString(data) && exports.isGreaterThanOrEqualToZero(new BigNum(data)) && !exports.isGreaterThanMaxTransactionAmount(new BigNum(data));\n};\n\nexports.isValidInteger = function (num) {\n  return typeof num === 'number' ? Math.floor(num) === num : false;\n};\n\nexports.isUnique = function (values) {\n  var unique = _toConsumableArray(new Set(values));\n\n  return unique.length === values.length;\n};\n\nexports.isValidNumber = function (num) {\n  if (typeof num === 'number') {\n    return true;\n  }\n\n  if (typeof num === 'string') {\n    return exports.isNumberString(num);\n  }\n\n  return false;\n};","map":{"version":3,"sources":["../../../src/utils/validation/validation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BigNum = require(\"@liskhq/bignum\");\nconst cryptography = require(\"@liskhq/lisk-cryptography\");\nconst constants_1 = require(\"../../constants\");\nexports.validatePublicKey = (publicKey) => {\n    const publicKeyBuffer = cryptography.hexToBuffer(publicKey);\n    if (publicKeyBuffer.length !== constants_1.MAX_PUBLIC_KEY_LENGTH) {\n        throw new Error(`Public key ${publicKey} length differs from the expected 32 bytes for a public key.`);\n    }\n    return true;\n};\nexports.isNullByteIncluded = (input) => new RegExp('\\\\0|\\\\U00000000').test(input);\nexports.validateUsername = (username) => {\n    if (exports.isNullByteIncluded(username)) {\n        return false;\n    }\n    if (username !== username.trim().toLowerCase()) {\n        return false;\n    }\n    if (/^[0-9]{1,21}[L|l]$/g.test(username)) {\n        return false;\n    }\n    if (!/^[a-z0-9!@$&_.]+$/g.test(username)) {\n        return false;\n    }\n    return true;\n};\nexports.validateSignature = (signature) => /^[a-f0-9]{128}$/i.test(signature);\nexports.checkPublicKeysForDuplicates = (publicKeys) => publicKeys.every((element, index) => {\n    if (publicKeys.slice(index + 1).includes(element)) {\n        throw new Error(`Duplicated public key: ${publicKeys[index]}.`);\n    }\n    return true;\n});\nexports.stringEndsWith = (target, suffixes) => suffixes.some(suffix => target.endsWith(suffix));\nexports.validatePublicKeys = (publicKeys) => publicKeys.every(exports.validatePublicKey) &&\n    exports.checkPublicKeysForDuplicates(publicKeys);\nexports.validateKeysgroup = (keysgroup) => {\n    if (keysgroup.length < constants_1.MULTISIGNATURE_MIN_KEYSGROUP ||\n        keysgroup.length > constants_1.MULTISIGNATURE_MAX_KEYSGROUP) {\n        throw new Error(`Expected between ${constants_1.MULTISIGNATURE_MIN_KEYSGROUP} and ${constants_1.MULTISIGNATURE_MAX_KEYSGROUP} public keys in the keysgroup.`);\n    }\n    return exports.validatePublicKeys(keysgroup);\n};\nconst MIN_ADDRESS_LENGTH = 2;\nconst MAX_ADDRESS_LENGTH = 22;\nconst BASE_TEN = 10;\nexports.validateAddress = (address) => {\n    if (address.length < MIN_ADDRESS_LENGTH ||\n        address.length > MAX_ADDRESS_LENGTH) {\n        throw new Error('Address length does not match requirements. Expected between 2 and 22 characters.');\n    }\n    if (address[address.length - 1] !== 'L') {\n        throw new Error('Address format does not match requirements. Expected \"L\" at the end.');\n    }\n    if (address.includes('.')) {\n        throw new Error('Address format does not match requirements. Address includes invalid character: `.`.');\n    }\n    const addressString = address.slice(0, -1);\n    const addressNumber = new BigNum(addressString);\n    if (addressNumber.cmp(new BigNum(constants_1.MAX_ADDRESS_NUMBER)) > 0) {\n        throw new Error('Address format does not match requirements. Address out of maximum range.');\n    }\n    if (addressString !== addressNumber.toString(BASE_TEN)) {\n        throw new Error(\"Address string format does not match it's number representation.\");\n    }\n    return true;\n};\nexports.isGreaterThanZero = (amount) => amount.cmp(0) > 0;\nexports.isGreaterThanOrEqualToZero = (amount) => amount.cmp(0) >= 0;\nexports.isGreaterThanMaxTransactionAmount = (amount) => amount.cmp(constants_1.MAX_TRANSACTION_AMOUNT) > 0;\nexports.isGreaterThanMaxTransactionId = (id) => id.cmp(constants_1.MAX_TRANSACTION_ID) > 0;\nexports.isNumberString = (str) => {\n    if (typeof str !== 'string') {\n        return false;\n    }\n    return /^[0-9]+$/g.test(str);\n};\nexports.validateNonTransferAmount = (data) => exports.isNumberString(data) && data === '0';\nexports.validateTransferAmount = (data) => exports.isNumberString(data) &&\n    exports.isGreaterThanZero(new BigNum(data)) &&\n    !exports.isGreaterThanMaxTransactionAmount(new BigNum(data));\nexports.isValidTransferData = (data) => Buffer.byteLength(data, 'utf8') <= constants_1.MAX_TRANSFER_ASSET_DATA_LENGTH;\nexports.validateFee = (data) => exports.isNumberString(data) &&\n    exports.isGreaterThanOrEqualToZero(new BigNum(data)) &&\n    !exports.isGreaterThanMaxTransactionAmount(new BigNum(data));\nexports.isValidInteger = (num) => typeof num === 'number' ? Math.floor(num) === num : false;\nexports.isUnique = (values) => {\n    const unique = [...new Set(values)];\n    return unique.length === values.length;\n};\nexports.isValidNumber = (num) => {\n    if (typeof num === 'number') {\n        return true;\n    }\n    if (typeof num === 'string') {\n        return exports.isNumberString(num);\n    }\n    return false;\n};\n//# sourceMappingURL=validation.js.map"]},"metadata":{},"sourceType":"script"}