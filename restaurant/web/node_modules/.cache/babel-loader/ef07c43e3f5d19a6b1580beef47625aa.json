{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _5_dapp_transaction_1 = require(\"./5_dapp_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\");\n\nconst validateInputs = ({\n  options\n}) => {\n  if (typeof options !== 'object') {\n    throw new Error('Options must be an object.');\n  }\n\n  const {\n    category,\n    name,\n    type,\n    link,\n    description,\n    tags,\n    icon\n  } = options;\n\n  if (!utils_1.isValidInteger(category)) {\n    throw new Error('Dapp category must be an integer.');\n  }\n\n  if (typeof name !== 'string') {\n    throw new Error('Dapp name must be a string.');\n  }\n\n  if (!utils_1.isValidInteger(type)) {\n    throw new Error('Dapp type must be an integer.');\n  }\n\n  if (typeof link !== 'string') {\n    throw new Error('Dapp link must be a string.');\n  }\n\n  if (typeof description !== 'undefined' && typeof description !== 'string') {\n    throw new Error('Dapp description must be a string if provided.');\n  }\n\n  if (typeof tags !== 'undefined' && typeof tags !== 'string') {\n    throw new Error('Dapp tags must be a string if provided.');\n  }\n\n  if (typeof icon !== 'undefined' && typeof icon !== 'string') {\n    throw new Error('Dapp icon must be a string if provided.');\n  }\n};\n\nexports.createDapp = inputs => {\n  validateInputs(inputs);\n  const {\n    passphrase,\n    secondPassphrase,\n    options\n  } = inputs;\n  const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), {\n    type: 5,\n    fee: constants_1.DAPP_FEE.toString(),\n    asset: {\n      dapp: options\n    }\n  });\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  const transactionWithSenderInfo = Object.assign({}, transaction, {\n    senderId: transaction.senderId,\n    senderPublicKey: transaction.senderPublicKey\n  });\n  const dappTransaction = new _5_dapp_transaction_1.DappTransaction(transactionWithSenderInfo);\n  dappTransaction.sign(passphrase, secondPassphrase);\n  return dappTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/5_create_dapp.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,qBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAmBA,MAAM,cAAc,GAAG,CAAC;AAAE,EAAA;AAAF,CAAD,KAAkC;AACxD,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAChC,UAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACA;;AACD,QAAM;AAAE,IAAA,QAAF;AAAY,IAAA,IAAZ;AAAkB,IAAA,IAAlB;AAAwB,IAAA,IAAxB;AAA8B,IAAA,WAA9B;AAA2C,IAAA,IAA3C;AAAiD,IAAA;AAAjD,MAA0D,OAAhE;;AAEA,MAAI,CAAC,OAAA,CAAA,cAAA,CAAe,QAAf,CAAL,EAA+B;AAC9B,UAAM,IAAI,KAAJ,CAAU,mCAAV,CAAN;AACA;;AACD,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC7B,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACA;;AACD,MAAI,CAAC,OAAA,CAAA,cAAA,CAAe,IAAf,CAAL,EAA2B;AAC1B,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACA;;AACD,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC7B,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACA;;AAED,MAAI,OAAO,WAAP,KAAuB,WAAvB,IAAsC,OAAO,WAAP,KAAuB,QAAjE,EAA2E;AAC1E,UAAM,IAAI,KAAJ,CAAU,gDAAV,CAAN;AACA;;AAED,MAAI,OAAO,IAAP,KAAgB,WAAhB,IAA+B,OAAO,IAAP,KAAgB,QAAnD,EAA6D;AAC5D,UAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACA;;AAED,MAAI,OAAO,IAAP,KAAgB,WAAhB,IAA+B,OAAO,IAAP,KAAgB,QAAnD,EAA6D;AAC5D,UAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACA;AACD,CA9BD;;AAgCa,OAAA,CAAA,UAAA,GAAc,MAAD,IAAiD;AAC1E,EAAA,cAAc,CAAC,MAAD,CAAd;AACA,QAAM;AAAE,IAAA,UAAF;AAAc,IAAA,gBAAd;AAAgC,IAAA;AAAhC,MAA4C,MAAlD;AAEA,QAAM,WAAW,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACb,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CADa,EACgB;AAChC,IAAA,IAAI,EAAE,CAD0B;AAEhC,IAAA,GAAG,EAAE,WAAA,CAAA,QAAA,CAAS,QAAT,EAF2B;AAGhC,IAAA,KAAK,EAAE;AACN,MAAA,IAAI,EAAE;AADA;AAHyB,GADhB,CAAjB;;AASA,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,WAAP;AACA;;AAED,QAAM,yBAAyB,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAC3B,WAD2B,EAChB;AACd,IAAA,QAAQ,EAAE,WAAW,CAAC,QADR;AAEd,IAAA,eAAe,EAAE,WAAW,CAAC;AAFf,GADgB,CAA/B;AAMA,QAAM,eAAe,GAAG,IAAI,qBAAA,CAAA,eAAJ,CAAoB,yBAApB,CAAxB;AACA,EAAA,eAAe,CAAC,IAAhB,CAAqB,UAArB,EAAiC,gBAAjC;AAEA,SAAO,eAAe,CAAC,MAAhB,EAAP;AACA,CA3BY","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst _5_dapp_transaction_1 = require(\"./5_dapp_transaction\");\r\nconst constants_1 = require(\"./constants\");\r\nconst utils_1 = require(\"./utils\");\r\nconst validateInputs = ({ options }) => {\r\n    if (typeof options !== 'object') {\r\n        throw new Error('Options must be an object.');\r\n    }\r\n    const { category, name, type, link, description, tags, icon } = options;\r\n    if (!utils_1.isValidInteger(category)) {\r\n        throw new Error('Dapp category must be an integer.');\r\n    }\r\n    if (typeof name !== 'string') {\r\n        throw new Error('Dapp name must be a string.');\r\n    }\r\n    if (!utils_1.isValidInteger(type)) {\r\n        throw new Error('Dapp type must be an integer.');\r\n    }\r\n    if (typeof link !== 'string') {\r\n        throw new Error('Dapp link must be a string.');\r\n    }\r\n    if (typeof description !== 'undefined' && typeof description !== 'string') {\r\n        throw new Error('Dapp description must be a string if provided.');\r\n    }\r\n    if (typeof tags !== 'undefined' && typeof tags !== 'string') {\r\n        throw new Error('Dapp tags must be a string if provided.');\r\n    }\r\n    if (typeof icon !== 'undefined' && typeof icon !== 'string') {\r\n        throw new Error('Dapp icon must be a string if provided.');\r\n    }\r\n};\r\nexports.createDapp = (inputs) => {\r\n    validateInputs(inputs);\r\n    const { passphrase, secondPassphrase, options } = inputs;\r\n    const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 5, fee: constants_1.DAPP_FEE.toString(), asset: {\r\n            dapp: options,\r\n        } });\r\n    if (!passphrase) {\r\n        return transaction;\r\n    }\r\n    const transactionWithSenderInfo = Object.assign({}, transaction, { senderId: transaction.senderId, senderPublicKey: transaction.senderPublicKey });\r\n    const dappTransaction = new _5_dapp_transaction_1.DappTransaction(transactionWithSenderInfo);\r\n    dappTransaction.sign(passphrase, secondPassphrase);\r\n    return dappTransaction.toJSON();\r\n};\r\n//# sourceMappingURL=5_create_dapp.js.map"]},"metadata":{},"sourceType":"script"}