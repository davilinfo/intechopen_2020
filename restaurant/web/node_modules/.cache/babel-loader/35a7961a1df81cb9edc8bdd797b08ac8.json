{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst base_transaction_1 = require(\"./base_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst errors_1 = require(\"./errors\");\n\nconst validation_1 = require(\"./utils/validation\");\n\nexports.dappAssetFormatSchema = {\n  type: 'object',\n  required: ['dapp'],\n  properties: {\n    dapp: {\n      type: 'object',\n      required: ['name', 'type', 'category'],\n      properties: {\n        icon: {\n          type: 'string',\n          format: 'uri',\n          maxLength: 2000\n        },\n        category: {\n          type: 'integer',\n          minimum: 0,\n          maximum: 8\n        },\n        type: {\n          type: 'integer',\n          minimum: 0,\n          maximum: 1\n        },\n        link: {\n          type: 'string',\n          format: 'uri',\n          minLength: 0,\n          maxLength: 2000\n        },\n        tags: {\n          type: 'string',\n          format: 'noNullByte',\n          maxLength: 160\n        },\n        description: {\n          type: 'string',\n          format: 'noNullByte',\n          maxLength: 160\n        },\n        name: {\n          type: 'string',\n          format: 'noNullByte',\n          minLength: 1,\n          maxLength: 32\n        }\n      }\n    }\n  }\n};\n\nclass DappTransaction extends base_transaction_1.BaseTransaction {\n  constructor(rawTransaction) {\n    super(rawTransaction);\n    const tx = typeof rawTransaction === 'object' && rawTransaction !== null ? rawTransaction : {};\n    this.asset = tx.asset || {\n      dapp: {}\n    };\n    this.containsUniqueData = true;\n\n    if (this.asset && this.asset.dapp && typeof this.asset.dapp === 'object') {\n      this.asset.dapp.description = this.asset.dapp.description || undefined;\n      this.asset.dapp.icon = this.asset.dapp.icon || undefined;\n      this.asset.dapp.tags = this.asset.dapp.tags || undefined;\n    }\n  }\n\n  assetToBytes() {\n    const DAPP_TYPE_LENGTH = 4;\n    const DAPP_CATEGORY_LENGTH = 4;\n    const {\n      name,\n      description,\n      tags,\n      link,\n      icon,\n      type,\n      category\n    } = this.asset.dapp;\n    const nameBuffer = Buffer.from(name, 'utf8');\n    const linkBuffer = link ? Buffer.from(link, 'utf8') : Buffer.alloc(0);\n    const typeBuffer = Buffer.alloc(DAPP_TYPE_LENGTH);\n    typeBuffer.writeIntLE(type, 0, DAPP_TYPE_LENGTH);\n    const categoryBuffer = Buffer.alloc(DAPP_CATEGORY_LENGTH);\n    categoryBuffer.writeIntLE(category, 0, DAPP_CATEGORY_LENGTH);\n    const descriptionBuffer = description ? Buffer.from(description, 'utf8') : Buffer.alloc(0);\n    const tagsBuffer = tags ? Buffer.from(tags, 'utf8') : Buffer.alloc(0);\n    const iconBuffer = icon ? Buffer.from(icon, 'utf8') : Buffer.alloc(0);\n    return Buffer.concat([nameBuffer, descriptionBuffer, tagsBuffer, linkBuffer, iconBuffer, typeBuffer, categoryBuffer]);\n  }\n\n  async prepare(store) {\n    await store.account.cache([{\n      address: this.senderId\n    }]);\n    await store.transaction.cache([{\n      dapp_name: this.asset.dapp.name\n    }, {\n      dapp_link: this.asset.dapp.link\n    }]);\n  }\n\n  verifyAgainstTransactions(transactions) {\n    const sameTypeTransactions = transactions.filter(tx => tx.type === this.type);\n    const errors = sameTypeTransactions.filter(tx => 'dapp' in tx.asset && tx.asset.dapp.name === this.asset.dapp.name).length > 0 ? [new errors_1.TransactionError('Dapp with the same name already exists.', this.id, '.asset.dapp.name', this.asset.dapp.name)] : [];\n\n    if (sameTypeTransactions.filter(tx => 'dapp' in tx.asset && this.asset.dapp.link && this.asset.dapp.link === tx.asset.dapp.link).length > 0) {\n      errors.push(new errors_1.TransactionError('Dapp with the same link already exists.', this.id, '.asset.dapp.link', this.asset.dapp.link));\n    }\n\n    return errors;\n  }\n\n  validateAsset() {\n    validation_1.validator.validate(exports.dappAssetFormatSchema, this.asset);\n    const errors = errors_1.convertToAssetError(this.id, validation_1.validator.errors);\n\n    if (!this.amount.eq(0)) {\n      errors.push(new errors_1.TransactionError('Amount must be zero for dapp transaction', this.id, '.amount', this.amount.toString(), '0'));\n    }\n\n    if (this.recipientId) {\n      errors.push(new errors_1.TransactionError(`RecipientId is expected to be undefined`, this.id, '.recipientId'));\n    }\n\n    const validLinkSuffix = ['.zip'];\n\n    if (errors.length > 0) {\n      return errors;\n    }\n\n    if (this.asset.dapp.link && !validation_1.stringEndsWith(this.asset.dapp.link, validLinkSuffix)) {\n      errors.push(new errors_1.TransactionError(`Dapp icon must have suffix ${validLinkSuffix.toString()}`, this.id, '.asset.dapp.link', this.asset.dapp.link));\n    }\n\n    const validIconSuffix = ['.png', '.jpeg', '.jpg'];\n\n    if (this.asset.dapp.icon && !validation_1.stringEndsWith(this.asset.dapp.icon, validIconSuffix)) {\n      errors.push(new errors_1.TransactionError(`Dapp icon must have suffix of one of ${validIconSuffix.toString()}`, this.id, '.asset.dapp.icon', this.asset.dapp.icon));\n    }\n\n    if (this.asset.dapp.tags) {\n      const tags = this.asset.dapp.tags.split(',').map(tag => tag.trim()).sort();\n\n      if (tags.length !== new Set(tags).size) {\n        errors.push(new errors_1.TransactionError(`Dapp tags must have unique set`, this.id, '.asset.dapp.tags', this.asset.dapp.tags));\n      }\n    }\n\n    return errors;\n  }\n\n  applyAsset(store) {\n    const errors = [];\n    const nameExists = store.transaction.find(transaction => transaction.type === DappTransaction.TYPE && transaction.id !== this.id && transaction.asset.dapp && transaction.asset.dapp.name === this.asset.dapp.name);\n\n    if (nameExists) {\n      errors.push(new errors_1.TransactionError(`Application name already exists: ${this.asset.dapp.name}`, this.id, this.asset.dapp.name));\n    }\n\n    const linkExists = store.transaction.find(transaction => transaction.type === DappTransaction.TYPE && transaction.id !== this.id && transaction.asset.dapp && transaction.asset.dapp.link === this.asset.dapp.link);\n\n    if (linkExists) {\n      errors.push(new errors_1.TransactionError(`Application link already exists: ${this.asset.dapp.link}`, this.id, this.asset.dapp.link));\n    }\n\n    return errors;\n  }\n\n  undoAsset(_) {\n    return [];\n  }\n\n  assetFromSync(raw) {\n    if (!raw.dapp_name) {\n      return undefined;\n    }\n\n    const dapp = {\n      name: raw.dapp_name,\n      description: raw.dapp_description,\n      tags: raw.dapp_tags,\n      type: raw.dapp_type,\n      link: raw.dapp_link,\n      category: raw.dapp_category,\n      icon: raw.dapp_icon\n    };\n    return {\n      dapp\n    };\n  }\n\n}\n\nDappTransaction.TYPE = 5;\nDappTransaction.FEE = constants_1.DAPP_FEE.toString();\nexports.DappTransaction = DappTransaction;","map":{"version":3,"sources":["../src/5_dapp_transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_transaction_1 = require(\"./base_transaction\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst validation_1 = require(\"./utils/validation\");\nexports.dappAssetFormatSchema = {\n    type: 'object',\n    required: ['dapp'],\n    properties: {\n        dapp: {\n            type: 'object',\n            required: ['name', 'type', 'category'],\n            properties: {\n                icon: {\n                    type: 'string',\n                    format: 'uri',\n                    maxLength: 2000,\n                },\n                category: {\n                    type: 'integer',\n                    minimum: 0,\n                    maximum: 8,\n                },\n                type: {\n                    type: 'integer',\n                    minimum: 0,\n                    maximum: 1,\n                },\n                link: {\n                    type: 'string',\n                    format: 'uri',\n                    minLength: 0,\n                    maxLength: 2000,\n                },\n                tags: {\n                    type: 'string',\n                    format: 'noNullByte',\n                    maxLength: 160,\n                },\n                description: {\n                    type: 'string',\n                    format: 'noNullByte',\n                    maxLength: 160,\n                },\n                name: {\n                    type: 'string',\n                    format: 'noNullByte',\n                    minLength: 1,\n                    maxLength: 32,\n                },\n            },\n        },\n    },\n};\nclass DappTransaction extends base_transaction_1.BaseTransaction {\n    constructor(rawTransaction) {\n        super(rawTransaction);\n        const tx = (typeof rawTransaction === 'object' && rawTransaction !== null\n            ? rawTransaction\n            : {});\n        this.asset = (tx.asset || { dapp: {} });\n        this.containsUniqueData = true;\n        if (this.asset && this.asset.dapp && typeof this.asset.dapp === 'object') {\n            this.asset.dapp.description = this.asset.dapp.description || undefined;\n            this.asset.dapp.icon = this.asset.dapp.icon || undefined;\n            this.asset.dapp.tags = this.asset.dapp.tags || undefined;\n        }\n    }\n    assetToBytes() {\n        const DAPP_TYPE_LENGTH = 4;\n        const DAPP_CATEGORY_LENGTH = 4;\n        const { name, description, tags, link, icon, type, category, } = this.asset.dapp;\n        const nameBuffer = Buffer.from(name, 'utf8');\n        const linkBuffer = link ? Buffer.from(link, 'utf8') : Buffer.alloc(0);\n        const typeBuffer = Buffer.alloc(DAPP_TYPE_LENGTH);\n        typeBuffer.writeIntLE(type, 0, DAPP_TYPE_LENGTH);\n        const categoryBuffer = Buffer.alloc(DAPP_CATEGORY_LENGTH);\n        categoryBuffer.writeIntLE(category, 0, DAPP_CATEGORY_LENGTH);\n        const descriptionBuffer = description\n            ? Buffer.from(description, 'utf8')\n            : Buffer.alloc(0);\n        const tagsBuffer = tags ? Buffer.from(tags, 'utf8') : Buffer.alloc(0);\n        const iconBuffer = icon ? Buffer.from(icon, 'utf8') : Buffer.alloc(0);\n        return Buffer.concat([\n            nameBuffer,\n            descriptionBuffer,\n            tagsBuffer,\n            linkBuffer,\n            iconBuffer,\n            typeBuffer,\n            categoryBuffer,\n        ]);\n    }\n    async prepare(store) {\n        await store.account.cache([\n            {\n                address: this.senderId,\n            },\n        ]);\n        await store.transaction.cache([\n            {\n                dapp_name: this.asset.dapp.name,\n            },\n            { dapp_link: this.asset.dapp.link },\n        ]);\n    }\n    verifyAgainstTransactions(transactions) {\n        const sameTypeTransactions = transactions.filter(tx => tx.type === this.type);\n        const errors = sameTypeTransactions.filter(tx => 'dapp' in tx.asset &&\n            tx.asset.dapp.name === this.asset.dapp.name).length > 0\n            ? [\n                new errors_1.TransactionError('Dapp with the same name already exists.', this.id, '.asset.dapp.name', this.asset.dapp.name),\n            ]\n            : [];\n        if (sameTypeTransactions.filter(tx => 'dapp' in tx.asset &&\n            this.asset.dapp.link &&\n            this.asset.dapp.link === tx.asset.dapp.link).length > 0) {\n            errors.push(new errors_1.TransactionError('Dapp with the same link already exists.', this.id, '.asset.dapp.link', this.asset.dapp.link));\n        }\n        return errors;\n    }\n    validateAsset() {\n        validation_1.validator.validate(exports.dappAssetFormatSchema, this.asset);\n        const errors = errors_1.convertToAssetError(this.id, validation_1.validator.errors);\n        if (!this.amount.eq(0)) {\n            errors.push(new errors_1.TransactionError('Amount must be zero for dapp transaction', this.id, '.amount', this.amount.toString(), '0'));\n        }\n        if (this.recipientId) {\n            errors.push(new errors_1.TransactionError(`RecipientId is expected to be undefined`, this.id, '.recipientId'));\n        }\n        const validLinkSuffix = ['.zip'];\n        if (errors.length > 0) {\n            return errors;\n        }\n        if (this.asset.dapp.link &&\n            !validation_1.stringEndsWith(this.asset.dapp.link, validLinkSuffix)) {\n            errors.push(new errors_1.TransactionError(`Dapp icon must have suffix ${validLinkSuffix.toString()}`, this.id, '.asset.dapp.link', this.asset.dapp.link));\n        }\n        const validIconSuffix = ['.png', '.jpeg', '.jpg'];\n        if (this.asset.dapp.icon &&\n            !validation_1.stringEndsWith(this.asset.dapp.icon, validIconSuffix)) {\n            errors.push(new errors_1.TransactionError(`Dapp icon must have suffix of one of ${validIconSuffix.toString()}`, this.id, '.asset.dapp.icon', this.asset.dapp.icon));\n        }\n        if (this.asset.dapp.tags) {\n            const tags = this.asset.dapp.tags\n                .split(',')\n                .map(tag => tag.trim())\n                .sort();\n            if (tags.length !== new Set(tags).size) {\n                errors.push(new errors_1.TransactionError(`Dapp tags must have unique set`, this.id, '.asset.dapp.tags', this.asset.dapp.tags));\n            }\n        }\n        return errors;\n    }\n    applyAsset(store) {\n        const errors = [];\n        const nameExists = store.transaction.find((transaction) => transaction.type === DappTransaction.TYPE &&\n            transaction.id !== this.id &&\n            transaction.asset.dapp &&\n            transaction.asset.dapp.name === this.asset.dapp.name);\n        if (nameExists) {\n            errors.push(new errors_1.TransactionError(`Application name already exists: ${this.asset.dapp.name}`, this.id, this.asset.dapp.name));\n        }\n        const linkExists = store.transaction.find((transaction) => transaction.type === DappTransaction.TYPE &&\n            transaction.id !== this.id &&\n            transaction.asset.dapp &&\n            transaction.asset.dapp.link === this.asset.dapp.link);\n        if (linkExists) {\n            errors.push(new errors_1.TransactionError(`Application link already exists: ${this.asset.dapp.link}`, this.id, this.asset.dapp.link));\n        }\n        return errors;\n    }\n    undoAsset(_) {\n        return [];\n    }\n    assetFromSync(raw) {\n        if (!raw.dapp_name) {\n            return undefined;\n        }\n        const dapp = {\n            name: raw.dapp_name,\n            description: raw.dapp_description,\n            tags: raw.dapp_tags,\n            type: raw.dapp_type,\n            link: raw.dapp_link,\n            category: raw.dapp_category,\n            icon: raw.dapp_icon,\n        };\n        return { dapp };\n    }\n}\nDappTransaction.TYPE = 5;\nDappTransaction.FEE = constants_1.DAPP_FEE.toString();\nexports.DappTransaction = DappTransaction;\n//# sourceMappingURL=5_dapp_transaction.js.map"]},"metadata":{},"sourceType":"script"}