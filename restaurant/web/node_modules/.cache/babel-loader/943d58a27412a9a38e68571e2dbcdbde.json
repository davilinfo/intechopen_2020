{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _4_multisignature_transaction_1 = require(\"./4_multisignature_transaction\");\n\nvar constants_1 = require(\"./constants\");\n\nvar utils_1 = require(\"./utils\");\n\nvar validateInputs = function validateInputs(_ref) {\n  var keysgroup = _ref.keysgroup,\n      lifetime = _ref.lifetime,\n      minimum = _ref.minimum;\n\n  if (!utils_1.isValidInteger(lifetime) || lifetime < constants_1.MULTISIGNATURE_MIN_LIFETIME || lifetime > constants_1.MULTISIGNATURE_MAX_LIFETIME) {\n    throw new Error(\"Please provide a valid lifetime value. Expected integer between \".concat(constants_1.MULTISIGNATURE_MIN_LIFETIME, \" and \").concat(constants_1.MULTISIGNATURE_MAX_LIFETIME, \".\"));\n  }\n\n  if (!utils_1.isValidInteger(minimum) || minimum < constants_1.MULTISIGNATURE_MIN_KEYSGROUP || minimum > constants_1.MULTISIGNATURE_MAX_KEYSGROUP) {\n    throw new Error(\"Please provide a valid minimum value. Expected integer between \".concat(constants_1.MULTISIGNATURE_MIN_KEYSGROUP, \" and \").concat(constants_1.MULTISIGNATURE_MAX_KEYSGROUP, \".\"));\n  }\n\n  if (keysgroup.length < minimum) {\n    throw new Error('Minimum number of signatures is larger than the number of keys in the keysgroup.');\n  }\n\n  utils_1.validateKeysgroup(keysgroup);\n};\n\nexports.registerMultisignature = function (inputs) {\n  validateInputs(inputs);\n  var keysgroup = inputs.keysgroup,\n      lifetime = inputs.lifetime,\n      minimum = inputs.minimum,\n      passphrase = inputs.passphrase,\n      secondPassphrase = inputs.secondPassphrase;\n  var plusPrependedKeysgroup = utils_1.prependPlusToPublicKeys(keysgroup);\n  var keygroupFees = plusPrependedKeysgroup.length + 1;\n  var transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), {\n    type: 4,\n    fee: (constants_1.MULTISIGNATURE_FEE * keygroupFees).toString(),\n    asset: {\n      multisignature: {\n        min: minimum,\n        lifetime: lifetime,\n        keysgroup: plusPrependedKeysgroup\n      }\n    }\n  });\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  var multisignatureTransaction = new _4_multisignature_transaction_1.MultisignatureTransaction(transaction);\n  multisignatureTransaction.sign(passphrase, secondPassphrase);\n  return multisignatureTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/4_register_multisignature_account.ts"],"names":[],"mappings":";;;;;;AAcA,IAAA,+BAAA,GAAA,OAAA,CAAA,gCAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAQA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAgBA,IAAM,cAAc,GAAG,SAAjB,cAAiB,OAQZ;AAAA,MAPV,SAOU,QAPV,SAOU;AAAA,MANV,QAMU,QANV,QAMU;AAAA,MALV,OAKU,QALV,OAKU;;AACV,MACC,CAAC,OAAA,CAAA,cAAA,CAAe,QAAf,CAAD,IACA,QAAQ,GAAG,WAAA,CAAA,2BADX,IAEA,QAAQ,GAAG,WAAA,CAAA,2BAHZ,EAIE;AACD,UAAM,IAAI,KAAJ,2EAC8D,WAAA,CAAA,2BAD9D,kBACiG,WAAA,CAAA,2BADjG,OAAN;AAGA;;AAED,MACC,CAAC,OAAA,CAAA,cAAA,CAAe,OAAf,CAAD,IACA,OAAO,GAAG,WAAA,CAAA,4BADV,IAEA,OAAO,GAAG,WAAA,CAAA,4BAHX,EAIE;AACD,UAAM,IAAI,KAAJ,0EAC6D,WAAA,CAAA,4BAD7D,kBACiG,WAAA,CAAA,4BADjG,OAAN;AAGA;;AAED,MAAI,SAAS,CAAC,MAAV,GAAmB,OAAvB,EAAgC;AAC/B,UAAM,IAAI,KAAJ,CACL,kFADK,CAAN;AAGA;;AACD,EAAA,OAAA,CAAA,iBAAA,CAAkB,SAAlB;AACA,CAnCD;;AAqCa,OAAA,CAAA,sBAAA,GAAyB,UACrC,MADqC,EAER;AAC7B,EAAA,cAAc,CAAC,MAAD,CAAd;AAD6B,MAErB,SAFqB,GAE0C,MAF1C,CAErB,SAFqB;AAAA,MAEV,QAFU,GAE0C,MAF1C,CAEV,QAFU;AAAA,MAEA,OAFA,GAE0C,MAF1C,CAEA,OAFA;AAAA,MAES,UAFT,GAE0C,MAF1C,CAES,UAFT;AAAA,MAEqB,gBAFrB,GAE0C,MAF1C,CAEqB,gBAFrB;AAI7B,MAAM,sBAAsB,GAAG,OAAA,CAAA,uBAAA,CAAwB,SAAxB,CAA/B;AACA,MAAM,YAAY,GAAG,sBAAsB,CAAC,MAAvB,GAAgC,CAArD;AAEA,MAAM,WAAW,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACb,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CADa,EACgB;AAChC,IAAA,IAAI,EAAE,CAD0B;AAEhC,IAAA,GAAG,EAAE,CAAC,WAAA,CAAA,kBAAA,GAAqB,YAAtB,EAAoC,QAApC,EAF2B;AAGhC,IAAA,KAAK,EAAE;AACN,MAAA,cAAc,EAAE;AACf,QAAA,GAAG,EAAE,OADU;AAEf,QAAA,QAAQ,EAAR,QAFe;AAGf,QAAA,SAAS,EAAE;AAHI;AADV;AAHyB,GADhB,CAAjB;;AAaA,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,WAAP;AACA;;AAED,MAAM,yBAAyB,GAAG,IAAI,+BAAA,CAAA,yBAAJ,CACjC,WADiC,CAAlC;AAGA,EAAA,yBAAyB,CAAC,IAA1B,CAA+B,UAA/B,EAA2C,gBAA3C;AAEA,SAAO,yBAAyB,CAAC,MAA1B,EAAP;AACA,CAhCY","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst _4_multisignature_transaction_1 = require(\"./4_multisignature_transaction\");\r\nconst constants_1 = require(\"./constants\");\r\nconst utils_1 = require(\"./utils\");\r\nconst validateInputs = ({ keysgroup, lifetime, minimum, }) => {\r\n    if (!utils_1.isValidInteger(lifetime) ||\r\n        lifetime < constants_1.MULTISIGNATURE_MIN_LIFETIME ||\r\n        lifetime > constants_1.MULTISIGNATURE_MAX_LIFETIME) {\r\n        throw new Error(`Please provide a valid lifetime value. Expected integer between ${constants_1.MULTISIGNATURE_MIN_LIFETIME} and ${constants_1.MULTISIGNATURE_MAX_LIFETIME}.`);\r\n    }\r\n    if (!utils_1.isValidInteger(minimum) ||\r\n        minimum < constants_1.MULTISIGNATURE_MIN_KEYSGROUP ||\r\n        minimum > constants_1.MULTISIGNATURE_MAX_KEYSGROUP) {\r\n        throw new Error(`Please provide a valid minimum value. Expected integer between ${constants_1.MULTISIGNATURE_MIN_KEYSGROUP} and ${constants_1.MULTISIGNATURE_MAX_KEYSGROUP}.`);\r\n    }\r\n    if (keysgroup.length < minimum) {\r\n        throw new Error('Minimum number of signatures is larger than the number of keys in the keysgroup.');\r\n    }\r\n    utils_1.validateKeysgroup(keysgroup);\r\n};\r\nexports.registerMultisignature = (inputs) => {\r\n    validateInputs(inputs);\r\n    const { keysgroup, lifetime, minimum, passphrase, secondPassphrase } = inputs;\r\n    const plusPrependedKeysgroup = utils_1.prependPlusToPublicKeys(keysgroup);\r\n    const keygroupFees = plusPrependedKeysgroup.length + 1;\r\n    const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { type: 4, fee: (constants_1.MULTISIGNATURE_FEE * keygroupFees).toString(), asset: {\r\n            multisignature: {\r\n                min: minimum,\r\n                lifetime,\r\n                keysgroup: plusPrependedKeysgroup,\r\n            },\r\n        } });\r\n    if (!passphrase) {\r\n        return transaction;\r\n    }\r\n    const multisignatureTransaction = new _4_multisignature_transaction_1.MultisignatureTransaction(transaction);\r\n    multisignatureTransaction.sign(passphrase, secondPassphrase);\r\n    return multisignatureTransaction.toJSON();\r\n};\r\n//# sourceMappingURL=4_register_multisignature_account.js.map"]},"metadata":{},"sourceType":"script"}