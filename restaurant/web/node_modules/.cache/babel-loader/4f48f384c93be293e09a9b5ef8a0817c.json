{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cryptography = require(\"@liskhq/lisk-cryptography\");\n\nconst sign_and_validate_1 = require(\"./sign_and_validate\");\n\nconst time_1 = require(\"./time\");\n\nconst transaction_id_1 = require(\"./transaction_id\");\n\nconst validTransaction = partial => partial.type !== undefined;\n\nexports.prepareTransaction = (partialTransaction, passphrase, secondPassphrase, timeOffset) => {\n  const senderPublicKey = passphrase ? cryptography.getKeys(passphrase).publicKey : undefined;\n  const timestamp = time_1.getTimeWithOffset(timeOffset);\n  const transaction = Object.assign({\n    amount: '0',\n    recipientId: '',\n    senderPublicKey,\n    timestamp\n  }, partialTransaction);\n\n  if (!validTransaction(transaction)) {\n    throw new Error('Invalid transaction to process');\n  }\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  const singleSignedTransaction = Object.assign({}, transaction, {\n    signature: sign_and_validate_1.signTransaction(transaction, passphrase)\n  });\n  const signedTransaction = typeof secondPassphrase === 'string' && transaction.type !== 1 ? sign_and_validate_1.secondSignTransaction(singleSignedTransaction, secondPassphrase) : singleSignedTransaction;\n  const transactionWithId = Object.assign({}, signedTransaction, {\n    id: transaction_id_1.getTransactionId(signedTransaction)\n  });\n  return transactionWithId;\n};","map":{"version":3,"sources":["../../src/utils/prepare_transaction.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,YAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAEA,MAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAGA,MAAM,gBAAgB,GACrB,OADwB,IAEQ,OAAO,CAAC,IAAR,KAAiB,SAFlD;;AAKa,OAAA,CAAA,kBAAA,GAAqB,CACjC,kBADiC,EAEjC,UAFiC,EAGjC,gBAHiC,EAIjC,UAJiC,KAKb;AACpB,QAAM,eAAe,GAAG,UAAU,GAC/B,YAAY,CAAC,OAAb,CAAqB,UAArB,EAAiC,SADF,GAE/B,SAFH;AAGA,QAAM,SAAS,GAAG,MAAA,CAAA,iBAAA,CAAkB,UAAlB,CAAlB;AAEA,QAAM,WAAW,GAAA,MAAA,CAAA,MAAA,CAAA;AAChB,IAAA,MAAM,EAAE,GADQ;AAEhB,IAAA,WAAW,EAAE,EAFG;AAGhB,IAAA,eAHgB;AAIhB,IAAA;AAJgB,GAAA,EAKb,kBALa,CAAjB;;AAQA,MAAI,CAAC,gBAAgB,CAAC,WAAD,CAArB,EAAoC;AACnC,UAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACA;;AAED,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,WAAP;AACA;;AAED,QAAM,uBAAuB,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACzB,WADyB,EACd;AACd,IAAA,SAAS,EAAE,mBAAA,CAAA,eAAA,CAAgB,WAAhB,EAA6B,UAA7B;AADG,GADc,CAA7B;AAKA,QAAM,iBAAiB,GACtB,OAAO,gBAAP,KAA4B,QAA5B,IAAwC,WAAW,CAAC,IAAZ,KAAqB,CAA7D,GACG,mBAAA,CAAA,qBAAA,CAAsB,uBAAtB,EAA+C,gBAA/C,CADH,GAEG,uBAHJ;AAKA,QAAM,iBAAiB,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACnB,iBADmB,EACF;AACpB,IAAA,EAAE,EAAE,gBAAA,CAAA,gBAAA,CAAiB,iBAAjB;AADgB,GADE,CAAvB;AAKA,SAAO,iBAAP;AACA,CA3CY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cryptography = require(\"@liskhq/lisk-cryptography\");\nconst sign_and_validate_1 = require(\"./sign_and_validate\");\nconst time_1 = require(\"./time\");\nconst transaction_id_1 = require(\"./transaction_id\");\nconst validTransaction = (partial) => partial.type !== undefined;\nexports.prepareTransaction = (partialTransaction, passphrase, secondPassphrase, timeOffset) => {\n    const senderPublicKey = passphrase\n        ? cryptography.getKeys(passphrase).publicKey\n        : undefined;\n    const timestamp = time_1.getTimeWithOffset(timeOffset);\n    const transaction = Object.assign({ amount: '0', recipientId: '', senderPublicKey,\n        timestamp }, partialTransaction);\n    if (!validTransaction(transaction)) {\n        throw new Error('Invalid transaction to process');\n    }\n    if (!passphrase) {\n        return transaction;\n    }\n    const singleSignedTransaction = Object.assign({}, transaction, { signature: sign_and_validate_1.signTransaction(transaction, passphrase) });\n    const signedTransaction = typeof secondPassphrase === 'string' && transaction.type !== 1\n        ? sign_and_validate_1.secondSignTransaction(singleSignedTransaction, secondPassphrase)\n        : singleSignedTransaction;\n    const transactionWithId = Object.assign({}, signedTransaction, { id: transaction_id_1.getTransactionId(signedTransaction) });\n    return transactionWithId;\n};\n//# sourceMappingURL=prepare_transaction.js.map"]},"metadata":{},"sourceType":"script"}