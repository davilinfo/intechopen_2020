{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst crypto = require(\"crypto\");\n\nconst buffer_1 = require(\"./buffer\");\n\nconst cryptoHashSha256 = data => {\n  const dataHash = crypto.createHash('sha256');\n  dataHash.update(data);\n  return dataHash.digest();\n};\n\nexports.hash = (data, format) => {\n  if (Buffer.isBuffer(data)) {\n    return cryptoHashSha256(data);\n  }\n\n  if (typeof data === 'string' && typeof format === 'string') {\n    if (!['utf8', 'hex'].includes(format)) {\n      throw new Error('Unsupported string format. Currently only `hex` and `utf8` are supported.');\n    }\n\n    const encoded = format === 'utf8' ? Buffer.from(data, 'utf8') : buffer_1.hexToBuffer(data);\n    return cryptoHashSha256(encoded);\n  }\n\n  throw new Error('Unsupported data format. Currently only Buffers or `hex` and `utf8` strings are supported.');\n};","map":{"version":3,"sources":["../src/hash.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAM,gBAAgB,GAAI,IAAD,IAAyB;AACjD,QAAM,QAAQ,GAAG,MAAM,CAAC,UAAP,CAAkB,QAAlB,CAAjB;AACA,EAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB;AAEA,SAAO,QAAQ,CAAC,MAAT,EAAP;AACA,CALD;;AAOa,OAAA,CAAA,IAAA,GAAO,CAAC,IAAD,EAAwB,MAAxB,KAAmD;AACtE,MAAI,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAJ,EAA2B;AAC1B,WAAO,gBAAgB,CAAC,IAAD,CAAvB;AACA;;AAED,MAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,OAAO,MAAP,KAAkB,QAAlD,EAA4D;AAC3D,QAAI,CAAC,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAhB,CAAyB,MAAzB,CAAL,EAAuC;AACtC,YAAM,IAAI,KAAJ,CACL,2EADK,CAAN;AAGA;;AACD,UAAM,OAAO,GACZ,MAAM,KAAK,MAAX,GAAoB,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,MAAlB,CAApB,GAAgD,QAAA,CAAA,WAAA,CAAY,IAAZ,CADjD;AAGA,WAAO,gBAAgB,CAAC,OAAD,CAAvB;AACA;;AAED,QAAM,IAAI,KAAJ,CACL,4FADK,CAAN;AAGA,CApBY","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst crypto = require(\"crypto\");\r\nconst buffer_1 = require(\"./buffer\");\r\nconst cryptoHashSha256 = (data) => {\r\n    const dataHash = crypto.createHash('sha256');\r\n    dataHash.update(data);\r\n    return dataHash.digest();\r\n};\r\nexports.hash = (data, format) => {\r\n    if (Buffer.isBuffer(data)) {\r\n        return cryptoHashSha256(data);\r\n    }\r\n    if (typeof data === 'string' && typeof format === 'string') {\r\n        if (!['utf8', 'hex'].includes(format)) {\r\n            throw new Error('Unsupported string format. Currently only `hex` and `utf8` are supported.');\r\n        }\r\n        const encoded = format === 'utf8' ? Buffer.from(data, 'utf8') : buffer_1.hexToBuffer(data);\r\n        return cryptoHashSha256(encoded);\r\n    }\r\n    throw new Error('Unsupported data format. Currently only Buffers or `hex` and `utf8` strings are supported.');\r\n};\r\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}