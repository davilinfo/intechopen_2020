{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BigNum = require(\"@liskhq/bignum\");\n\nvar cryptography = require(\"@liskhq/lisk-cryptography\");\n\nvar constants_1 = require(\"../constants\");\n\nexports.isValidValue = function (value) {\n  if (value === undefined) {\n    return false;\n  }\n\n  if (typeof value === 'number' && Number.isNaN(value)) {\n    return false;\n  }\n\n  if (value === false) {\n    return false;\n  }\n\n  return true;\n};\n\nexports.checkRequiredFields = function (requiredFields, data) {\n  var dataFields = Object.keys(data);\n  requiredFields.forEach(function (parameter) {\n    if (!dataFields.includes(parameter) || !exports.isValidValue(data[parameter])) {\n      throw new Error(\"\".concat(parameter, \" is a required parameter.\"));\n    }\n  });\n  return true;\n};\n\nexports.getAssetDataForTransferTransaction = function (_ref) {\n  var data = _ref.data;\n  return data ? Buffer.from(data, 'utf8') : Buffer.alloc(0);\n};\n\nexports.getAssetDataForRegisterSecondSignatureTransaction = function (_ref2) {\n  var signature = _ref2.signature;\n  exports.checkRequiredFields(['publicKey'], signature);\n  var publicKey = signature.publicKey;\n  return cryptography.hexToBuffer(publicKey);\n};\n\nexports.getAssetDataForRegisterDelegateTransaction = function (_ref3) {\n  var delegate = _ref3.delegate;\n  exports.checkRequiredFields(['username'], delegate);\n  var username = delegate.username;\n  return Buffer.from(username, 'utf8');\n};\n\nexports.getAssetDataForCastVotesTransaction = function (_ref4) {\n  var votes = _ref4.votes;\n\n  if (!Array.isArray(votes)) {\n    throw new Error('votes parameter must be an Array.');\n  }\n\n  return Buffer.from(votes.join(''), 'utf8');\n};\n\nexports.getAssetDataForRegisterMultisignatureAccountTransaction = function (_ref5) {\n  var multisignature = _ref5.multisignature;\n  exports.checkRequiredFields(['min', 'lifetime', 'keysgroup'], multisignature);\n  var min = multisignature.min,\n      lifetime = multisignature.lifetime,\n      keysgroup = multisignature.keysgroup;\n  var minBuffer = Buffer.alloc(1, min);\n  var lifetimeBuffer = Buffer.alloc(1, lifetime);\n  var keysgroupBuffer = Buffer.from(keysgroup.join(''), 'utf8');\n  return Buffer.concat([minBuffer, lifetimeBuffer, keysgroupBuffer]);\n};\n\nvar DAPP_TYPE_LENGTH = 4;\nvar DAPP_CATEGORY_LENGTH = 4;\n\nexports.getAssetDataForCreateDappTransaction = function (_ref6) {\n  var dapp = _ref6.dapp;\n  exports.checkRequiredFields(['name', 'link', 'type', 'category'], dapp);\n  var name = dapp.name,\n      description = dapp.description,\n      tags = dapp.tags,\n      link = dapp.link,\n      icon = dapp.icon,\n      type = dapp.type,\n      category = dapp.category;\n  var nameBuffer = Buffer.from(name, 'utf8');\n  var linkBuffer = Buffer.from(link, 'utf8');\n  var typeBuffer = Buffer.alloc(DAPP_TYPE_LENGTH);\n  typeBuffer.writeIntLE(type, 0, DAPP_TYPE_LENGTH);\n  var categoryBuffer = Buffer.alloc(DAPP_CATEGORY_LENGTH);\n  categoryBuffer.writeIntLE(category, 0, DAPP_CATEGORY_LENGTH);\n  var descriptionBuffer = description ? Buffer.from(description, 'utf8') : Buffer.alloc(0);\n  var tagsBuffer = tags ? Buffer.from(tags, 'utf8') : Buffer.alloc(0);\n  var iconBuffer = icon ? Buffer.from(icon, 'utf8') : Buffer.alloc(0);\n  return Buffer.concat([nameBuffer, descriptionBuffer, tagsBuffer, linkBuffer, iconBuffer, typeBuffer, categoryBuffer]);\n};\n\nexports.getAssetDataForTransferIntoDappTransaction = function (_ref7) {\n  var inTransfer = _ref7.inTransfer;\n  exports.checkRequiredFields(['dappId'], inTransfer);\n  var dappId = inTransfer.dappId;\n  return Buffer.from(dappId, 'utf8');\n};\n\nexports.getAssetDataForTransferOutOfDappTransaction = function (_ref8) {\n  var outTransfer = _ref8.outTransfer;\n  exports.checkRequiredFields(['dappId', 'transactionId'], outTransfer);\n  var dappId = outTransfer.dappId,\n      transactionId = outTransfer.transactionId;\n  var outAppIdBuffer = Buffer.from(dappId, 'utf8');\n  var outTransactionIdBuffer = Buffer.from(transactionId, 'utf8');\n  return Buffer.concat([outAppIdBuffer, outTransactionIdBuffer]);\n};\n\nvar transactionTypeAssetGetBytesMap = {\n  0: exports.getAssetDataForTransferTransaction,\n  1: exports.getAssetDataForRegisterSecondSignatureTransaction,\n  2: exports.getAssetDataForRegisterDelegateTransaction,\n  3: exports.getAssetDataForCastVotesTransaction,\n  4: exports.getAssetDataForRegisterMultisignatureAccountTransaction,\n  5: exports.getAssetDataForCreateDappTransaction,\n  6: exports.getAssetDataForTransferIntoDappTransaction,\n  7: exports.getAssetDataForTransferOutOfDappTransaction\n};\n\nexports.getAssetBytes = function (transaction) {\n  return transactionTypeAssetGetBytesMap[transaction.type](transaction.asset);\n};\n\nvar REQUIRED_TRANSACTION_PARAMETERS = ['type', 'timestamp', 'senderPublicKey', 'amount'];\n\nexports.checkTransaction = function (transaction) {\n  exports.checkRequiredFields(REQUIRED_TRANSACTION_PARAMETERS, transaction);\n  var data = transaction.asset.data;\n\n  if (data && data.length > constants_1.BYTESIZES.DATA) {\n    throw new Error(\"Transaction asset data exceeds size of \".concat(constants_1.BYTESIZES.DATA, \".\"));\n  }\n\n  return true;\n};\n\nexports.getTransactionBytes = function (transaction) {\n  exports.checkTransaction(transaction);\n  var type = transaction.type,\n      timestamp = transaction.timestamp,\n      senderPublicKey = transaction.senderPublicKey,\n      recipientId = transaction.recipientId,\n      amount = transaction.amount,\n      signature = transaction.signature,\n      signSignature = transaction.signSignature;\n  var transactionType = Buffer.alloc(constants_1.BYTESIZES.TYPE, type);\n  var transactionTimestamp = Buffer.alloc(constants_1.BYTESIZES.TIMESTAMP);\n  transactionTimestamp.writeIntLE(timestamp, 0, constants_1.BYTESIZES.TIMESTAMP);\n  var transactionSenderPublicKey = cryptography.hexToBuffer(senderPublicKey);\n  var transactionRecipientID = recipientId ? cryptography.intToBuffer(recipientId.slice(0, -1), constants_1.BYTESIZES.RECIPIENT_ID) : Buffer.alloc(constants_1.BYTESIZES.RECIPIENT_ID);\n  var amountBigNum = new BigNum(amount);\n\n  if (amountBigNum.lt(0)) {\n    throw new Error('Transaction amount must not be negative.');\n  }\n\n  if (amountBigNum.gt(new BigNum(constants_1.MAX_TRANSACTION_AMOUNT))) {\n    throw new Error('Transaction amount is too large.');\n  }\n\n  var transactionAmount = amountBigNum.toBuffer({\n    endian: 'little',\n    size: constants_1.BYTESIZES.AMOUNT\n  });\n  var transactionAssetData = exports.getAssetBytes(transaction);\n  var transactionSignature = signature ? cryptography.hexToBuffer(signature) : Buffer.alloc(0);\n  var transactionSecondSignature = signSignature ? cryptography.hexToBuffer(signSignature) : Buffer.alloc(0);\n  return Buffer.concat([transactionType, transactionTimestamp, transactionSenderPublicKey, transactionRecipientID, transactionAmount, transactionAssetData, transactionSignature, transactionSecondSignature]);\n};","map":{"version":3,"sources":["../../src/utils/get_transaction_bytes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst BigNum = require(\"@liskhq/bignum\");\r\nconst cryptography = require(\"@liskhq/lisk-cryptography\");\r\nconst constants_1 = require(\"../constants\");\r\nexports.isValidValue = (value) => {\r\n    if (value === undefined) {\r\n        return false;\r\n    }\r\n    if (typeof value === 'number' && Number.isNaN(value)) {\r\n        return false;\r\n    }\r\n    if (value === false) {\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\nexports.checkRequiredFields = (requiredFields, data) => {\r\n    const dataFields = Object.keys(data);\r\n    requiredFields.forEach(parameter => {\r\n        if (!dataFields.includes(parameter) || !exports.isValidValue(data[parameter])) {\r\n            throw new Error(`${parameter} is a required parameter.`);\r\n        }\r\n    });\r\n    return true;\r\n};\r\nexports.getAssetDataForTransferTransaction = ({ data, }) => data ? Buffer.from(data, 'utf8') : Buffer.alloc(0);\r\nexports.getAssetDataForRegisterSecondSignatureTransaction = ({ signature, }) => {\r\n    exports.checkRequiredFields(['publicKey'], signature);\r\n    const { publicKey } = signature;\r\n    return cryptography.hexToBuffer(publicKey);\r\n};\r\nexports.getAssetDataForRegisterDelegateTransaction = ({ delegate, }) => {\r\n    exports.checkRequiredFields(['username'], delegate);\r\n    const { username } = delegate;\r\n    return Buffer.from(username, 'utf8');\r\n};\r\nexports.getAssetDataForCastVotesTransaction = ({ votes, }) => {\r\n    if (!Array.isArray(votes)) {\r\n        throw new Error('votes parameter must be an Array.');\r\n    }\r\n    return Buffer.from(votes.join(''), 'utf8');\r\n};\r\nexports.getAssetDataForRegisterMultisignatureAccountTransaction = ({ multisignature, }) => {\r\n    exports.checkRequiredFields(['min', 'lifetime', 'keysgroup'], multisignature);\r\n    const { min, lifetime, keysgroup } = multisignature;\r\n    const minBuffer = Buffer.alloc(1, min);\r\n    const lifetimeBuffer = Buffer.alloc(1, lifetime);\r\n    const keysgroupBuffer = Buffer.from(keysgroup.join(''), 'utf8');\r\n    return Buffer.concat([minBuffer, lifetimeBuffer, keysgroupBuffer]);\r\n};\r\nconst DAPP_TYPE_LENGTH = 4;\r\nconst DAPP_CATEGORY_LENGTH = 4;\r\nexports.getAssetDataForCreateDappTransaction = ({ dapp, }) => {\r\n    exports.checkRequiredFields(['name', 'link', 'type', 'category'], dapp);\r\n    const { name, description, tags, link, icon, type, category } = dapp;\r\n    const nameBuffer = Buffer.from(name, 'utf8');\r\n    const linkBuffer = Buffer.from(link, 'utf8');\r\n    const typeBuffer = Buffer.alloc(DAPP_TYPE_LENGTH);\r\n    typeBuffer.writeIntLE(type, 0, DAPP_TYPE_LENGTH);\r\n    const categoryBuffer = Buffer.alloc(DAPP_CATEGORY_LENGTH);\r\n    categoryBuffer.writeIntLE(category, 0, DAPP_CATEGORY_LENGTH);\r\n    const descriptionBuffer = description\r\n        ? Buffer.from(description, 'utf8')\r\n        : Buffer.alloc(0);\r\n    const tagsBuffer = tags ? Buffer.from(tags, 'utf8') : Buffer.alloc(0);\r\n    const iconBuffer = icon ? Buffer.from(icon, 'utf8') : Buffer.alloc(0);\r\n    return Buffer.concat([\r\n        nameBuffer,\r\n        descriptionBuffer,\r\n        tagsBuffer,\r\n        linkBuffer,\r\n        iconBuffer,\r\n        typeBuffer,\r\n        categoryBuffer,\r\n    ]);\r\n};\r\nexports.getAssetDataForTransferIntoDappTransaction = ({ inTransfer, }) => {\r\n    exports.checkRequiredFields(['dappId'], inTransfer);\r\n    const { dappId } = inTransfer;\r\n    return Buffer.from(dappId, 'utf8');\r\n};\r\nexports.getAssetDataForTransferOutOfDappTransaction = ({ outTransfer, }) => {\r\n    exports.checkRequiredFields(['dappId', 'transactionId'], outTransfer);\r\n    const { dappId, transactionId } = outTransfer;\r\n    const outAppIdBuffer = Buffer.from(dappId, 'utf8');\r\n    const outTransactionIdBuffer = Buffer.from(transactionId, 'utf8');\r\n    return Buffer.concat([outAppIdBuffer, outTransactionIdBuffer]);\r\n};\r\nconst transactionTypeAssetGetBytesMap = {\r\n    0: exports.getAssetDataForTransferTransaction,\r\n    1: exports.getAssetDataForRegisterSecondSignatureTransaction,\r\n    2: exports.getAssetDataForRegisterDelegateTransaction,\r\n    3: exports.getAssetDataForCastVotesTransaction,\r\n    4: exports.getAssetDataForRegisterMultisignatureAccountTransaction,\r\n    5: exports.getAssetDataForCreateDappTransaction,\r\n    6: exports.getAssetDataForTransferIntoDappTransaction,\r\n    7: exports.getAssetDataForTransferOutOfDappTransaction,\r\n};\r\nexports.getAssetBytes = (transaction) => transactionTypeAssetGetBytesMap[transaction.type](transaction.asset);\r\nconst REQUIRED_TRANSACTION_PARAMETERS = [\r\n    'type',\r\n    'timestamp',\r\n    'senderPublicKey',\r\n    'amount',\r\n];\r\nexports.checkTransaction = (transaction) => {\r\n    exports.checkRequiredFields(REQUIRED_TRANSACTION_PARAMETERS, transaction);\r\n    const { data } = transaction.asset;\r\n    if (data && data.length > constants_1.BYTESIZES.DATA) {\r\n        throw new Error(`Transaction asset data exceeds size of ${constants_1.BYTESIZES.DATA}.`);\r\n    }\r\n    return true;\r\n};\r\nexports.getTransactionBytes = (transaction) => {\r\n    exports.checkTransaction(transaction);\r\n    const { type, timestamp, senderPublicKey, recipientId, amount, signature, signSignature, } = transaction;\r\n    const transactionType = Buffer.alloc(constants_1.BYTESIZES.TYPE, type);\r\n    const transactionTimestamp = Buffer.alloc(constants_1.BYTESIZES.TIMESTAMP);\r\n    transactionTimestamp.writeIntLE(timestamp, 0, constants_1.BYTESIZES.TIMESTAMP);\r\n    const transactionSenderPublicKey = cryptography.hexToBuffer(senderPublicKey);\r\n    const transactionRecipientID = recipientId\r\n        ? cryptography.intToBuffer(recipientId.slice(0, -1), constants_1.BYTESIZES.RECIPIENT_ID)\r\n        : Buffer.alloc(constants_1.BYTESIZES.RECIPIENT_ID);\r\n    const amountBigNum = new BigNum(amount);\r\n    if (amountBigNum.lt(0)) {\r\n        throw new Error('Transaction amount must not be negative.');\r\n    }\r\n    if (amountBigNum.gt(new BigNum(constants_1.MAX_TRANSACTION_AMOUNT))) {\r\n        throw new Error('Transaction amount is too large.');\r\n    }\r\n    const transactionAmount = amountBigNum.toBuffer({\r\n        endian: 'little',\r\n        size: constants_1.BYTESIZES.AMOUNT,\r\n    });\r\n    const transactionAssetData = exports.getAssetBytes(transaction);\r\n    const transactionSignature = signature\r\n        ? cryptography.hexToBuffer(signature)\r\n        : Buffer.alloc(0);\r\n    const transactionSecondSignature = signSignature\r\n        ? cryptography.hexToBuffer(signSignature)\r\n        : Buffer.alloc(0);\r\n    return Buffer.concat([\r\n        transactionType,\r\n        transactionTimestamp,\r\n        transactionSenderPublicKey,\r\n        transactionRecipientID,\r\n        transactionAmount,\r\n        transactionAssetData,\r\n        transactionSignature,\r\n        transactionSecondSignature,\r\n    ]);\r\n};\r\n//# sourceMappingURL=get_transaction_bytes.js.map"]},"metadata":{},"sourceType":"script"}