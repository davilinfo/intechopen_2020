{"ast":null,"code":"var _jsxFileName = \"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\src\\\\components\\\\FormPayment.js\";\nimport React, { useState, useEffect, Component } from 'react';\nimport api from '../services/api';\nimport '../styles.css';\nimport * as cryptography from '@liskhq/lisk-cryptography';\nimport { TransferTransaction, utils } from '@liskhq/lisk-transactions';\nimport * as FoodTransaction from \"../FoodTransaction\";\n\nclass FormPayment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      let name = event.target.name;\n      let val = event.target.value;\n      this.setState({\n        [name]: val\n      });\n    };\n\n    this.onSubmit = async transaction => {\n      console.log(transaction);\n      let order = await api.post('/clientPayment', {\n        transaction: transaction,\n        networkid: 'identifier'\n      });\n      console.log(order);\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n\n      if (this.state.orderstring !== null && this.state.orderstring !== undefined) {\n        this.state.orderstring = this.state.orderstring.split(\"&\");\n      }\n      /*const username = await api.post(\"/cryptography\", { text: this.state.orderstring[5].split('=')[1] });\r\n      const phone = await api.post(\"/cryptography\", { text: this.state.orderstring[6].split('=')[1] });\r\n      const deliveryaddress = await api.post(\"/cryptography\", { text: this.state.orderstring[7].split('=')[1] });\r\n      let observation = \"\";\r\n      if (this.state.orderstring[8] !== undefined){\r\n          observation = await api.post(\"/cryptography\", { text: this.state.orderstring[8].split('=')[1] });\r\n      }      */\n\n\n      console.log(this.state.passphrase);\n      let publicKey = cryptography.getPrivateAndPublicKeyFromPassphrase(this.state.passphrase).publicKey;\n      /*const clientData = cryptography.encryptMessageWithPassphrase(\r\n          this.state.orderstring[5].split('=')[1].concat(' ***Field*** ')\r\n          .concat(this.state.orderstring[6].split('=')[1]).concat(' ***Field*** ')\r\n          .concat(this.state.orderstring[7].split('=')[1]).concat(' ***Field*** ')\r\n          .concat(this.state.orderstring[8].split('=')[1]),\r\n          this.state.passphrase,\r\n          publicKey\r\n          );   */\n\n      const networkIdentifier = cryptography.getNetworkIdentifier(\"23ce0366ef0a14a91e5fd4b1591fc880ffbef9d988ff8bebf8f3666b0c09597d\", \"Lisk\"); //const encryptedclient= cryptography.encryptMessageWithPassphrase(passphrase, passphrase, orderstring[9].split('=')[1]);        \n\n      const txFood = new TransferTransaction({\n        asset: {\n          /*name: this.state.orderstring[2].split('=')[1],\r\n          description: this.state.orderstring[2].split('=')[1],\r\n          username: username.data.response,\r\n          phone: phone.data.response,\r\n          deliveryaddress: deliveryaddress.data.response,\r\n          foodType: this.state.orderstring[3].split('=')[1],\r\n          observation: observation.data !== undefined ? observation.data.response : \"\",\r\n          clientData: clientData.encryptedMessage,\r\n          clientNonce: clientData.nonce,*/\n          amount: '5000',\n          //this.state.orderstring[1].split('=')[1].toString(),\n          recipientId: this.state.orderstring[0].split('=')[1] //restaurant lisk address\n          //key: encryptedclient.encryptedMessage,\n          //keynonce: encryptedclient.nonce,\n          //clientpublickey: cryptography.getAddressAndPublicKeyFromPassphrase(this.state.passphrase).publicKey\n\n        },\n        timestamp: utils.getTimeFromBlockchainEpoch(new Date()),\n        networkIdentifier: networkIdentifier\n      });\n      txFood.sign(this.state.passphrase);\n      await this.onSubmit(txFood);\n    };\n\n    this.state = {\n      passphrase: '',\n      orderstring: props.orderstring,\n      response: {\n        meta: {\n          status: false\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"content\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      method: \"Post\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, \"Your Lisk Passphrase\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      id: \"passphrase\",\n      name: \"passphrase\",\n      required: true,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }\n    }, \"copy this passphrase and test above if desired: creek own stem final gate scrub live shallow stage host concert they\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }, \"Order\")))));\n  }\n\n}\n\nexport default FormPayment;","map":{"version":3,"sources":["C:/PoC/restaurant_sidechain/web/src/components/FormPayment.js"],"names":["React","useState","useEffect","Component","api","cryptography","TransferTransaction","utils","FoodTransaction","FormPayment","constructor","props","handleChange","event","name","target","val","value","setState","onSubmit","transaction","console","log","order","post","networkid","handleSubmit","e","preventDefault","state","orderstring","undefined","split","passphrase","publicKey","getPrivateAndPublicKeyFromPassphrase","networkIdentifier","getNetworkIdentifier","txFood","asset","amount","recipientId","timestamp","getTimeFromBlockchainEpoch","Date","sign","response","meta","status","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\r\nimport api from '../services/api';\r\nimport '../styles.css';\r\nimport * as cryptography from '@liskhq/lisk-cryptography';\r\nimport{ TransferTransaction, utils } from '@liskhq/lisk-transactions';\r\n\r\nimport * as FoodTransaction from \"../FoodTransaction\";\r\n\r\nclass FormPayment extends Component{\r\n    constructor (props){        \r\n        super(props);\r\n\r\n        this.state = {\r\n            passphrase: '',\r\n            orderstring: props.orderstring,\r\n            response: { meta: { status: false }},\r\n        }\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        let name = event.target.name;\r\n        let val = event.target.value;\r\n        this.setState({[name]: val});\r\n    };       \r\n    \r\n    onSubmit = async (transaction) =>\r\n    {\r\n        console.log(transaction);\r\n        let order = await api.post('/clientPayment', {transaction: transaction, networkid: 'identifier'});\r\n        console.log(order);        \r\n    }\r\n\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n                \r\n        if (this.state.orderstring !== null && this.state.orderstring !== undefined){    \r\n            this.state.orderstring = this.state.orderstring.split(\"&\");                                      \r\n        }\r\n\r\n        /*const username = await api.post(\"/cryptography\", { text: this.state.orderstring[5].split('=')[1] });\r\n        const phone = await api.post(\"/cryptography\", { text: this.state.orderstring[6].split('=')[1] });\r\n        const deliveryaddress = await api.post(\"/cryptography\", { text: this.state.orderstring[7].split('=')[1] });\r\n        let observation = \"\";\r\n        if (this.state.orderstring[8] !== undefined){\r\n            observation = await api.post(\"/cryptography\", { text: this.state.orderstring[8].split('=')[1] });\r\n        }      */  \r\n        \r\n        console.log(this.state.passphrase);\r\n        let publicKey = cryptography.getPrivateAndPublicKeyFromPassphrase(this.state.passphrase).publicKey;\r\n\r\n        /*const clientData = cryptography.encryptMessageWithPassphrase(\r\n            this.state.orderstring[5].split('=')[1].concat(' ***Field*** ')\r\n            .concat(this.state.orderstring[6].split('=')[1]).concat(' ***Field*** ')\r\n            .concat(this.state.orderstring[7].split('=')[1]).concat(' ***Field*** ')\r\n            .concat(this.state.orderstring[8].split('=')[1]),\r\n            this.state.passphrase,\r\n            publicKey\r\n            );   */                         \r\n\r\n        const networkIdentifier = cryptography.getNetworkIdentifier(\r\n            \"23ce0366ef0a14a91e5fd4b1591fc880ffbef9d988ff8bebf8f3666b0c09597d\",\r\n            \"Lisk\",\r\n        );       \r\n\r\n        //const encryptedclient= cryptography.encryptMessageWithPassphrase(passphrase, passphrase, orderstring[9].split('=')[1]);        \r\n        \r\n        const txFood = new TransferTransaction({\r\n            asset: {\r\n                /*name: this.state.orderstring[2].split('=')[1],\r\n                description: this.state.orderstring[2].split('=')[1],\r\n                username: username.data.response,\r\n                phone: phone.data.response,\r\n                deliveryaddress: deliveryaddress.data.response,\r\n                foodType: this.state.orderstring[3].split('=')[1],\r\n                observation: observation.data !== undefined ? observation.data.response : \"\",\r\n                clientData: clientData.encryptedMessage,\r\n                clientNonce: clientData.nonce,*/\r\n                amount: '5000', //this.state.orderstring[1].split('=')[1].toString(),\r\n                recipientId: this.state.orderstring[0].split('=')[1], //restaurant lisk address\r\n                //key: encryptedclient.encryptedMessage,\r\n                //keynonce: encryptedclient.nonce,\r\n                //clientpublickey: cryptography.getAddressAndPublicKeyFromPassphrase(this.state.passphrase).publicKey\r\n            },                \r\n            timestamp: utils.getTimeFromBlockchainEpoch(new Date()),\r\n            networkIdentifier: networkIdentifier\r\n        });             \r\n\r\n        txFood.sign(this.state.passphrase);\r\n\r\n        await this.onSubmit(txFood);                       \r\n    }    \r\n\r\n    render() {\r\n    return (\r\n        <div id=\"app\">\r\n            <div id=\"content\" align=\"center\">                \r\n                <form method=\"Post\" onSubmit={this.handleSubmit}>                                  \r\n                    <div>\r\n                        <label>Your Lisk Passphrase</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"password\" id=\"passphrase\" name=\"passphrase\" required onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div>\r\n                        <label>copy this passphrase and test above if desired: creek own stem final gate scrub live shallow stage host concert they</label>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\">Order</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default FormPayment;\r\n"]},"metadata":{},"sourceType":"module"}