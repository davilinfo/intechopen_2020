{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar cryptography = require(\"@liskhq/lisk-cryptography\");\n\nvar utils_1 = require(\"./utils\");\n\nexports.createSignatureObject = function (transaction, passphrase) {\n  if (!utils_1.verifyTransaction(transaction)) {\n    throw new Error('Invalid transaction.');\n  }\n\n  if (!transaction.id) {\n    throw new Error('Transaction ID is required to create a signature object.');\n  }\n\n  var _cryptography$getPriv = cryptography.getPrivateAndPublicKeyFromPassphrase(passphrase),\n      publicKey = _cryptography$getPriv.publicKey;\n\n  return {\n    transactionId: transaction.id,\n    publicKey: publicKey,\n    signature: utils_1.multiSignTransaction(transaction, passphrase)\n  };\n};","map":{"version":3,"sources":["../src/create_signature_object.ts"],"names":[],"mappings":";;;;;;AAcA,IAAA,YAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAQa,OAAA,CAAA,qBAAA,GAAwB,UACpC,WADoC,EAEpC,UAFoC,EAGhB;AACpB,MAAI,CAAC,OAAA,CAAA,iBAAA,CAAkB,WAAlB,CAAL,EAAqC;AACpC,UAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACA;;AAED,MAAI,CAAC,WAAW,CAAC,EAAjB,EAAqB;AACpB,UAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN;AACA;;AAPmB,8BASE,YAAY,CAAC,oCAAb,CACrB,UADqB,CATF;AAAA,MASZ,SATY,yBASZ,SATY;;AAapB,SAAO;AACN,IAAA,aAAa,EAAE,WAAW,CAAC,EADrB;AAEN,IAAA,SAAS,EAAT,SAFM;AAGN,IAAA,SAAS,EAAE,OAAA,CAAA,oBAAA,CAAqB,WAArB,EAAkC,UAAlC;AAHL,GAAP;AAKA,CArBY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cryptography = require(\"@liskhq/lisk-cryptography\");\nconst utils_1 = require(\"./utils\");\nexports.createSignatureObject = (transaction, passphrase) => {\n    if (!utils_1.verifyTransaction(transaction)) {\n        throw new Error('Invalid transaction.');\n    }\n    if (!transaction.id) {\n        throw new Error('Transaction ID is required to create a signature object.');\n    }\n    const { publicKey } = cryptography.getPrivateAndPublicKeyFromPassphrase(passphrase);\n    return {\n        transactionId: transaction.id,\n        publicKey,\n        signature: utils_1.multiSignTransaction(transaction, passphrase),\n    };\n};\n//# sourceMappingURL=create_signature_object.js.map"]},"metadata":{},"sourceType":"script"}