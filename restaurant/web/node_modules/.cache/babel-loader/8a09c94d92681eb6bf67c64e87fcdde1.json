{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst BigNum = require(\"@liskhq/bignum\");\n\nconst validation_1 = require(\"./validation\");\n\nexports.address = data => {\n  try {\n    validation_1.validateAddress(data);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexports.additionPublicKey = data => {\n  const action = data[0];\n\n  if (action !== '+') {\n    return false;\n  }\n\n  try {\n    const publicKeyString = data.slice(1);\n    validation_1.validatePublicKey(publicKeyString);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexports.amount = validation_1.isNumberString;\nexports.csv = validation_1.isCsv;\n\nexports.emptyOrPublicKey = data => {\n  if (data === null || data === '') {\n    return true;\n  }\n\n  try {\n    validation_1.validatePublicKey(data);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexports.fee = validation_1.isValidFee;\nexports.hex = validation_1.isHexString;\n\nexports.id = data => validation_1.isNumberString(data) && !validation_1.isGreaterThanMaxTransactionId(new BigNum(data));\n\nexports.nonTransferAmount = validation_1.isValidNonTransferAmount;\n\nexports.noNullCharacter = data => !validation_1.isNullCharacterIncluded(data);\n\nexports.noNullByte = exports.noNullCharacter;\n\nexports.publicKey = data => {\n  try {\n    validation_1.validatePublicKey(data);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexports.signature = validation_1.isSignature;\n\nexports.signedPublicKey = data => {\n  try {\n    const action = data[0];\n\n    if (action !== '+' && action !== '-') {\n      return false;\n    }\n\n    const publicKeyString = data.slice(1);\n    validation_1.validatePublicKey(publicKeyString);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexports.transferAmount = validation_1.isValidTransferAmount;\nexports.username = validation_1.isUsername;\n\nexports.transferData = data => !validation_1.isNullCharacterIncluded(data) && validation_1.isValidTransferData(data);","map":{"version":3,"sources":["../src/formats.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,MAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,MAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAgBa,OAAA,CAAA,OAAA,GAAW,IAAD,IAA0B;AAChD,MAAI;AACH,IAAA,YAAA,CAAA,eAAA,CAAgB,IAAhB;AAEA,WAAO,IAAP;AACA,GAJD,CAIE,OAAO,KAAP,EAAc;AACf,WAAO,KAAP;AACA;AACD,CARY;;AAUA,OAAA,CAAA,iBAAA,GAAqB,IAAD,IAA0B;AAC1D,QAAM,MAAM,GAAG,IAAI,CAAC,CAAD,CAAnB;;AACA,MAAI,MAAM,KAAK,GAAf,EAAoB;AACnB,WAAO,KAAP;AACA;;AACD,MAAI;AACH,UAAM,eAAe,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAxB;AACA,IAAA,YAAA,CAAA,iBAAA,CAAkB,eAAlB;AAEA,WAAO,IAAP;AACA,GALD,CAKE,OAAO,KAAP,EAAc;AACf,WAAO,KAAP;AACA;AACD,CAbY;;AAeA,OAAA,CAAA,MAAA,GAAS,YAAA,CAAA,cAAT;AAEA,OAAA,CAAA,GAAA,GAAM,YAAA,CAAA,KAAN;;AAEA,OAAA,CAAA,gBAAA,GAAoB,IAAD,IAA0B;AACzD,MAAI,IAAI,KAAK,IAAT,IAAiB,IAAI,KAAK,EAA9B,EAAkC;AACjC,WAAO,IAAP;AACA;;AAED,MAAI;AACH,IAAA,YAAA,CAAA,iBAAA,CAAkB,IAAlB;AAEA,WAAO,IAAP;AACA,GAJD,CAIE,OAAO,KAAP,EAAc;AACf,WAAO,KAAP;AACA;AACD,CAZY;;AAcA,OAAA,CAAA,GAAA,GAAM,YAAA,CAAA,UAAN;AAEA,OAAA,CAAA,GAAA,GAAM,YAAA,CAAA,WAAN;;AAEA,OAAA,CAAA,EAAA,GAAM,IAAD,IACjB,YAAA,CAAA,cAAA,CAAe,IAAf,KAAwB,CAAC,YAAA,CAAA,6BAAA,CAA8B,IAAI,MAAJ,CAAW,IAAX,CAA9B,CADb;;AAGA,OAAA,CAAA,iBAAA,GAAoB,YAAA,CAAA,wBAApB;;AAEA,OAAA,CAAA,eAAA,GAAmB,IAAD,IAC9B,CAAC,YAAA,CAAA,uBAAA,CAAwB,IAAxB,CADW;;AAGA,OAAA,CAAA,UAAA,GAAa,OAAA,CAAA,eAAb;;AAEA,OAAA,CAAA,SAAA,GAAa,IAAD,IAA0B;AAClD,MAAI;AACH,IAAA,YAAA,CAAA,iBAAA,CAAkB,IAAlB;AAEA,WAAO,IAAP;AACA,GAJD,CAIE,OAAO,KAAP,EAAc;AACf,WAAO,KAAP;AACA;AACD,CARY;;AAUA,OAAA,CAAA,SAAA,GAAY,YAAA,CAAA,WAAZ;;AAEA,OAAA,CAAA,eAAA,GAAmB,IAAD,IAA0B;AACxD,MAAI;AACH,UAAM,MAAM,GAAG,IAAI,CAAC,CAAD,CAAnB;;AACA,QAAI,MAAM,KAAK,GAAX,IAAkB,MAAM,KAAK,GAAjC,EAAsC;AACrC,aAAO,KAAP;AACA;;AACD,UAAM,eAAe,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAxB;AACA,IAAA,YAAA,CAAA,iBAAA,CAAkB,eAAlB;AAEA,WAAO,IAAP;AACA,GATD,CASE,OAAO,KAAP,EAAc;AACf,WAAO,KAAP;AACA;AACD,CAbY;;AAeA,OAAA,CAAA,cAAA,GAAiB,YAAA,CAAA,qBAAjB;AAEA,OAAA,CAAA,QAAA,GAAW,YAAA,CAAA,UAAX;;AAEA,OAAA,CAAA,YAAA,GAAgB,IAAD,IAC3B,CAAC,YAAA,CAAA,uBAAA,CAAwB,IAAxB,CAAD,IAAkC,YAAA,CAAA,mBAAA,CAAoB,IAApB,CADtB","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst BigNum = require(\"@liskhq/bignum\");\r\nconst validation_1 = require(\"./validation\");\r\nexports.address = (data) => {\r\n    try {\r\n        validation_1.validateAddress(data);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.additionPublicKey = (data) => {\r\n    const action = data[0];\r\n    if (action !== '+') {\r\n        return false;\r\n    }\r\n    try {\r\n        const publicKeyString = data.slice(1);\r\n        validation_1.validatePublicKey(publicKeyString);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.amount = validation_1.isNumberString;\r\nexports.csv = validation_1.isCsv;\r\nexports.emptyOrPublicKey = (data) => {\r\n    if (data === null || data === '') {\r\n        return true;\r\n    }\r\n    try {\r\n        validation_1.validatePublicKey(data);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.fee = validation_1.isValidFee;\r\nexports.hex = validation_1.isHexString;\r\nexports.id = (data) => validation_1.isNumberString(data) && !validation_1.isGreaterThanMaxTransactionId(new BigNum(data));\r\nexports.nonTransferAmount = validation_1.isValidNonTransferAmount;\r\nexports.noNullCharacter = (data) => !validation_1.isNullCharacterIncluded(data);\r\nexports.noNullByte = exports.noNullCharacter;\r\nexports.publicKey = (data) => {\r\n    try {\r\n        validation_1.validatePublicKey(data);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.signature = validation_1.isSignature;\r\nexports.signedPublicKey = (data) => {\r\n    try {\r\n        const action = data[0];\r\n        if (action !== '+' && action !== '-') {\r\n            return false;\r\n        }\r\n        const publicKeyString = data.slice(1);\r\n        validation_1.validatePublicKey(publicKeyString);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.transferAmount = validation_1.isValidTransferAmount;\r\nexports.username = validation_1.isUsername;\r\nexports.transferData = (data) => !validation_1.isNullCharacterIncluded(data) && validation_1.isValidTransferData(data);\r\n//# sourceMappingURL=formats.js.map"]},"metadata":{},"sourceType":"script"}