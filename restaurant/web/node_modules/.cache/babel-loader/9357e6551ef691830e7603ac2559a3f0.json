{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BigNum = require(\"@liskhq/bignum\");\n\nvar Ajv = require(\"ajv\");\n\nvar addKeywords = require(\"ajv-merge-patch\");\n\nvar schemas = require(\"./schema\");\n\nvar validation_1 = require(\"./validation\");\n\nexports.validator = new Ajv({\n  allErrors: true,\n  removeAdditional: 'all'\n});\naddKeywords(exports.validator);\nexports.validator.addFormat('signature', validation_1.validateSignature);\nexports.validator.addFormat('id', function (data) {\n  return validation_1.isNumberString(data) && !validation_1.isGreaterThanMaxTransactionId(new BigNum(data));\n});\nexports.validator.addFormat('address', function (data) {\n  try {\n    validation_1.validateAddress(data);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('amount', validation_1.isNumberString);\nexports.validator.addFormat('transferAmount', validation_1.validateTransferAmount);\nexports.validator.addFormat('nonTransferAmount', validation_1.validateNonTransferAmount);\nexports.validator.addFormat('transferData', function (data) {\n  return !validation_1.isNullByteIncluded(data) && validation_1.isValidTransferData(data);\n});\nexports.validator.addFormat('fee', validation_1.validateFee);\nexports.validator.addFormat('emptyOrPublicKey', function (data) {\n  if (data === null || data === '') {\n    return true;\n  }\n\n  try {\n    validation_1.validatePublicKey(data);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('publicKey', function (data) {\n  try {\n    validation_1.validatePublicKey(data);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('signedPublicKey', function (data) {\n  try {\n    var action = data[0];\n\n    if (action !== '+' && action !== '-') {\n      return false;\n    }\n\n    var publicKey = data.slice(1);\n    validation_1.validatePublicKey(publicKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('additionPublicKey', function (data) {\n  var action = data[0];\n\n  if (action !== '+') {\n    return false;\n  }\n\n  try {\n    var publicKey = data.slice(1);\n    validation_1.validatePublicKey(publicKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n});\nexports.validator.addFormat('username', validation_1.validateUsername);\nexports.validator.addFormat('noNullByte', function (data) {\n  return !validation_1.isNullByteIncluded(data);\n});\nexports.validator.addKeyword('uniqueSignedPublicKeys', {\n  type: 'array',\n  compile: function compile() {\n    return function (data) {\n      return new Set(data.filter(function (datum) {\n        return typeof datum === 'string';\n      }).map(function (key) {\n        return key.slice(1);\n      })).size === data.length;\n    };\n  }\n});\nexports.validator.addSchema(schemas.baseTransaction);","map":{"version":3,"sources":["../../../src/utils/validation/validator.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst BigNum = require(\"@liskhq/bignum\");\r\nconst Ajv = require(\"ajv\");\r\nconst addKeywords = require(\"ajv-merge-patch\");\r\nconst schemas = require(\"./schema\");\r\nconst validation_1 = require(\"./validation\");\r\nexports.validator = new Ajv({ allErrors: true, removeAdditional: 'all' });\r\naddKeywords(exports.validator);\r\nexports.validator.addFormat('signature', validation_1.validateSignature);\r\nexports.validator.addFormat('id', data => validation_1.isNumberString(data) && !validation_1.isGreaterThanMaxTransactionId(new BigNum(data)));\r\nexports.validator.addFormat('address', data => {\r\n    try {\r\n        validation_1.validateAddress(data);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n});\r\nexports.validator.addFormat('amount', validation_1.isNumberString);\r\nexports.validator.addFormat('transferAmount', validation_1.validateTransferAmount);\r\nexports.validator.addFormat('nonTransferAmount', validation_1.validateNonTransferAmount);\r\nexports.validator.addFormat('transferData', data => !validation_1.isNullByteIncluded(data) && validation_1.isValidTransferData(data));\r\nexports.validator.addFormat('fee', validation_1.validateFee);\r\nexports.validator.addFormat('emptyOrPublicKey', data => {\r\n    if (data === null || data === '') {\r\n        return true;\r\n    }\r\n    try {\r\n        validation_1.validatePublicKey(data);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n});\r\nexports.validator.addFormat('publicKey', data => {\r\n    try {\r\n        validation_1.validatePublicKey(data);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n});\r\nexports.validator.addFormat('signedPublicKey', data => {\r\n    try {\r\n        const action = data[0];\r\n        if (action !== '+' && action !== '-') {\r\n            return false;\r\n        }\r\n        const publicKey = data.slice(1);\r\n        validation_1.validatePublicKey(publicKey);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n});\r\nexports.validator.addFormat('additionPublicKey', data => {\r\n    const action = data[0];\r\n    if (action !== '+') {\r\n        return false;\r\n    }\r\n    try {\r\n        const publicKey = data.slice(1);\r\n        validation_1.validatePublicKey(publicKey);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n});\r\nexports.validator.addFormat('username', validation_1.validateUsername);\r\nexports.validator.addFormat('noNullByte', data => !validation_1.isNullByteIncluded(data));\r\nexports.validator.addKeyword('uniqueSignedPublicKeys', {\r\n    type: 'array',\r\n    compile: () => (data) => new Set(data\r\n        .filter(datum => typeof datum === 'string')\r\n        .map((key) => key.slice(1))).size === data.length,\r\n});\r\nexports.validator.addSchema(schemas.baseTransaction);\r\n//# sourceMappingURL=validator.js.map"]},"metadata":{},"sourceType":"script"}