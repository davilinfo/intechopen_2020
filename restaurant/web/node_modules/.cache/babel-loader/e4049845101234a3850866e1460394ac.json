{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BigNum = require(\"@liskhq/bignum\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar base_transaction_1 = require(\"./base_transaction\");\n\nvar constants_1 = require(\"./constants\");\n\nvar errors_1 = require(\"./errors\");\n\nvar utils_1 = require(\"./utils\");\n\nexports.transferAssetFormatSchema = {\n  type: 'object',\n  properties: {\n    data: {\n      type: 'string',\n      format: 'transferData',\n      maxLength: 64\n    }\n  }\n};\n\nvar TransferTransaction = /*#__PURE__*/function (_base_transaction_1$B) {\n  _inherits(TransferTransaction, _base_transaction_1$B);\n\n  var _super = _createSuper(TransferTransaction);\n\n  function TransferTransaction(rawTransaction) {\n    var _this;\n\n    _classCallCheck(this, TransferTransaction);\n\n    _this = _super.call(this, rawTransaction);\n    var tx = typeof rawTransaction === 'object' && rawTransaction !== null ? rawTransaction : {};\n    _this.asset = tx.asset || {};\n    return _this;\n  }\n\n  _createClass(TransferTransaction, [{\n    key: \"assetToBytes\",\n    value: function assetToBytes() {\n      var data = this.asset.data;\n      return data ? Buffer.from(data, 'utf8') : Buffer.alloc(0);\n    }\n  }, {\n    key: \"prepare\",\n    value: function () {\n      var _prepare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(store) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return store.account.cache([{\n                  address: this.senderId\n                }, {\n                  address: this.recipientId\n                }]);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function prepare(_x) {\n        return _prepare.apply(this, arguments);\n      }\n\n      return prepare;\n    }()\n  }, {\n    key: \"verifyAgainstTransactions\",\n    value: function verifyAgainstTransactions(_) {\n      return [];\n    }\n  }, {\n    key: \"validateAsset\",\n    value: function validateAsset() {\n      utils_1.validator.validate(exports.transferAssetFormatSchema, this.asset);\n      var errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);\n\n      if (!utils_1.validateTransferAmount(this.amount.toString())) {\n        errors.push(new errors_1.TransactionError('Amount must be a valid number in string format.', this.id, '.amount', this.amount.toString()));\n      }\n\n      if (!this.recipientId) {\n        errors.push(new errors_1.TransactionError('`recipientId` must be provided.', this.id, '.recipientId'));\n      }\n\n      try {\n        utils_1.validateAddress(this.recipientId);\n      } catch (error) {\n        errors.push(new errors_1.TransactionError(error.message, this.id, '.recipientId', this.recipientId));\n      }\n\n      if (this.recipientPublicKey) {\n        var calculatedAddress = lisk_cryptography_1.getAddressFromPublicKey(this.recipientPublicKey);\n\n        if (this.recipientId !== calculatedAddress) {\n          errors.push(new errors_1.TransactionError('recipientId does not match recipientPublicKey.', this.id, '.recipientId', this.recipientId, calculatedAddress));\n        }\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"applyAsset\",\n    value: function applyAsset(store) {\n      var errors = [];\n      var sender = store.account.get(this.senderId);\n      var balanceError = utils_1.verifyAmountBalance(this.id, sender, this.amount, this.fee);\n\n      if (balanceError) {\n        errors.push(balanceError);\n      }\n\n      var updatedSenderBalance = new BigNum(sender.balance).sub(this.amount);\n      var updatedSender = Object.assign({}, sender, {\n        balance: updatedSenderBalance.toString()\n      });\n      store.account.set(updatedSender.address, updatedSender);\n      var recipient = store.account.getOrDefault(this.recipientId);\n      var updatedRecipientBalance = new BigNum(recipient.balance).add(this.amount);\n\n      if (updatedRecipientBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n        errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.amount.toString()));\n      }\n\n      var updatedRecipient = Object.assign({}, recipient, {\n        balance: updatedRecipientBalance.toString()\n      });\n      store.account.set(updatedRecipient.address, updatedRecipient);\n      return errors;\n    }\n  }, {\n    key: \"undoAsset\",\n    value: function undoAsset(store) {\n      var errors = [];\n      var sender = store.account.get(this.senderId);\n      var updatedSenderBalance = new BigNum(sender.balance).add(this.amount);\n\n      if (updatedSenderBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n        errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.amount.toString()));\n      }\n\n      var updatedSender = Object.assign({}, sender, {\n        balance: updatedSenderBalance.toString()\n      });\n      store.account.set(updatedSender.address, updatedSender);\n      var recipient = store.account.getOrDefault(this.recipientId);\n      var balanceError = utils_1.verifyBalance(this.id, recipient, this.amount);\n\n      if (balanceError) {\n        errors.push(balanceError);\n      }\n\n      var updatedRecipientBalance = new BigNum(recipient.balance).sub(this.amount);\n      var updatedRecipient = Object.assign({}, recipient, {\n        balance: updatedRecipientBalance.toString()\n      });\n      store.account.set(updatedRecipient.address, updatedRecipient);\n      return errors;\n    }\n  }, {\n    key: \"assetFromSync\",\n    value: function assetFromSync(raw) {\n      if (raw.tf_data) {\n        var data = raw.tf_data.toString('utf8');\n        return {\n          data: data\n        };\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return TransferTransaction;\n}(base_transaction_1.BaseTransaction);\n\nTransferTransaction.TYPE = 0;\nTransferTransaction.FEE = constants_1.TRANSFER_FEE.toString();\nexports.TransferTransaction = TransferTransaction;","map":{"version":3,"sources":["../src/0_transfer_transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BigNum = require(\"@liskhq/bignum\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst base_transaction_1 = require(\"./base_transaction\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"./utils\");\nexports.transferAssetFormatSchema = {\n    type: 'object',\n    properties: {\n        data: {\n            type: 'string',\n            format: 'transferData',\n            maxLength: 64,\n        },\n    },\n};\nclass TransferTransaction extends base_transaction_1.BaseTransaction {\n    constructor(rawTransaction) {\n        super(rawTransaction);\n        const tx = (typeof rawTransaction === 'object' && rawTransaction !== null\n            ? rawTransaction\n            : {});\n        this.asset = (tx.asset || {});\n    }\n    assetToBytes() {\n        const { data } = this.asset;\n        return data ? Buffer.from(data, 'utf8') : Buffer.alloc(0);\n    }\n    async prepare(store) {\n        await store.account.cache([\n            {\n                address: this.senderId,\n            },\n            {\n                address: this.recipientId,\n            },\n        ]);\n    }\n    verifyAgainstTransactions(_) {\n        return [];\n    }\n    validateAsset() {\n        utils_1.validator.validate(exports.transferAssetFormatSchema, this.asset);\n        const errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);\n        if (!utils_1.validateTransferAmount(this.amount.toString())) {\n            errors.push(new errors_1.TransactionError('Amount must be a valid number in string format.', this.id, '.amount', this.amount.toString()));\n        }\n        if (!this.recipientId) {\n            errors.push(new errors_1.TransactionError('`recipientId` must be provided.', this.id, '.recipientId'));\n        }\n        try {\n            utils_1.validateAddress(this.recipientId);\n        }\n        catch (error) {\n            errors.push(new errors_1.TransactionError(error.message, this.id, '.recipientId', this.recipientId));\n        }\n        if (this.recipientPublicKey) {\n            const calculatedAddress = lisk_cryptography_1.getAddressFromPublicKey(this.recipientPublicKey);\n            if (this.recipientId !== calculatedAddress) {\n                errors.push(new errors_1.TransactionError('recipientId does not match recipientPublicKey.', this.id, '.recipientId', this.recipientId, calculatedAddress));\n            }\n        }\n        return errors;\n    }\n    applyAsset(store) {\n        const errors = [];\n        const sender = store.account.get(this.senderId);\n        const balanceError = utils_1.verifyAmountBalance(this.id, sender, this.amount, this.fee);\n        if (balanceError) {\n            errors.push(balanceError);\n        }\n        const updatedSenderBalance = new BigNum(sender.balance).sub(this.amount);\n        const updatedSender = Object.assign({}, sender, { balance: updatedSenderBalance.toString() });\n        store.account.set(updatedSender.address, updatedSender);\n        const recipient = store.account.getOrDefault(this.recipientId);\n        const updatedRecipientBalance = new BigNum(recipient.balance).add(this.amount);\n        if (updatedRecipientBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n            errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.amount.toString()));\n        }\n        const updatedRecipient = Object.assign({}, recipient, { balance: updatedRecipientBalance.toString() });\n        store.account.set(updatedRecipient.address, updatedRecipient);\n        return errors;\n    }\n    undoAsset(store) {\n        const errors = [];\n        const sender = store.account.get(this.senderId);\n        const updatedSenderBalance = new BigNum(sender.balance).add(this.amount);\n        if (updatedSenderBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n            errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.amount.toString()));\n        }\n        const updatedSender = Object.assign({}, sender, { balance: updatedSenderBalance.toString() });\n        store.account.set(updatedSender.address, updatedSender);\n        const recipient = store.account.getOrDefault(this.recipientId);\n        const balanceError = utils_1.verifyBalance(this.id, recipient, this.amount);\n        if (balanceError) {\n            errors.push(balanceError);\n        }\n        const updatedRecipientBalance = new BigNum(recipient.balance).sub(this.amount);\n        const updatedRecipient = Object.assign({}, recipient, { balance: updatedRecipientBalance.toString() });\n        store.account.set(updatedRecipient.address, updatedRecipient);\n        return errors;\n    }\n    assetFromSync(raw) {\n        if (raw.tf_data) {\n            const data = raw.tf_data.toString('utf8');\n            return { data };\n        }\n        return undefined;\n    }\n}\nTransferTransaction.TYPE = 0;\nTransferTransaction.FEE = constants_1.TRANSFER_FEE.toString();\nexports.TransferTransaction = TransferTransaction;\n//# sourceMappingURL=0_transfer_transaction.js.map"]},"metadata":{},"sourceType":"script"}