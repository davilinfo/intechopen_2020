{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst base_transaction_1 = require(\"./base_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst errors_1 = require(\"./errors\");\n\nconst utils_1 = require(\"./utils\");\n\nexports.delegateAssetFormatSchema = {\n  type: 'object',\n  required: ['delegate'],\n  properties: {\n    delegate: {\n      type: 'object',\n      required: ['username'],\n      properties: {\n        username: {\n          type: 'string',\n          minLength: 1,\n          maxLength: 20,\n          format: 'username'\n        }\n      }\n    }\n  }\n};\n\nclass DelegateTransaction extends base_transaction_1.BaseTransaction {\n  constructor(rawTransaction) {\n    super(rawTransaction);\n    const tx = typeof rawTransaction === 'object' && rawTransaction !== null ? rawTransaction : {};\n    this.asset = tx.asset || {\n      delegate: {}\n    };\n    this.containsUniqueData = true;\n  }\n\n  assetToBytes() {\n    const {\n      delegate: {\n        username\n      }\n    } = this.asset;\n    return Buffer.from(username, 'utf8');\n  }\n\n  async prepare(store) {\n    await store.account.cache([{\n      address: this.senderId\n    }, {\n      username: this.asset.delegate.username\n    }]);\n  }\n\n  verifyAgainstTransactions(transactions) {\n    return transactions.filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey).map(tx => new errors_1.TransactionError('Register delegate only allowed once per account.', tx.id, '.asset.delegate'));\n  }\n\n  validateAsset() {\n    utils_1.validator.validate(exports.delegateAssetFormatSchema, this.asset);\n    const errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);\n\n    if (!this.amount.eq(0)) {\n      errors.push(new errors_1.TransactionError('Amount must be zero for delegate registration transaction', this.id, '.amount', this.amount.toString(), '0'));\n    }\n\n    if (this.recipientId) {\n      errors.push(new errors_1.TransactionError('RecipientId is expected to be undefined', this.id, '.recipientId', this.recipientId));\n    }\n\n    if (this.recipientPublicKey) {\n      errors.push(new errors_1.TransactionError('Invalid recipientPublicKey', this.id, '.recipientPublicKey'));\n    }\n\n    return errors;\n  }\n\n  applyAsset(store) {\n    const errors = [];\n    const sender = store.account.get(this.senderId);\n    const usernameExists = store.account.find(account => account.username === this.asset.delegate.username);\n\n    if (usernameExists) {\n      errors.push(new errors_1.TransactionError(`Username is not unique.`, this.id, '.asset.delegate.username'));\n    }\n\n    if (sender.isDelegate || sender.username) {\n      errors.push(new errors_1.TransactionError('Account is already a delegate', this.id, '.asset.delegate.username'));\n    }\n\n    const updatedSender = Object.assign({}, sender, {\n      username: this.asset.delegate.username,\n      vote: 0,\n      isDelegate: 1\n    });\n    store.account.set(updatedSender.address, updatedSender);\n    return errors;\n  }\n\n  undoAsset(store) {\n    const sender = store.account.get(this.senderId);\n\n    const {\n      username\n    } = sender,\n          strippedSender = __rest(sender, [\"username\"]);\n\n    const resetSender = Object.assign({}, sender, {\n      username: null,\n      vote: 0,\n      isDelegate: 0\n    });\n    store.account.set(strippedSender.address, resetSender);\n    return [];\n  }\n\n  assetFromSync(raw) {\n    if (!raw.d_username) {\n      return undefined;\n    }\n\n    const delegate = {\n      username: raw.d_username,\n      publicKey: raw.t_senderPublicKey,\n      address: raw.t_senderId\n    };\n    return {\n      delegate\n    };\n  }\n\n}\n\nDelegateTransaction.TYPE = 2;\nDelegateTransaction.FEE = constants_1.DELEGATE_FEE.toString();\nexports.DelegateTransaction = DelegateTransaction;","map":{"version":3,"sources":["../src/2_delegate_transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_transaction_1 = require(\"./base_transaction\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"./utils\");\nexports.delegateAssetFormatSchema = {\n    type: 'object',\n    required: ['delegate'],\n    properties: {\n        delegate: {\n            type: 'object',\n            required: ['username'],\n            properties: {\n                username: {\n                    type: 'string',\n                    minLength: 1,\n                    maxLength: 20,\n                    format: 'username',\n                },\n            },\n        },\n    },\n};\nclass DelegateTransaction extends base_transaction_1.BaseTransaction {\n    constructor(rawTransaction) {\n        super(rawTransaction);\n        const tx = (typeof rawTransaction === 'object' && rawTransaction !== null\n            ? rawTransaction\n            : {});\n        this.asset = (tx.asset || { delegate: {} });\n        this.containsUniqueData = true;\n    }\n    assetToBytes() {\n        const { delegate: { username }, } = this.asset;\n        return Buffer.from(username, 'utf8');\n    }\n    async prepare(store) {\n        await store.account.cache([\n            {\n                address: this.senderId,\n            },\n            {\n                username: this.asset.delegate.username,\n            },\n        ]);\n    }\n    verifyAgainstTransactions(transactions) {\n        return transactions\n            .filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey)\n            .map(tx => new errors_1.TransactionError('Register delegate only allowed once per account.', tx.id, '.asset.delegate'));\n    }\n    validateAsset() {\n        utils_1.validator.validate(exports.delegateAssetFormatSchema, this.asset);\n        const errors = errors_1.convertToAssetError(this.id, utils_1.validator.errors);\n        if (!this.amount.eq(0)) {\n            errors.push(new errors_1.TransactionError('Amount must be zero for delegate registration transaction', this.id, '.amount', this.amount.toString(), '0'));\n        }\n        if (this.recipientId) {\n            errors.push(new errors_1.TransactionError('RecipientId is expected to be undefined', this.id, '.recipientId', this.recipientId));\n        }\n        if (this.recipientPublicKey) {\n            errors.push(new errors_1.TransactionError('Invalid recipientPublicKey', this.id, '.recipientPublicKey'));\n        }\n        return errors;\n    }\n    applyAsset(store) {\n        const errors = [];\n        const sender = store.account.get(this.senderId);\n        const usernameExists = store.account.find((account) => account.username === this.asset.delegate.username);\n        if (usernameExists) {\n            errors.push(new errors_1.TransactionError(`Username is not unique.`, this.id, '.asset.delegate.username'));\n        }\n        if (sender.isDelegate || sender.username) {\n            errors.push(new errors_1.TransactionError('Account is already a delegate', this.id, '.asset.delegate.username'));\n        }\n        const updatedSender = Object.assign({}, sender, { username: this.asset.delegate.username, vote: 0, isDelegate: 1 });\n        store.account.set(updatedSender.address, updatedSender);\n        return errors;\n    }\n    undoAsset(store) {\n        const sender = store.account.get(this.senderId);\n        const { username } = sender, strippedSender = __rest(sender, [\"username\"]);\n        const resetSender = Object.assign({}, sender, { username: null, vote: 0, isDelegate: 0 });\n        store.account.set(strippedSender.address, resetSender);\n        return [];\n    }\n    assetFromSync(raw) {\n        if (!raw.d_username) {\n            return undefined;\n        }\n        const delegate = {\n            username: raw.d_username,\n            publicKey: raw.t_senderPublicKey,\n            address: raw.t_senderId,\n        };\n        return { delegate };\n    }\n}\nDelegateTransaction.TYPE = 2;\nDelegateTransaction.FEE = constants_1.DELEGATE_FEE.toString();\nexports.DelegateTransaction = DelegateTransaction;\n//# sourceMappingURL=2_delegate_transaction.js.map"]},"metadata":{},"sourceType":"script"}