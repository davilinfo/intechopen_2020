{"ast":null,"code":"'use strict';\n\nvar IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;\n\nvar customRuleCode = require('./dotjs/custom');\n\nvar metaSchema = require('./refs/json-schema-draft-07.json');\n\nmodule.exports = {\n  add: addKeyword,\n  get: getKeyword,\n  remove: removeKeyword,\n  validate: validateKeyword\n};\nvar definitionSchema = {\n  definitions: {\n    simpleTypes: metaSchema.definitions.simpleTypes\n  },\n  type: 'object',\n  dependencies: {\n    schema: ['validate'],\n    $data: ['validate'],\n    statements: ['inline'],\n    valid: {\n      not: {\n        required: ['macro']\n      }\n    }\n  },\n  properties: {\n    type: metaSchema.properties.type,\n    schema: {\n      type: 'boolean'\n    },\n    statements: {\n      type: 'boolean'\n    },\n    dependencies: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    },\n    metaSchema: {\n      type: 'object'\n    },\n    modifying: {\n      type: 'boolean'\n    },\n    valid: {\n      type: 'boolean'\n    },\n    $data: {\n      type: 'boolean'\n    },\n    async: {\n      type: 'boolean'\n    },\n    errors: {\n      anyOf: [{\n        type: 'boolean'\n      }, {\n        const: 'full'\n      }]\n    }\n  }\n};\n/**\n * Define custom keyword\n * @this  Ajv\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\n * @return {Ajv} this for method chaining\n */\n\nfunction addKeyword(keyword, definition) {\n  /* jshint validthis: true */\n\n  /* eslint no-shadow: 0 */\n  var RULES = this.RULES;\n  if (RULES.keywords[keyword]) throw new Error('Keyword ' + keyword + ' is already defined');\n  if (!IDENTIFIER.test(keyword)) throw new Error('Keyword ' + keyword + ' is not a valid identifier');\n\n  if (definition) {\n    this.validateKeyword(definition, true);\n    var dataType = definition.type;\n\n    if (Array.isArray(dataType)) {\n      for (var i = 0; i < dataType.length; i++) _addRule(keyword, dataType[i], definition);\n    } else {\n      _addRule(keyword, dataType, definition);\n    }\n\n    var metaSchema = definition.metaSchema;\n\n    if (metaSchema) {\n      if (definition.$data && this._opts.$data) {\n        metaSchema = {\n          anyOf: [metaSchema, {\n            '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#'\n          }]\n        };\n      }\n\n      definition.validateSchema = this.compile(metaSchema, true);\n    }\n  }\n\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\n\n  function _addRule(keyword, dataType, definition) {\n    var ruleGroup;\n\n    for (var i = 0; i < RULES.length; i++) {\n      var rg = RULES[i];\n\n      if (rg.type == dataType) {\n        ruleGroup = rg;\n        break;\n      }\n    }\n\n    if (!ruleGroup) {\n      ruleGroup = {\n        type: dataType,\n        rules: []\n      };\n      RULES.push(ruleGroup);\n    }\n\n    var rule = {\n      keyword: keyword,\n      definition: definition,\n      custom: true,\n      code: customRuleCode,\n      implements: definition.implements\n    };\n    ruleGroup.rules.push(rule);\n    RULES.custom[keyword] = rule;\n  }\n\n  return this;\n}\n/**\n * Get keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\n */\n\n\nfunction getKeyword(keyword) {\n  /* jshint validthis: true */\n  var rule = this.RULES.custom[keyword];\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n}\n/**\n * Remove keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Ajv} this for method chaining\n */\n\n\nfunction removeKeyword(keyword) {\n  /* jshint validthis: true */\n  var RULES = this.RULES;\n  delete RULES.keywords[keyword];\n  delete RULES.all[keyword];\n  delete RULES.custom[keyword];\n\n  for (var i = 0; i < RULES.length; i++) {\n    var rules = RULES[i].rules;\n\n    for (var j = 0; j < rules.length; j++) {\n      if (rules[j].keyword == keyword) {\n        rules.splice(j, 1);\n        break;\n      }\n    }\n  }\n\n  return this;\n}\n/**\n * Validate keyword definition\n * @this  Ajv\n * @param {Object} definition keyword definition object.\n * @param {Boolean} throwError true to throw exception if definition is invalid\n * @return {boolean} validation result\n */\n\n\nfunction validateKeyword(definition, throwError) {\n  validateKeyword.errors = null;\n  var v = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);\n  if (v(definition)) return true;\n  validateKeyword.errors = v.errors;\n  if (throwError) throw new Error('custom keyword definition is invalid: ' + this.errorsText(v.errors));else return false;\n}","map":{"version":3,"sources":["C:/PoC/restaurant_sidechain/web/node_modules/@liskhq/lisk-validator/node_modules/ajv/lib/keyword.js"],"names":["IDENTIFIER","customRuleCode","require","metaSchema","module","exports","add","addKeyword","get","getKeyword","remove","removeKeyword","validate","validateKeyword","definitionSchema","definitions","simpleTypes","type","dependencies","schema","$data","statements","valid","not","required","properties","items","modifying","async","errors","anyOf","const","keyword","definition","RULES","keywords","Error","test","dataType","Array","isArray","i","length","_addRule","_opts","validateSchema","compile","all","ruleGroup","rg","rules","push","rule","custom","code","implements","j","splice","throwError","v","_validateKeyword","errorsText"],"mappings":"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","sourcesContent":["'use strict';\n\nvar IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;\nvar customRuleCode = require('./dotjs/custom');\nvar metaSchema = require('./refs/json-schema-draft-07.json');\n\nmodule.exports = {\n  add: addKeyword,\n  get: getKeyword,\n  remove: removeKeyword,\n  validate: validateKeyword\n};\n\nvar definitionSchema = {\n  definitions: {\n    simpleTypes: metaSchema.definitions.simpleTypes\n  },\n  type: 'object',\n  dependencies: {\n    schema: ['validate'],\n    $data: ['validate'],\n    statements: ['inline'],\n    valid: {not: {required: ['macro']}}\n  },\n  properties: {\n    type: metaSchema.properties.type,\n    schema: {type: 'boolean'},\n    statements: {type: 'boolean'},\n    dependencies: {\n      type: 'array',\n      items: {type: 'string'}\n    },\n    metaSchema: {type: 'object'},\n    modifying: {type: 'boolean'},\n    valid: {type: 'boolean'},\n    $data: {type: 'boolean'},\n    async: {type: 'boolean'},\n    errors: {\n      anyOf: [\n        {type: 'boolean'},\n        {const: 'full'}\n      ]\n    }\n  }\n};\n\n/**\n * Define custom keyword\n * @this  Ajv\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\n * @return {Ajv} this for method chaining\n */\nfunction addKeyword(keyword, definition) {\n  /* jshint validthis: true */\n  /* eslint no-shadow: 0 */\n  var RULES = this.RULES;\n  if (RULES.keywords[keyword])\n    throw new Error('Keyword ' + keyword + ' is already defined');\n\n  if (!IDENTIFIER.test(keyword))\n    throw new Error('Keyword ' + keyword + ' is not a valid identifier');\n\n  if (definition) {\n    this.validateKeyword(definition, true);\n\n    var dataType = definition.type;\n    if (Array.isArray(dataType)) {\n      for (var i=0; i<dataType.length; i++)\n        _addRule(keyword, dataType[i], definition);\n    } else {\n      _addRule(keyword, dataType, definition);\n    }\n\n    var metaSchema = definition.metaSchema;\n    if (metaSchema) {\n      if (definition.$data && this._opts.$data) {\n        metaSchema = {\n          anyOf: [\n            metaSchema,\n            { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }\n          ]\n        };\n      }\n      definition.validateSchema = this.compile(metaSchema, true);\n    }\n  }\n\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\n\n\n  function _addRule(keyword, dataType, definition) {\n    var ruleGroup;\n    for (var i=0; i<RULES.length; i++) {\n      var rg = RULES[i];\n      if (rg.type == dataType) {\n        ruleGroup = rg;\n        break;\n      }\n    }\n\n    if (!ruleGroup) {\n      ruleGroup = { type: dataType, rules: [] };\n      RULES.push(ruleGroup);\n    }\n\n    var rule = {\n      keyword: keyword,\n      definition: definition,\n      custom: true,\n      code: customRuleCode,\n      implements: definition.implements\n    };\n    ruleGroup.rules.push(rule);\n    RULES.custom[keyword] = rule;\n  }\n\n  return this;\n}\n\n\n/**\n * Get keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\n */\nfunction getKeyword(keyword) {\n  /* jshint validthis: true */\n  var rule = this.RULES.custom[keyword];\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n}\n\n\n/**\n * Remove keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Ajv} this for method chaining\n */\nfunction removeKeyword(keyword) {\n  /* jshint validthis: true */\n  var RULES = this.RULES;\n  delete RULES.keywords[keyword];\n  delete RULES.all[keyword];\n  delete RULES.custom[keyword];\n  for (var i=0; i<RULES.length; i++) {\n    var rules = RULES[i].rules;\n    for (var j=0; j<rules.length; j++) {\n      if (rules[j].keyword == keyword) {\n        rules.splice(j, 1);\n        break;\n      }\n    }\n  }\n  return this;\n}\n\n\n/**\n * Validate keyword definition\n * @this  Ajv\n * @param {Object} definition keyword definition object.\n * @param {Boolean} throwError true to throw exception if definition is invalid\n * @return {boolean} validation result\n */\nfunction validateKeyword(definition, throwError) {\n  validateKeyword.errors = null;\n  var v = this._validateKeyword = this._validateKeyword\n                                  || this.compile(definitionSchema, true);\n\n  if (v(definition)) return true;\n  validateKeyword.errors = v.errors;\n  if (throwError)\n    throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));\n  else\n    return false;\n}\n"]},"metadata":{},"sourceType":"script"}