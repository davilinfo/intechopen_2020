{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar schemas = require(\"./schema\");\n\nvar validator_1 = require(\"./validator\");\n\nvar TRANSACTION_TYPE_MULTI_SIGNATURE = 4;\nvar schemaMap = {\n  0: validator_1.validator.compile(schemas.transferTransaction),\n  1: validator_1.validator.compile(schemas.signatureTransaction),\n  2: validator_1.validator.compile(schemas.delegateTransaction),\n  3: validator_1.validator.compile(schemas.voteTransaction),\n  4: validator_1.validator.compile(schemas.multiTransaction),\n  5: validator_1.validator.compile(schemas.dappTransaction)\n};\n\nvar getTransactionSchemaValidator = function getTransactionSchemaValidator(type) {\n  var schema = schemaMap[type];\n\n  if (!schema) {\n    throw new Error('Unsupported transaction type.');\n  }\n\n  return schema;\n};\n\nvar validateMultiTransaction = function validateMultiTransaction(tx) {\n  if (tx.asset.multisignature.min > tx.asset.multisignature.keysgroup.length) {\n    return {\n      valid: false,\n      errors: [{\n        dataPath: '.asset.multisignature.min',\n        keyword: 'multisignatures.keysgroup.min',\n        message: '.asset.multisignature.min cannot be greater than .asset.multisignature.keysgroup.length',\n        params: {},\n        schemaPath: 'lisk/base-transaction'\n      }]\n    };\n  }\n\n  return {\n    valid: true\n  };\n};\n\nexports.validateTransaction = function (tx) {\n  if (tx.type === undefined || tx.type === null) {\n    throw new Error('Transaction type is required.');\n  }\n\n  var validateSchema = getTransactionSchemaValidator(tx.type);\n  var valid = validateSchema(tx);\n  var errors = validateSchema.errors ? validateSchema.errors.filter(function (e) {\n    return e.keyword !== '$merge';\n  }) : undefined;\n\n  if (valid && tx.type === TRANSACTION_TYPE_MULTI_SIGNATURE) {\n    return validateMultiTransaction(tx);\n  }\n\n  return {\n    valid: valid,\n    errors: errors\n  };\n};","map":{"version":3,"sources":["../../../src/utils/validation/validate_transaction.ts"],"names":[],"mappings":";;;;;;AAiBA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAM,gCAAgC,GAAG,CAAzC;AAEA,IAAM,SAAS,GAAiD;AAC/D,KAAG,WAAA,CAAA,SAAA,CAAU,OAAV,CAAkB,OAAO,CAAC,mBAA1B,CAD4D;AAE/D,KAAG,WAAA,CAAA,SAAA,CAAU,OAAV,CAAkB,OAAO,CAAC,oBAA1B,CAF4D;AAG/D,KAAG,WAAA,CAAA,SAAA,CAAU,OAAV,CAAkB,OAAO,CAAC,mBAA1B,CAH4D;AAI/D,KAAG,WAAA,CAAA,SAAA,CAAU,OAAV,CAAkB,OAAO,CAAC,eAA1B,CAJ4D;AAK/D,KAAG,WAAA,CAAA,SAAA,CAAU,OAAV,CAAkB,OAAO,CAAC,gBAA1B,CAL4D;AAM/D,KAAG,WAAA,CAAA,SAAA,CAAU,OAAV,CAAkB,OAAO,CAAC,eAA1B;AAN4D,CAAhE;;AASA,IAAM,6BAA6B,GAAG,SAAhC,6BAAgC,CAAC,IAAD,EAAmC;AACxE,MAAM,MAAM,GAAG,SAAS,CAAC,IAAD,CAAxB;;AACA,MAAI,CAAC,MAAL,EAAa;AACZ,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACA;;AAED,SAAO,MAAP;AACA,CAPD;;AAcA,IAAM,wBAAwB,GAAG,SAA3B,wBAA2B,CAAC,EAAD,EAA0C;AAC1E,MACE,EAAE,CAAC,KAAH,CAAiC,cAAjC,CAAgD,GAAhD,GACA,EAAE,CAAC,KAAH,CAAiC,cAAjC,CAAgD,SAAhD,CAA0D,MAF5D,EAGE;AACD,WAAO;AACN,MAAA,KAAK,EAAE,KADD;AAEN,MAAA,MAAM,EAAE,CACP;AACC,QAAA,QAAQ,EAAE,2BADX;AAEC,QAAA,OAAO,EAAE,+BAFV;AAGC,QAAA,OAAO,EACN,yFAJF;AAKC,QAAA,MAAM,EAAE,EALT;AAMC,QAAA,UAAU,EAAE;AANb,OADO;AAFF,KAAP;AAaA;;AAED,SAAO;AACN,IAAA,KAAK,EAAE;AADD,GAAP;AAGA,CAvBD;;AAyBa,OAAA,CAAA,mBAAA,GAAsB,UAAC,EAAD,EAA0C;AAC5E,MAAI,EAAE,CAAC,IAAH,KAAY,SAAZ,IAAyB,EAAE,CAAC,IAAH,KAAY,IAAzC,EAA+C;AAC9C,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACA;;AAED,MAAM,cAAc,GAAG,6BAA6B,CAAC,EAAE,CAAC,IAAJ,CAApD;AACA,MAAM,KAAK,GAAG,cAAc,CAAC,EAAD,CAA5B;AAEA,MAAM,MAAM,GAAG,cAAc,CAAC,MAAf,GACZ,cAAc,CAAC,MAAf,CAAsB,MAAtB,CACA,UAAC,CAAD;AAAA,WAAqC,CAAC,CAAC,OAAF,KAAc,QAAnD;AAAA,GADA,CADY,GAIZ,SAJH;;AAKA,MAAI,KAAK,IAAI,EAAE,CAAC,IAAH,KAAY,gCAAzB,EAA2D;AAC1D,WAAO,wBAAwB,CAAC,EAAD,CAA/B;AACA;;AAED,SAAO;AACN,IAAA,KAAK,EAAL,KADM;AAEN,IAAA,MAAM,EAAN;AAFM,GAAP;AAIA,CArBY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst schemas = require(\"./schema\");\nconst validator_1 = require(\"./validator\");\nconst TRANSACTION_TYPE_MULTI_SIGNATURE = 4;\nconst schemaMap = {\n    0: validator_1.validator.compile(schemas.transferTransaction),\n    1: validator_1.validator.compile(schemas.signatureTransaction),\n    2: validator_1.validator.compile(schemas.delegateTransaction),\n    3: validator_1.validator.compile(schemas.voteTransaction),\n    4: validator_1.validator.compile(schemas.multiTransaction),\n    5: validator_1.validator.compile(schemas.dappTransaction),\n};\nconst getTransactionSchemaValidator = (type) => {\n    const schema = schemaMap[type];\n    if (!schema) {\n        throw new Error('Unsupported transaction type.');\n    }\n    return schema;\n};\nconst validateMultiTransaction = (tx) => {\n    if (tx.asset.multisignature.min >\n        tx.asset.multisignature.keysgroup.length) {\n        return {\n            valid: false,\n            errors: [\n                {\n                    dataPath: '.asset.multisignature.min',\n                    keyword: 'multisignatures.keysgroup.min',\n                    message: '.asset.multisignature.min cannot be greater than .asset.multisignature.keysgroup.length',\n                    params: {},\n                    schemaPath: 'lisk/base-transaction',\n                },\n            ],\n        };\n    }\n    return {\n        valid: true,\n    };\n};\nexports.validateTransaction = (tx) => {\n    if (tx.type === undefined || tx.type === null) {\n        throw new Error('Transaction type is required.');\n    }\n    const validateSchema = getTransactionSchemaValidator(tx.type);\n    const valid = validateSchema(tx);\n    const errors = validateSchema.errors\n        ? validateSchema.errors.filter((e) => e.keyword !== '$merge')\n        : undefined;\n    if (valid && tx.type === TRANSACTION_TYPE_MULTI_SIGNATURE) {\n        return validateMultiTransaction(tx);\n    }\n    return {\n        valid,\n        errors,\n    };\n};\n//# sourceMappingURL=validate_transaction.js.map"]},"metadata":{},"sourceType":"script"}