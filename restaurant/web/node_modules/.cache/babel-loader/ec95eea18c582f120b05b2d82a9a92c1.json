{"ast":null,"code":"import * as cryptography from '@liskhq/lisk-cryptography';\nimport { TransferTransaction, utils } from '@liskhq/lisk-transactions'; //import * as FoodTransaction from \"./FoodTransaction\";\n\nconst networkIdentifier = cryptography.getNetworkIdentifier(\"23ce0366ef0a14a91e5fd4b1591fc880ffbef9d988ff8bebf8f3666b0c09597d\", \"Lisk\");\n\nclass SignTransaction {\n  static SignTransaction(object, passphrase) {\n    const txFood = new TransferTransaction({\n      asset: {\n        /*name: this.state.orderstring[2].split('=')[1],\r\n        description: this.state.orderstring[2].split('=')[1],\r\n        username: username.data.response,\r\n        phone: phone.data.response,\r\n        deliveryaddress: deliveryaddress.data.response,\r\n        foodType: this.state.orderstring[3].split('=')[1],\r\n        observation: observation.data !== undefined ? observation.data.response : \"\",\r\n        clientData: clientData.encryptedMessage,\r\n        clientNonce: clientData.nonce,*/\n        amount: '5000',\n        //this.state.orderstring[1].split('=')[1].toString(),\n        recipientId: object.recipientId //restaurant lisk address\n        //key: encryptedclient.encryptedMessage,\n        //keynonce: encryptedclient.nonce,\n        //clientpublickey: cryptography.getAddressAndPublicKeyFromPassphrase(this.state.passphrase).publicKey\n\n      },\n      amount: '5000',\n      //this.state.orderstring[1].split('=')[1].toString(),\n      recipientId: object.recipientId,\n      //restaurant lisk address\n      timestamp: utils.getTimeFromBlockchainEpoch(new Date()),\n      networkIdentifier: networkIdentifier\n    });\n    txFood.sign(passphrase);\n    return txFood;\n  }\n\n}\n\nexport default SignTransaction;","map":{"version":3,"sources":["C:/PoC/restaurant_sidechain/web/src/SignTransaction.js"],"names":["cryptography","TransferTransaction","utils","networkIdentifier","getNetworkIdentifier","SignTransaction","object","passphrase","txFood","asset","amount","recipientId","timestamp","getTimeFromBlockchainEpoch","Date","sign"],"mappings":"AAAA,OAAO,KAAKA,YAAZ,MAA8B,2BAA9B;AACA,SAAQC,mBAAR,EAA6BC,KAA7B,QAA0C,2BAA1C,C,CACA;;AAEA,MAAMC,iBAAiB,GAAGH,YAAY,CAACI,oBAAb,CACtB,kEADsB,EAEtB,MAFsB,CAA1B;;AAKA,MAAMC,eAAN,CAAqB;AAEjB,SAAOA,eAAP,CAAuBC,MAAvB,EAA+BC,UAA/B,EAA0C;AAEtC,UAAMC,MAAM,GAAG,IAAIP,mBAAJ,CAAwB;AACnCQ,MAAAA,KAAK,EAAE;AACH;;;;;;;;;AASAC,QAAAA,MAAM,EAAE,MAVL;AAUa;AAChBC,QAAAA,WAAW,EAAEL,MAAM,CAACK,WAXjB,CAW8B;AACjC;AACA;AACA;;AAdG,OAD4B;AAiBnCD,MAAAA,MAAM,EAAE,MAjB2B;AAiBnB;AAChBC,MAAAA,WAAW,EAAEL,MAAM,CAACK,WAlBe;AAkBF;AACjCC,MAAAA,SAAS,EAAEV,KAAK,CAACW,0BAAN,CAAiC,IAAIC,IAAJ,EAAjC,CAnBwB;AAoBnCX,MAAAA,iBAAiB,EAAEA;AApBgB,KAAxB,CAAf;AAuBAK,IAAAA,MAAM,CAACO,IAAP,CAAYR,UAAZ;AAEA,WAAOC,MAAP;AACH;;AA9BgB;;AAiCrB,eAAeH,eAAf","sourcesContent":["import * as cryptography from '@liskhq/lisk-cryptography';\r\nimport{ TransferTransaction, utils } from '@liskhq/lisk-transactions';\r\n//import * as FoodTransaction from \"./FoodTransaction\";\r\n\r\nconst networkIdentifier = cryptography.getNetworkIdentifier(\r\n    \"23ce0366ef0a14a91e5fd4b1591fc880ffbef9d988ff8bebf8f3666b0c09597d\",\r\n    \"Lisk\",\r\n); \r\n\r\nclass SignTransaction{\r\n\r\n    static SignTransaction(object, passphrase){        \r\n\r\n        const txFood = new TransferTransaction({\r\n            asset: {\r\n                /*name: this.state.orderstring[2].split('=')[1],\r\n                description: this.state.orderstring[2].split('=')[1],\r\n                username: username.data.response,\r\n                phone: phone.data.response,\r\n                deliveryaddress: deliveryaddress.data.response,\r\n                foodType: this.state.orderstring[3].split('=')[1],\r\n                observation: observation.data !== undefined ? observation.data.response : \"\",\r\n                clientData: clientData.encryptedMessage,\r\n                clientNonce: clientData.nonce,*/\r\n                amount: '5000', //this.state.orderstring[1].split('=')[1].toString(),\r\n                recipientId: object.recipientId, //restaurant lisk address\r\n                //key: encryptedclient.encryptedMessage,\r\n                //keynonce: encryptedclient.nonce,\r\n                //clientpublickey: cryptography.getAddressAndPublicKeyFromPassphrase(this.state.passphrase).publicKey\r\n            },                \r\n            amount: '5000', //this.state.orderstring[1].split('=')[1].toString(),\r\n            recipientId: object.recipientId, //restaurant lisk address\r\n            timestamp: utils.getTimeFromBlockchainEpoch(new Date()),\r\n            networkIdentifier: networkIdentifier\r\n        });             \r\n\r\n        txFood.sign(passphrase);\r\n\r\n        return txFood;\r\n    }\r\n}\r\n\r\nexport default SignTransaction;"]},"metadata":{},"sourceType":"module"}