{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nconst _8_transfer_transaction_1 = require(\"./8_transfer_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\");\n\nconst validateInputs = ({\n  amount,\n  recipientId,\n  recipientPublicKey,\n  data,\n  networkIdentifier\n}) => {\n  if (!lisk_validator_1.isValidTransferAmount(amount)) {\n    throw new Error('Amount must be a valid number in string format.');\n  }\n\n  if (!recipientId && !recipientPublicKey) {\n    throw new Error('Either recipientId or recipientPublicKey must be provided.');\n  }\n\n  if (typeof recipientId !== 'undefined') {\n    lisk_validator_1.validateAddress(recipientId);\n  }\n\n  if (typeof recipientPublicKey !== 'undefined') {\n    lisk_validator_1.validatePublicKey(recipientPublicKey);\n  }\n\n  if (recipientId && recipientPublicKey && recipientId !== lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)) {\n    throw new Error('recipientId does not match recipientPublicKey.');\n  }\n\n  if (data && data.length > 0) {\n    if (typeof data !== 'string') {\n      throw new Error('Invalid encoding in transaction data. Data must be utf-8 encoded string.');\n    }\n\n    if (data.length > constants_1.BYTESIZES.DATA) {\n      throw new Error('Transaction data field cannot exceed 64 bytes.');\n    }\n  }\n\n  lisk_validator_1.validateNetworkIdentifier(networkIdentifier);\n};\n\nexports.transfer = inputs => {\n  validateInputs(inputs);\n  const {\n    data,\n    amount,\n    recipientPublicKey,\n    passphrase,\n    secondPassphrase,\n    networkIdentifier\n  } = inputs;\n  const recipientIdFromPublicKey = recipientPublicKey ? lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey) : undefined;\n  const recipientId = inputs.recipientId ? inputs.recipientId : recipientIdFromPublicKey;\n  const transaction = { ...utils_1.createBaseTransaction(inputs),\n    type: 8,\n    asset: {\n      amount,\n      recipientId: recipientId,\n      data\n    }\n  };\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  const transactionWithSenderInfo = { ...transaction,\n    networkIdentifier,\n    senderPublicKey: transaction.senderPublicKey,\n    asset: { ...transaction.asset,\n      recipientId: recipientId\n    }\n  };\n  const transferTransaction = new _8_transfer_transaction_1.TransferTransaction(transactionWithSenderInfo);\n  transferTransaction.sign(passphrase, secondPassphrase);\n  return transferTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/transfer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst _8_transfer_transaction_1 = require(\"./8_transfer_transaction\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nconst validateInputs = ({ amount, recipientId, recipientPublicKey, data, networkIdentifier, }) => {\n    if (!lisk_validator_1.isValidTransferAmount(amount)) {\n        throw new Error('Amount must be a valid number in string format.');\n    }\n    if (!recipientId && !recipientPublicKey) {\n        throw new Error('Either recipientId or recipientPublicKey must be provided.');\n    }\n    if (typeof recipientId !== 'undefined') {\n        lisk_validator_1.validateAddress(recipientId);\n    }\n    if (typeof recipientPublicKey !== 'undefined') {\n        lisk_validator_1.validatePublicKey(recipientPublicKey);\n    }\n    if (recipientId &&\n        recipientPublicKey &&\n        recipientId !== lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)) {\n        throw new Error('recipientId does not match recipientPublicKey.');\n    }\n    if (data && data.length > 0) {\n        if (typeof data !== 'string') {\n            throw new Error('Invalid encoding in transaction data. Data must be utf-8 encoded string.');\n        }\n        if (data.length > constants_1.BYTESIZES.DATA) {\n            throw new Error('Transaction data field cannot exceed 64 bytes.');\n        }\n    }\n    lisk_validator_1.validateNetworkIdentifier(networkIdentifier);\n};\nexports.transfer = (inputs) => {\n    validateInputs(inputs);\n    const { data, amount, recipientPublicKey, passphrase, secondPassphrase, networkIdentifier, } = inputs;\n    const recipientIdFromPublicKey = recipientPublicKey\n        ? lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)\n        : undefined;\n    const recipientId = inputs.recipientId\n        ? inputs.recipientId\n        : recipientIdFromPublicKey;\n    const transaction = {\n        ...utils_1.createBaseTransaction(inputs),\n        type: 8,\n        asset: {\n            amount,\n            recipientId: recipientId,\n            data,\n        },\n    };\n    if (!passphrase) {\n        return transaction;\n    }\n    const transactionWithSenderInfo = {\n        ...transaction,\n        networkIdentifier,\n        senderPublicKey: transaction.senderPublicKey,\n        asset: {\n            ...transaction.asset,\n            recipientId: recipientId,\n        },\n    };\n    const transferTransaction = new _8_transfer_transaction_1.TransferTransaction(transactionWithSenderInfo);\n    transferTransaction.sign(passphrase, secondPassphrase);\n    return transferTransaction.toJSON();\n};\n//# sourceMappingURL=transfer.js.map"]},"metadata":{},"sourceType":"script"}