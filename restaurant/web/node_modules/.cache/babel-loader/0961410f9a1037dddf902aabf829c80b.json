{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\davin.DESKTOP-83VQBDE\\\\Documents\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BigNum = require(\"@liskhq/bignum\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar base_transaction_1 = require(\"./base_transaction\");\n\nvar constants_1 = require(\"./constants\");\n\nvar errors_1 = require(\"./errors\");\n\nvar utils_1 = require(\"./utils\");\n\nvar validation_1 = require(\"./utils/validation\");\n\nvar PREFIX_UPVOTE = '+';\nvar PREFIX_UNVOTE = '-';\nvar MAX_VOTE_PER_ACCOUNT = 101;\nvar MIN_VOTE_PER_TX = 1;\nvar MAX_VOTE_PER_TX = 33;\nexports.voteAssetFormatSchema = {\n  type: 'object',\n  required: ['votes'],\n  properties: {\n    votes: {\n      type: 'array',\n      minItems: MIN_VOTE_PER_TX,\n      maxItems: MAX_VOTE_PER_TX,\n      items: {\n        type: 'string',\n        format: 'signedPublicKey'\n      },\n      uniqueSignedPublicKeys: true\n    }\n  }\n};\n\nvar VoteTransaction = /*#__PURE__*/function (_base_transaction_1$B) {\n  _inherits(VoteTransaction, _base_transaction_1$B);\n\n  var _super = _createSuper(VoteTransaction);\n\n  function VoteTransaction(rawTransaction) {\n    var _this;\n\n    _classCallCheck(this, VoteTransaction);\n\n    _this = _super.call(this, rawTransaction);\n    var tx = typeof rawTransaction === 'object' && rawTransaction !== null ? rawTransaction : {};\n    _this.asset = tx.asset || {};\n    _this.containsUniqueData = true;\n    return _this;\n  }\n\n  _createClass(VoteTransaction, [{\n    key: \"assetToBytes\",\n    value: function assetToBytes() {\n      return Buffer.from(this.asset.votes.join(''), 'utf8');\n    }\n  }, {\n    key: \"prepare\",\n    value: function () {\n      var _prepare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(store) {\n        var publicKeyObjectArray, filterArray;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                publicKeyObjectArray = this.asset.votes.map(function (pkWithAction) {\n                  var publicKey = pkWithAction.slice(1);\n                  return {\n                    publicKey: publicKey\n                  };\n                });\n                filterArray = [{\n                  address: this.senderId\n                }].concat(_toConsumableArray(publicKeyObjectArray));\n                _context.next = 4;\n                return store.account.cache(filterArray);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function prepare(_x) {\n        return _prepare.apply(this, arguments);\n      }\n\n      return prepare;\n    }()\n  }, {\n    key: \"verifyAgainstTransactions\",\n    value: function verifyAgainstTransactions(transactions) {\n      var _this2 = this;\n\n      var sameTypeTransactions = transactions.filter(function (tx) {\n        return tx.senderPublicKey === _this2.senderPublicKey && tx.type === _this2.type;\n      }).map(function (tx) {\n        return new VoteTransaction(tx);\n      });\n      var publicKeys = this.asset.votes.map(function (vote) {\n        return vote.substring(1);\n      });\n      return sameTypeTransactions.reduce(function (previous, tx) {\n        var conflictingVotes = tx.asset.votes.map(function (vote) {\n          return vote.substring(1);\n        }).filter(function (publicKey) {\n          return publicKeys.includes(publicKey);\n        });\n\n        if (conflictingVotes.length > 0) {\n          return [].concat(_toConsumableArray(previous), [new errors_1.TransactionError(\"Transaction includes conflicting votes: \".concat(conflictingVotes.toString()), _this2.id, '.asset.votes')]);\n        }\n\n        return previous;\n      }, []);\n    }\n  }, {\n    key: \"validateAsset\",\n    value: function validateAsset() {\n      validation_1.validator.validate(exports.voteAssetFormatSchema, this.asset);\n      var errors = errors_1.convertToAssetError(this.id, validation_1.validator.errors);\n\n      if (!this.amount.eq(0)) {\n        errors.push(new errors_1.TransactionError('Amount must be zero for vote transaction', this.id, '.amount', this.amount.toString(), '0'));\n      }\n\n      try {\n        validation_1.validateAddress(this.recipientId);\n      } catch (err) {\n        errors.push(new errors_1.TransactionError('RecipientId must be set for vote transaction', this.id, '.recipientId', this.recipientId));\n      }\n\n      if (this.recipientPublicKey && this.recipientId !== lisk_cryptography_1.getAddressFromPublicKey(this.recipientPublicKey)) {\n        errors.push(new errors_1.TransactionError('recipientId does not match recipientPublicKey.', this.id, '.recipientId'));\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"applyAsset\",\n    value: function applyAsset(store) {\n      var _this3 = this;\n\n      var errors = [];\n      var sender = store.account.get(this.senderId);\n      var balanceError = utils_1.verifyAmountBalance(this.id, sender, this.amount, this.fee);\n\n      if (balanceError) {\n        errors.push(balanceError);\n      }\n\n      var updatedSenderBalance = new BigNum(sender.balance).sub(this.amount);\n      this.asset.votes.forEach(function (actionVotes) {\n        var vote = actionVotes.substring(1);\n        var voteAccount = store.account.find(function (account) {\n          return account.publicKey === vote;\n        });\n\n        if (!voteAccount || voteAccount && (voteAccount.username === undefined || voteAccount.username === '' || voteAccount.username === null)) {\n          errors.push(new errors_1.TransactionError(\"\".concat(vote, \" is not a delegate.\"), _this3.id, '.asset.votes'));\n        }\n      });\n      var senderVotes = sender.votedDelegatesPublicKeys || [];\n      this.asset.votes.forEach(function (vote) {\n        var action = vote.charAt(0);\n        var publicKey = vote.substring(1);\n\n        if (action === PREFIX_UPVOTE && senderVotes.includes(publicKey)) {\n          errors.push(new errors_1.TransactionError(\"\".concat(publicKey, \" is already voted.\"), _this3.id, '.asset.votes'));\n        } else if (action === PREFIX_UNVOTE && !senderVotes.includes(publicKey)) {\n          errors.push(new errors_1.TransactionError(\"\".concat(publicKey, \" is not voted.\"), _this3.id, '.asset.votes'));\n        }\n      });\n      var upvotes = this.asset.votes.filter(function (vote) {\n        return vote.charAt(0) === PREFIX_UPVOTE;\n      }).map(function (vote) {\n        return vote.substring(1);\n      });\n      var unvotes = this.asset.votes.filter(function (vote) {\n        return vote.charAt(0) === PREFIX_UNVOTE;\n      }).map(function (vote) {\n        return vote.substring(1);\n      });\n      var originalVotes = sender.votedDelegatesPublicKeys || [];\n      var votedDelegatesPublicKeys = [].concat(_toConsumableArray(originalVotes), _toConsumableArray(upvotes)).filter(function (vote) {\n        return !unvotes.includes(vote);\n      });\n\n      if (votedDelegatesPublicKeys.length > MAX_VOTE_PER_ACCOUNT) {\n        errors.push(new errors_1.TransactionError(\"Vote cannot exceed \".concat(MAX_VOTE_PER_ACCOUNT, \" but has \").concat(votedDelegatesPublicKeys.length, \".\"), this.id, '.asset.votes', votedDelegatesPublicKeys.length.toString(), MAX_VOTE_PER_ACCOUNT));\n      }\n\n      var updatedSender = Object.assign({}, sender, {\n        balance: updatedSenderBalance.toString(),\n        votedDelegatesPublicKeys: votedDelegatesPublicKeys\n      });\n      store.account.set(updatedSender.address, updatedSender);\n      return errors;\n    }\n  }, {\n    key: \"undoAsset\",\n    value: function undoAsset(store) {\n      var errors = [];\n      var sender = store.account.get(this.senderId);\n      var updatedSenderBalance = new BigNum(sender.balance).add(this.amount);\n\n      if (updatedSenderBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n        errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.amount.toString()));\n      }\n\n      var upvotes = this.asset.votes.filter(function (vote) {\n        return vote.charAt(0) === PREFIX_UPVOTE;\n      }).map(function (vote) {\n        return vote.substring(1);\n      });\n      var unvotes = this.asset.votes.filter(function (vote) {\n        return vote.charAt(0) === PREFIX_UNVOTE;\n      }).map(function (vote) {\n        return vote.substring(1);\n      });\n      var originalVotes = sender.votedDelegatesPublicKeys || [];\n      var votedDelegatesPublicKeys = [].concat(_toConsumableArray(originalVotes), _toConsumableArray(unvotes)).filter(function (vote) {\n        return !upvotes.includes(vote);\n      });\n\n      if (votedDelegatesPublicKeys.length > MAX_VOTE_PER_ACCOUNT) {\n        errors.push(new errors_1.TransactionError(\"Vote cannot exceed \".concat(MAX_VOTE_PER_ACCOUNT, \" but has \").concat(votedDelegatesPublicKeys.length, \".\"), this.id, '.asset.votes', votedDelegatesPublicKeys.length.toString(), MAX_VOTE_PER_ACCOUNT));\n      }\n\n      var updatedSender = Object.assign({}, sender, {\n        balance: updatedSenderBalance.toString(),\n        votedDelegatesPublicKeys: votedDelegatesPublicKeys\n      });\n      store.account.set(updatedSender.address, updatedSender);\n      return errors;\n    }\n  }, {\n    key: \"assetFromSync\",\n    value: function assetFromSync(raw) {\n      if (!raw.v_votes) {\n        return undefined;\n      }\n\n      var votes = raw.v_votes.split(',');\n      return {\n        votes: votes\n      };\n    }\n  }]);\n\n  return VoteTransaction;\n}(base_transaction_1.BaseTransaction);\n\nVoteTransaction.TYPE = 3;\nVoteTransaction.FEE = constants_1.VOTE_FEE.toString();\nexports.VoteTransaction = VoteTransaction;","map":{"version":3,"sources":["../src/3_vote_transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BigNum = require(\"@liskhq/bignum\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst base_transaction_1 = require(\"./base_transaction\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"./utils\");\nconst validation_1 = require(\"./utils/validation\");\nconst PREFIX_UPVOTE = '+';\nconst PREFIX_UNVOTE = '-';\nconst MAX_VOTE_PER_ACCOUNT = 101;\nconst MIN_VOTE_PER_TX = 1;\nconst MAX_VOTE_PER_TX = 33;\nexports.voteAssetFormatSchema = {\n    type: 'object',\n    required: ['votes'],\n    properties: {\n        votes: {\n            type: 'array',\n            minItems: MIN_VOTE_PER_TX,\n            maxItems: MAX_VOTE_PER_TX,\n            items: {\n                type: 'string',\n                format: 'signedPublicKey',\n            },\n            uniqueSignedPublicKeys: true,\n        },\n    },\n};\nclass VoteTransaction extends base_transaction_1.BaseTransaction {\n    constructor(rawTransaction) {\n        super(rawTransaction);\n        const tx = (typeof rawTransaction === 'object' && rawTransaction !== null\n            ? rawTransaction\n            : {});\n        this.asset = (tx.asset || {});\n        this.containsUniqueData = true;\n    }\n    assetToBytes() {\n        return Buffer.from(this.asset.votes.join(''), 'utf8');\n    }\n    async prepare(store) {\n        const publicKeyObjectArray = this.asset.votes.map(pkWithAction => {\n            const publicKey = pkWithAction.slice(1);\n            return {\n                publicKey,\n            };\n        });\n        const filterArray = [\n            {\n                address: this.senderId,\n            },\n            ...publicKeyObjectArray,\n        ];\n        await store.account.cache(filterArray);\n    }\n    verifyAgainstTransactions(transactions) {\n        const sameTypeTransactions = transactions\n            .filter(tx => tx.senderPublicKey === this.senderPublicKey && tx.type === this.type)\n            .map(tx => new VoteTransaction(tx));\n        const publicKeys = this.asset.votes.map(vote => vote.substring(1));\n        return sameTypeTransactions.reduce((previous, tx) => {\n            const conflictingVotes = tx.asset.votes\n                .map(vote => vote.substring(1))\n                .filter(publicKey => publicKeys.includes(publicKey));\n            if (conflictingVotes.length > 0) {\n                return [\n                    ...previous,\n                    new errors_1.TransactionError(`Transaction includes conflicting votes: ${conflictingVotes.toString()}`, this.id, '.asset.votes'),\n                ];\n            }\n            return previous;\n        }, []);\n    }\n    validateAsset() {\n        validation_1.validator.validate(exports.voteAssetFormatSchema, this.asset);\n        const errors = errors_1.convertToAssetError(this.id, validation_1.validator.errors);\n        if (!this.amount.eq(0)) {\n            errors.push(new errors_1.TransactionError('Amount must be zero for vote transaction', this.id, '.amount', this.amount.toString(), '0'));\n        }\n        try {\n            validation_1.validateAddress(this.recipientId);\n        }\n        catch (err) {\n            errors.push(new errors_1.TransactionError('RecipientId must be set for vote transaction', this.id, '.recipientId', this.recipientId));\n        }\n        if (this.recipientPublicKey &&\n            this.recipientId !== lisk_cryptography_1.getAddressFromPublicKey(this.recipientPublicKey)) {\n            errors.push(new errors_1.TransactionError('recipientId does not match recipientPublicKey.', this.id, '.recipientId'));\n        }\n        return errors;\n    }\n    applyAsset(store) {\n        const errors = [];\n        const sender = store.account.get(this.senderId);\n        const balanceError = utils_1.verifyAmountBalance(this.id, sender, this.amount, this.fee);\n        if (balanceError) {\n            errors.push(balanceError);\n        }\n        const updatedSenderBalance = new BigNum(sender.balance).sub(this.amount);\n        this.asset.votes.forEach(actionVotes => {\n            const vote = actionVotes.substring(1);\n            const voteAccount = store.account.find(account => account.publicKey === vote);\n            if (!voteAccount ||\n                (voteAccount &&\n                    (voteAccount.username === undefined ||\n                        voteAccount.username === '' ||\n                        voteAccount.username === null))) {\n                errors.push(new errors_1.TransactionError(`${vote} is not a delegate.`, this.id, '.asset.votes'));\n            }\n        });\n        const senderVotes = sender.votedDelegatesPublicKeys || [];\n        this.asset.votes.forEach(vote => {\n            const action = vote.charAt(0);\n            const publicKey = vote.substring(1);\n            if (action === PREFIX_UPVOTE && senderVotes.includes(publicKey)) {\n                errors.push(new errors_1.TransactionError(`${publicKey} is already voted.`, this.id, '.asset.votes'));\n            }\n            else if (action === PREFIX_UNVOTE && !senderVotes.includes(publicKey)) {\n                errors.push(new errors_1.TransactionError(`${publicKey} is not voted.`, this.id, '.asset.votes'));\n            }\n        });\n        const upvotes = this.asset.votes\n            .filter(vote => vote.charAt(0) === PREFIX_UPVOTE)\n            .map(vote => vote.substring(1));\n        const unvotes = this.asset.votes\n            .filter(vote => vote.charAt(0) === PREFIX_UNVOTE)\n            .map(vote => vote.substring(1));\n        const originalVotes = sender.votedDelegatesPublicKeys || [];\n        const votedDelegatesPublicKeys = [\n            ...originalVotes,\n            ...upvotes,\n        ].filter(vote => !unvotes.includes(vote));\n        if (votedDelegatesPublicKeys.length > MAX_VOTE_PER_ACCOUNT) {\n            errors.push(new errors_1.TransactionError(`Vote cannot exceed ${MAX_VOTE_PER_ACCOUNT} but has ${votedDelegatesPublicKeys.length}.`, this.id, '.asset.votes', votedDelegatesPublicKeys.length.toString(), MAX_VOTE_PER_ACCOUNT));\n        }\n        const updatedSender = Object.assign({}, sender, { balance: updatedSenderBalance.toString(), votedDelegatesPublicKeys });\n        store.account.set(updatedSender.address, updatedSender);\n        return errors;\n    }\n    undoAsset(store) {\n        const errors = [];\n        const sender = store.account.get(this.senderId);\n        const updatedSenderBalance = new BigNum(sender.balance).add(this.amount);\n        if (updatedSenderBalance.gt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n            errors.push(new errors_1.TransactionError('Invalid amount', this.id, '.amount', this.amount.toString()));\n        }\n        const upvotes = this.asset.votes\n            .filter(vote => vote.charAt(0) === PREFIX_UPVOTE)\n            .map(vote => vote.substring(1));\n        const unvotes = this.asset.votes\n            .filter(vote => vote.charAt(0) === PREFIX_UNVOTE)\n            .map(vote => vote.substring(1));\n        const originalVotes = sender.votedDelegatesPublicKeys || [];\n        const votedDelegatesPublicKeys = [\n            ...originalVotes,\n            ...unvotes,\n        ].filter(vote => !upvotes.includes(vote));\n        if (votedDelegatesPublicKeys.length > MAX_VOTE_PER_ACCOUNT) {\n            errors.push(new errors_1.TransactionError(`Vote cannot exceed ${MAX_VOTE_PER_ACCOUNT} but has ${votedDelegatesPublicKeys.length}.`, this.id, '.asset.votes', votedDelegatesPublicKeys.length.toString(), MAX_VOTE_PER_ACCOUNT));\n        }\n        const updatedSender = Object.assign({}, sender, { balance: updatedSenderBalance.toString(), votedDelegatesPublicKeys });\n        store.account.set(updatedSender.address, updatedSender);\n        return errors;\n    }\n    assetFromSync(raw) {\n        if (!raw.v_votes) {\n            return undefined;\n        }\n        const votes = raw.v_votes.split(',');\n        return { votes };\n    }\n}\nVoteTransaction.TYPE = 3;\nVoteTransaction.FEE = constants_1.VOTE_FEE.toString();\nexports.VoteTransaction = VoteTransaction;\n//# sourceMappingURL=3_vote_transaction.js.map"]},"metadata":{},"sourceType":"script"}