{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nconst _9_second_signature_transaction_1 = require(\"./9_second_signature_transaction\");\n\nconst utils_1 = require(\"./utils\");\n\nconst validateInputs = ({\n  secondPassphrase,\n  networkIdentifier\n}) => {\n  if (typeof secondPassphrase !== 'string') {\n    throw new Error('Please provide a secondPassphrase. Expected string.');\n  }\n\n  lisk_validator_1.validateNetworkIdentifier(networkIdentifier);\n};\n\nexports.registerSecondPassphrase = inputs => {\n  validateInputs(inputs);\n  const {\n    passphrase,\n    secondPassphrase,\n    networkIdentifier\n  } = inputs;\n  const {\n    publicKey\n  } = lisk_cryptography_1.getKeys(secondPassphrase);\n  const transaction = { ...utils_1.createBaseTransaction(inputs),\n    type: 9,\n    asset: {\n      publicKey\n    },\n    networkIdentifier\n  };\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  const secondSignatureTransaction = new _9_second_signature_transaction_1.SecondSignatureTransaction(transaction);\n  secondSignatureTransaction.sign(passphrase);\n  return secondSignatureTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/register_second_passphrase.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,MAAA,iCAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AASA,MAAM,cAAc,GAAG,CAAC;AACvB,EAAA,gBADuB;AAEvB,EAAA;AAFuB,CAAD,KAMZ;AACV,MAAI,OAAO,gBAAP,KAA4B,QAAhC,EAA0C;AACzC,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACA;;AAED,EAAA,gBAAA,CAAA,yBAAA,CAA0B,iBAA1B;AACA,CAZD;;AAca,OAAA,CAAA,wBAAA,GACZ,MADuC,IAEV;AAC7B,EAAA,cAAc,CAAC,MAAD,CAAd;AACA,QAAM;AAAE,IAAA,UAAF;AAAc,IAAA,gBAAd;AAAgC,IAAA;AAAhC,MAAsD,MAA5D;AACA,QAAM;AAAE,IAAA;AAAF,MAAgB,mBAAA,CAAA,OAAA,CAAQ,gBAAR,CAAtB;AAEA,QAAM,WAAW,GAAG,EACnB,GAAG,OAAA,CAAA,qBAAA,CAAsB,MAAtB,CADgB;AAEnB,IAAA,IAAI,EAAE,CAFa;AAGnB,IAAA,KAAK,EAAE;AAAE,MAAA;AAAF,KAHY;AAInB,IAAA;AAJmB,GAApB;;AAOA,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,WAAP;AACA;;AAED,QAAM,0BAA0B,GAAG,IAAI,iCAAA,CAAA,0BAAJ,CAClC,WADkC,CAAnC;AAGA,EAAA,0BAA0B,CAAC,IAA3B,CAAgC,UAAhC;AAEA,SAAO,0BAA0B,CAAC,MAA3B,EAAP;AACA,CAxBY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst _9_second_signature_transaction_1 = require(\"./9_second_signature_transaction\");\nconst utils_1 = require(\"./utils\");\nconst validateInputs = ({ secondPassphrase, networkIdentifier, }) => {\n    if (typeof secondPassphrase !== 'string') {\n        throw new Error('Please provide a secondPassphrase. Expected string.');\n    }\n    lisk_validator_1.validateNetworkIdentifier(networkIdentifier);\n};\nexports.registerSecondPassphrase = (inputs) => {\n    validateInputs(inputs);\n    const { passphrase, secondPassphrase, networkIdentifier } = inputs;\n    const { publicKey } = lisk_cryptography_1.getKeys(secondPassphrase);\n    const transaction = {\n        ...utils_1.createBaseTransaction(inputs),\n        type: 9,\n        asset: { publicKey },\n        networkIdentifier,\n    };\n    if (!passphrase) {\n        return transaction;\n    }\n    const secondSignatureTransaction = new _9_second_signature_transaction_1.SecondSignatureTransaction(transaction);\n    secondSignatureTransaction.sign(passphrase);\n    return secondSignatureTransaction.toJSON();\n};\n//# sourceMappingURL=register_second_passphrase.js.map"]},"metadata":{},"sourceType":"script"}