{"ast":null,"code":"var _jsxFileName = \"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\src\\\\components\\\\FormPayment.js\";\nimport React, { useState, useEffect, Component } from 'react';\nimport api from '../services/api';\nimport '../styles.css';\n\nconst cryptography = require('@liskhq/lisk-cryptography');\n\nconst transaction = require(\"@liskhq/lisk-transactions\");\n\nconst FoodRequest = require(\"liskrestaurant_transactions\");\n\nclass FormPayment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      let name = event.target.name;\n      let val = event.target.value;\n      this.state({\n        [name]: val\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n\n      if (this.state.orderstring !== null && this.state.orderstring !== undefined) {\n        this.state.orderstring = this.state.orderstring.split(\"&\");\n      }\n\n      const username = await api.post(\"/cryptography\", {\n        text: this.state.orderstring[5].split('=')[1]\n      });\n      const phone = await api.post(\"/cryptography\", {\n        text: this.state.orderstring[6].split('=')[1]\n      });\n      const deliveryaddress = await api.post(\"/cryptography\", {\n        text: this.state.orderstring[7].split('=')[1]\n      });\n      const observation = \"\";\n\n      if (this.state.orderstring[8] !== undefined) {\n        observation = await api.post(\"/cryptography\", {\n          text: this.state.orderstring[8].split('=')[1]\n        });\n      }\n\n      const publicKey = cryptography.getPrivateAndPublicKeyFromPassphrase(this.state.passphrase).publicKey;\n      const clientData = cryptography.encryptMessageWithPassphrase(this.state.orderstring[5].split('=')[1].concat(' ***Field*** ').concat(this.state.orderstring[6].split('=')[1]).concat(' ***Field*** ').concat(this.state.orderstring[7].split('=')[1]).concat(' ***Field*** ').concat(this.state.orderstring[8].split('=')[1]), this.state.passphrase, publicKey);\n      const networkIdentifier = cryptography.getNetworkIdentifier(\"23ce0366ef0a14a91e5fd4b1591fc880ffbef9d988ff8bebf8f3666b0c09597d\", \"Lisk\"); //const encryptedclient= cryptography.encryptMessageWithPassphrase(passphrase, passphrase, orderstring[9].split('=')[1]);\n\n      const txFood = new FoodRequest({\n        asset: {\n          name: this.state.orderstring[2].split('=')[1],\n          description: this.state.orderstring[2].split('=')[1],\n          username: username.data.response,\n          phone: phone.data.response,\n          deliveryaddress: deliveryaddress.data.response,\n          foodType: this.state.orderstring[3].split('=')[1],\n          observation: observation.data !== undefined ? observation.data.response : \"\",\n          clientData: clientData.encryptedMessage,\n          clientNonce: clientData.nonce,\n          amount: this.state.orderstring[1].split('=')[1].toString(),\n          recipientId: this.state.orderstring[0].split('=')[1],\n          //restaurant lisk address\n          //key: encryptedclient.encryptedMessage,\n          //keynonce: encryptedclient.nonce,\n          clientpublickey: cryptography.getAddressAndPublicKeyFromPassphrase(this.state.passphrase).publicKey\n        },\n        timestamp: transaction.utils.getTimeFromBlockchainEpoch(new Date()),\n        networkIdentifier: networkIdentifier\n      });\n      txFood.sign(this.state.passphrase);\n      /*await onSubmit({         \r\n          txFood            \r\n      });*/\n    };\n\n    this.state = {\n      passphrase: '',\n      orderstring: props.orderstring,\n      response: {\n        meta: {\n          status: false\n        }\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"content\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, \"Your Lisk Passphrase\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      id: \"passphrase\",\n      name: \"passphrase\",\n      required: true,\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, \"copy this passphrase and test above if desired: creek own stem final gate scrub live shallow stage host concert they\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }, \"Order\")))));\n  }\n\n}\n\nexport default FormPayment;","map":{"version":3,"sources":["C:/PoC/restaurant_sidechain/web/src/components/FormPayment.js"],"names":["React","useState","useEffect","Component","api","cryptography","require","transaction","FoodRequest","FormPayment","constructor","props","handleChange","event","name","target","val","value","state","handleSubmit","e","preventDefault","orderstring","undefined","split","username","post","text","phone","deliveryaddress","observation","publicKey","getPrivateAndPublicKeyFromPassphrase","passphrase","clientData","encryptMessageWithPassphrase","concat","networkIdentifier","getNetworkIdentifier","txFood","asset","description","data","response","foodType","encryptedMessage","clientNonce","nonce","amount","toString","recipientId","clientpublickey","getAddressAndPublicKeyFromPassphrase","timestamp","utils","getTimeFromBlockchainEpoch","Date","sign","meta","status","render"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Component } from 'react';\r\nimport api from '../services/api';\r\nimport '../styles.css';\r\n\r\nconst cryptography = require('@liskhq/lisk-cryptography');\r\nconst transaction = require(\"@liskhq/lisk-transactions\");\r\nconst FoodRequest = require(\"liskrestaurant_transactions\");\r\n\r\nclass FormPayment extends Component{\r\n    constructor (props){        \r\n        super(props);\r\n\r\n        this.state = {\r\n            passphrase: '',\r\n            orderstring: props.orderstring,\r\n            response: { meta: { status: false }},\r\n        }\r\n    }\r\n    \r\n    handleChange = (event) => {\r\n        let name = event.target.name;\r\n        let val = event.target.value;\r\n        this.state({[name]: val});\r\n    };       \r\n    \r\n    handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n                \r\n        if (this.state.orderstring !== null && this.state.orderstring !== undefined){    \r\n            this.state.orderstring = this.state.orderstring.split(\"&\");                                      \r\n        }\r\n\r\n        const username = await api.post(\"/cryptography\", { text: this.state.orderstring[5].split('=')[1] });\r\n        const phone = await api.post(\"/cryptography\", { text: this.state.orderstring[6].split('=')[1] });\r\n        const deliveryaddress = await api.post(\"/cryptography\", { text: this.state.orderstring[7].split('=')[1] });\r\n        const observation = \"\";\r\n        if (this.state.orderstring[8] !== undefined){\r\n            observation = await api.post(\"/cryptography\", { text: this.state.orderstring[8].split('=')[1] });\r\n        }        \r\n        \r\n        const publicKey = cryptography.getPrivateAndPublicKeyFromPassphrase(this.state.passphrase).publicKey;\r\n\r\n        const clientData = cryptography.encryptMessageWithPassphrase(\r\n            this.state.orderstring[5].split('=')[1].concat(' ***Field*** ')\r\n            .concat(this.state.orderstring[6].split('=')[1]).concat(' ***Field*** ')\r\n            .concat(this.state.orderstring[7].split('=')[1]).concat(' ***Field*** ')\r\n            .concat(this.state.orderstring[8].split('=')[1]),\r\n            this.state.passphrase,\r\n            publicKey\r\n            );                            \r\n\r\n        const networkIdentifier = cryptography.getNetworkIdentifier(\r\n            \"23ce0366ef0a14a91e5fd4b1591fc880ffbef9d988ff8bebf8f3666b0c09597d\",\r\n            \"Lisk\",\r\n        );       \r\n\r\n        //const encryptedclient= cryptography.encryptMessageWithPassphrase(passphrase, passphrase, orderstring[9].split('=')[1]);\r\n\r\n        const txFood = new FoodRequest({\r\n            asset: {\r\n                name: this.state.orderstring[2].split('=')[1],\r\n                description: this.state.orderstring[2].split('=')[1],\r\n                username: username.data.response,\r\n                phone: phone.data.response,\r\n                deliveryaddress: deliveryaddress.data.response,\r\n                foodType: this.state.orderstring[3].split('=')[1],\r\n                observation: observation.data !== undefined ? observation.data.response : \"\",\r\n                clientData: clientData.encryptedMessage,\r\n                clientNonce: clientData.nonce,\r\n                amount: this.state.orderstring[1].split('=')[1].toString(),\r\n                recipientId: this.state.orderstring[0].split('=')[1], //restaurant lisk address\r\n                //key: encryptedclient.encryptedMessage,\r\n                //keynonce: encryptedclient.nonce,\r\n                clientpublickey: cryptography.getAddressAndPublicKeyFromPassphrase(this.state.passphrase).publicKey\r\n            },                \r\n            timestamp: transaction.utils.getTimeFromBlockchainEpoch(new Date()),\r\n            networkIdentifier: networkIdentifier\r\n        });             \r\n\r\n        txFood.sign(this.state.passphrase);                \r\n\r\n        /*await onSubmit({         \r\n            txFood            \r\n        });*/\r\n                       \r\n    }    \r\n\r\n    render() {\r\n    return (\r\n        <div id=\"app\">\r\n            <div id=\"content\" align=\"center\">                \r\n                <form /*onSubmit={handleSubmit}*/>                                  \r\n                    <div>\r\n                        <label>Your Lisk Passphrase</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"password\" id=\"passphrase\" name=\"passphrase\" required onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div>\r\n                        <label>copy this passphrase and test above if desired: creek own stem final gate scrub live shallow stage host concert they</label>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\">Order</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default FormPayment;\r\n"]},"metadata":{},"sourceType":"module"}