{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nconst base_transaction_1 = require(\"./base_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst errors_1 = require(\"./errors\");\n\nconst utils_1 = require(\"./utils\");\n\nexports.secondSignatureAssetFormatSchema = {\n  type: 'object',\n  required: ['publicKey'],\n  properties: {\n    publicKey: {\n      type: 'string',\n      format: 'publicKey'\n    }\n  }\n};\n\nclass SecondSignatureTransaction extends base_transaction_1.BaseTransaction {\n  constructor(rawTransaction) {\n    super(rawTransaction);\n    const tx = typeof rawTransaction === 'object' && rawTransaction !== null ? rawTransaction : {};\n    this.asset = tx.asset || {\n      signature: {}\n    };\n  }\n\n  assetToBytes() {\n    const {\n      publicKey\n    } = this.asset;\n    return lisk_cryptography_1.hexToBuffer(publicKey);\n  }\n\n  async prepare(store) {\n    await store.account.cache([{\n      address: this.senderId\n    }]);\n  }\n\n  verifyAgainstTransactions(transactions) {\n    return transactions.filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey).map(tx => new errors_1.TransactionError('Register second signature only allowed once per account.', tx.id, '.asset.signature'));\n  }\n\n  validateAsset() {\n    const schemaErrors = lisk_validator_1.validator.validate(exports.secondSignatureAssetFormatSchema, this.asset);\n    const errors = errors_1.convertToAssetError(this.id, schemaErrors);\n    return errors;\n  }\n\n  applyAsset(store) {\n    const errors = [];\n    const sender = store.account.get(this.senderId);\n\n    if (sender.secondPublicKey) {\n      errors.push(new errors_1.TransactionError('Register second signature only allowed once per account.', this.id, '.secondPublicKey'));\n    }\n\n    const updatedSender = { ...sender,\n      secondPublicKey: this.asset.publicKey,\n      secondSignature: 1\n    };\n    store.account.set(updatedSender.address, updatedSender);\n    return errors;\n  }\n\n  undoAsset(store) {\n    const sender = store.account.get(this.senderId);\n    const resetSender = { ...sender,\n      secondPublicKey: null,\n      secondSignature: 0\n    };\n    store.account.set(resetSender.address, resetSender);\n    return [];\n  }\n\n  sign(passphrase) {\n    this._signature = undefined;\n    this._signSignature = undefined;\n    const networkIdentifierBytes = lisk_cryptography_1.hexToBuffer(this._networkIdentifier);\n    const transactionWithNetworkIdentifierBytes = Buffer.concat([networkIdentifierBytes, this.getBytes()]);\n    this._signature = lisk_cryptography_1.signData(lisk_cryptography_1.hash(transactionWithNetworkIdentifierBytes), passphrase);\n    this._id = utils_1.getId(this.getBytes());\n  }\n\n}\n\nexports.SecondSignatureTransaction = SecondSignatureTransaction;\nSecondSignatureTransaction.TYPE = 9;\nSecondSignatureTransaction.FEE = constants_1.SIGNATURE_FEE.toString();","map":{"version":3,"sources":["../src/9_second_signature_transaction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst base_transaction_1 = require(\"./base_transaction\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst utils_1 = require(\"./utils\");\nexports.secondSignatureAssetFormatSchema = {\n    type: 'object',\n    required: ['publicKey'],\n    properties: {\n        publicKey: {\n            type: 'string',\n            format: 'publicKey',\n        },\n    },\n};\nclass SecondSignatureTransaction extends base_transaction_1.BaseTransaction {\n    constructor(rawTransaction) {\n        super(rawTransaction);\n        const tx = (typeof rawTransaction === 'object' && rawTransaction !== null\n            ? rawTransaction\n            : {});\n        this.asset = (tx.asset || { signature: {} });\n    }\n    assetToBytes() {\n        const { publicKey } = this.asset;\n        return lisk_cryptography_1.hexToBuffer(publicKey);\n    }\n    async prepare(store) {\n        await store.account.cache([\n            {\n                address: this.senderId,\n            },\n        ]);\n    }\n    verifyAgainstTransactions(transactions) {\n        return transactions\n            .filter(tx => tx.type === this.type && tx.senderPublicKey === this.senderPublicKey)\n            .map(tx => new errors_1.TransactionError('Register second signature only allowed once per account.', tx.id, '.asset.signature'));\n    }\n    validateAsset() {\n        const schemaErrors = lisk_validator_1.validator.validate(exports.secondSignatureAssetFormatSchema, this.asset);\n        const errors = errors_1.convertToAssetError(this.id, schemaErrors);\n        return errors;\n    }\n    applyAsset(store) {\n        const errors = [];\n        const sender = store.account.get(this.senderId);\n        if (sender.secondPublicKey) {\n            errors.push(new errors_1.TransactionError('Register second signature only allowed once per account.', this.id, '.secondPublicKey'));\n        }\n        const updatedSender = {\n            ...sender,\n            secondPublicKey: this.asset.publicKey,\n            secondSignature: 1,\n        };\n        store.account.set(updatedSender.address, updatedSender);\n        return errors;\n    }\n    undoAsset(store) {\n        const sender = store.account.get(this.senderId);\n        const resetSender = {\n            ...sender,\n            secondPublicKey: null,\n            secondSignature: 0,\n        };\n        store.account.set(resetSender.address, resetSender);\n        return [];\n    }\n    sign(passphrase) {\n        this._signature = undefined;\n        this._signSignature = undefined;\n        const networkIdentifierBytes = lisk_cryptography_1.hexToBuffer(this._networkIdentifier);\n        const transactionWithNetworkIdentifierBytes = Buffer.concat([\n            networkIdentifierBytes,\n            this.getBytes(),\n        ]);\n        this._signature = lisk_cryptography_1.signData(lisk_cryptography_1.hash(transactionWithNetworkIdentifierBytes), passphrase);\n        this._id = utils_1.getId(this.getBytes());\n    }\n}\nexports.SecondSignatureTransaction = SecondSignatureTransaction;\nSecondSignatureTransaction.TYPE = 9;\nSecondSignatureTransaction.FEE = constants_1.SIGNATURE_FEE.toString();\n//# sourceMappingURL=9_second_signature_transaction.js.map"]},"metadata":{},"sourceType":"script"}