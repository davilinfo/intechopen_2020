{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tweetnacl = require(\"tweetnacl\");\n\nexports.box = (messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) => Buffer.from(tweetnacl.box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey));\n\nexports.openBox = (cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) => {\n  const originalMessage = tweetnacl.box.open(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey);\n\n  if (originalMessage === null) {\n    throw new Error('Failed to decrypt message');\n  }\n\n  return Buffer.from(originalMessage);\n};\n\nexports.signDetached = (messageBytes, privateKeyBytes) => Buffer.from(tweetnacl.sign.detached(messageBytes, privateKeyBytes));\n\nexports.verifyDetached = tweetnacl.sign.detached.verify;\n\nexports.getRandomBytes = length => Buffer.from(tweetnacl.randomBytes(length));\n\nexports.getKeyPair = hashedSeed => {\n  const {\n    publicKey,\n    secretKey\n  } = tweetnacl.sign.keyPair.fromSeed(hashedSeed);\n  return {\n    privateKeyBytes: Buffer.from(secretKey),\n    publicKeyBytes: Buffer.from(publicKey)\n  };\n};\n\nconst PRIVATE_KEY_LENGTH = 32;\n\nexports.getPublicKey = privateKey => {\n  const {\n    publicKey\n  } = tweetnacl.sign.keyPair.fromSeed(privateKey.slice(0, PRIVATE_KEY_LENGTH));\n  return Buffer.from(publicKey);\n};","map":{"version":3,"sources":["../../src/nacl/slow.ts"],"names":[],"mappings":";;;;;;AAcA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAGa,OAAA,CAAA,GAAA,GAA4B,CACxC,cADwC,EAExC,YAFwC,EAGxC,kBAHwC,EAIxC,mBAJwC,KAMxC,MAAM,CAAC,IAAP,CACC,SAAS,CAAC,GAAV,CACC,cADD,EAEC,YAFD,EAGC,kBAHD,EAIC,mBAJD,CADD,CANY;;AAeA,OAAA,CAAA,OAAA,GAAoC,CAChD,WADgD,EAEhD,UAFgD,EAGhD,kBAHgD,EAIhD,mBAJgD,KAK7C;AACH,QAAM,eAAe,GAAG,SAAS,CAAC,GAAV,CAAc,IAAd,CACvB,WADuB,EAEvB,UAFuB,EAGvB,kBAHuB,EAIvB,mBAJuB,CAAxB;;AAOA,MAAI,eAAe,KAAK,IAAxB,EAA8B;AAC7B,UAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACA;;AAED,SAAO,MAAM,CAAC,IAAP,CAAY,eAAZ,CAAP;AACA,CAlBY;;AAoBA,OAAA,CAAA,YAAA,GAA8C,CAC1D,YAD0D,EAE1D,eAF0D,KAGtD,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,IAAV,CAAe,QAAf,CAAwB,YAAxB,EAAsC,eAAtC,CAAZ,CAHQ;;AAKA,OAAA,CAAA,cAAA,GAEZ,SAAS,CAAC,IAAV,CAAe,QAAf,CAAwB,MAFZ;;AAIA,OAAA,CAAA,cAAA,GAAkD,MAAM,IACpE,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,WAAV,CAAsB,MAAtB,CAAZ,CADY;;AAGA,OAAA,CAAA,UAAA,GAA0C,UAAU,IAAG;AACnE,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA;AAAb,MAA2B,SAAS,CAAC,IAAV,CAAe,OAAf,CAAuB,QAAvB,CAAgC,UAAhC,CAAjC;AAEA,SAAO;AACN,IAAA,eAAe,EAAE,MAAM,CAAC,IAAP,CAAY,SAAZ,CADX;AAEN,IAAA,cAAc,EAAE,MAAM,CAAC,IAAP,CAAY,SAAZ;AAFV,GAAP;AAIA,CAPY;;AASb,MAAM,kBAAkB,GAAG,EAA3B;;AAEa,OAAA,CAAA,YAAA,GAA8C,UAAU,IAAG;AACvE,QAAM;AAAE,IAAA;AAAF,MAAgB,SAAS,CAAC,IAAV,CAAe,OAAf,CAAuB,QAAvB,CACrB,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,kBAApB,CADqB,CAAtB;AAIA,SAAO,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAP;AACA,CANY","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst tweetnacl = require(\"tweetnacl\");\r\nexports.box = (messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) => Buffer.from(tweetnacl.box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey));\r\nexports.openBox = (cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) => {\r\n    const originalMessage = tweetnacl.box.open(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey);\r\n    if (originalMessage === null) {\r\n        throw new Error('Failed to decrypt message');\r\n    }\r\n    return Buffer.from(originalMessage);\r\n};\r\nexports.signDetached = (messageBytes, privateKeyBytes) => Buffer.from(tweetnacl.sign.detached(messageBytes, privateKeyBytes));\r\nexports.verifyDetached = tweetnacl.sign.detached.verify;\r\nexports.getRandomBytes = length => Buffer.from(tweetnacl.randomBytes(length));\r\nexports.getKeyPair = hashedSeed => {\r\n    const { publicKey, secretKey } = tweetnacl.sign.keyPair.fromSeed(hashedSeed);\r\n    return {\r\n        privateKeyBytes: Buffer.from(secretKey),\r\n        publicKeyBytes: Buffer.from(publicKey),\r\n    };\r\n};\r\nconst PRIVATE_KEY_LENGTH = 32;\r\nexports.getPublicKey = privateKey => {\r\n    const { publicKey } = tweetnacl.sign.keyPair.fromSeed(privateKey.slice(0, PRIVATE_KEY_LENGTH));\r\n    return Buffer.from(publicKey);\r\n};\r\n//# sourceMappingURL=slow.js.map"]},"metadata":{},"sourceType":"script"}