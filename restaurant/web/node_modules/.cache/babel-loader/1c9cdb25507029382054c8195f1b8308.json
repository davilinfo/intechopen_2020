{"ast":null,"code":"var _objectSpread = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _require = require('@liskhq/lisk-transactions'),\n    BaseTransaction = _require.BaseTransaction,\n    TransactionError = _require.TransactionError,\n    utils = _require.utils;\n\nvar FoodTransaction = /*#__PURE__*/function (_BaseTransaction) {\n  \"use strict\";\n\n  _inherits(FoodTransaction, _BaseTransaction);\n\n  var _super = _createSuper(FoodTransaction);\n\n  function FoodTransaction() {\n    _classCallCheck(this, FoodTransaction);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FoodTransaction, [{\n    key: \"prepare\",\n\n    /* Prepare function stores both sender and recipient account in the cache so it is possible to\r\n       modify the accounts during the `applyAsset` and `undoAsset` steps. */\n    value: function () {\n      var _prepare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(store) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return store.account.cache([{\n                  address: this.recipientId\n                }, {\n                  address: this.senderId\n                }, {\n                  address: this.sidechainAccountId\n                }]);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function prepare(_x) {\n        return _prepare.apply(this, arguments);\n      }\n\n      return prepare;\n    }()\n  }, {\n    key: \"validateAsset\",\n    value: function validateAsset() {\n      var errors = [];\n\n      if (!utils.validateAddress(this.senderId)) {\n        errors.push(new TransactionError('Invalid client \"Lisk address\" defined on transaction', this.id, \"client lisk address\", this.senderId));\n      }\n\n      if (!utils.validatePublicKey(this.senderPublicKey)) {\n        errors.push(new TransactionError('Invalid client \"Lisk public key\" defined on transaction', this.id, \"client public key\", this.senderPublicKey));\n      }\n\n      if (!this.asset.description || typeof this.asset.description !== 'string' || this.asset.name.length > 1500) {\n        errors.push(new TransactionError('Invalid \"description\" defined on transaction', this.id, '.asset.description', this.asset.name, 'A string value no longer than 1500 characters'));\n      }\n\n      if (!this.asset.foodType || this.asset.foodType <= 0) {\n        errors.push(new TransactionError('Invalid \"food type\" defined on transaction', this.id, '.foodType', this.asset.foodType, 'A value bigger than 0'));\n      }\n\n      if (!this.asset.deliveryaddress) {\n        errors.push(new TransactionError('Invalid \"delivery address\" defined on transaction', this.id, '.deliveryaddress', this.asset.phone, 'A string value bigger than 0'));\n      }\n\n      if (!this.asset.phone) {\n        errors.push(new TransactionError('Invalid \"phone\" defined on transaction', this.id, '.phone', this.asset.phone, 'A value bigger than 0'));\n      }\n\n      if (!this.asset.username) {\n        errors.push(new TransactionError('Invalid \"username\" defined on transaction', this.id, '.username', this.asset.username, 'A string value bigger than 0'));\n      }\n\n      if (!this.amount || this.amount <= 0) {\n        errors.push(new TransactionError('Invalid \"value\" defined on transaction', this.id, '.amount', this.amount, 'A value bigger than 0'));\n      }\n\n      return errors;\n    }\n  }, {\n    key: \"applyAsset\",\n    value: function applyAsset(store) {\n      var errors = [];\n      var sender = store.account.get(this.senderId);\n\n      if (!sender) {\n        errors.push(new TransactionError('Invalid \"sender\", please verify your passphrase', this.id, '.sender', this.senderId, 'Verify your passpahrase and address'));\n      }\n\n      var senderBalanceDeducted = new utils.BigNum(sender.balance).sub(new utils.BigNum(this.amount));\n\n      if (senderBalanceDeducted < 0) {\n        errors.push(new TransactionError('Not enough \"balance\" for the transaction', this.id, '.amount', this.amount, 'Need a balance at least equal than amount'));\n      }\n\n      var updatedSender = _objectSpread({}, sender, {\n        balance: senderBalanceDeducted.toString()\n      });\n\n      store.account.set(sender.address, updatedSender);\n      var restaurantAccount = store.account.get(this.recipientId);\n      var restaurantBalanceWithFoodRequest = new utils.BigNum(restaurantAccount.balance).add(new utils.BigNum(this.amount)).sub(new utils.BigNum(this.sidechainFee));\n\n      var updatedRestaurantAccount = _objectSpread({}, restaurantAccount, {}, {\n        balance: restaurantBalanceWithFoodRequest.toString(),\n        asset: {\n          name: this.asset.name,\n          description: this.asset.description,\n          foodType: this.asset.foodType,\n          username: this.asset.username,\n          phone: this.asset.phone,\n          deliveryaddress: this.asset.deliveryaddress\n        }\n      });\n\n      store.account.set(restaurantAccount.address, updatedRestaurantAccount);\n      var sidechainAcc = store.account.get(this.sidechainAccountId);\n      var sidechainBalanceWithFee = new utils.BigNum(sidechainAcc.balance).add(new utils.BigNum(this.sidechainFee));\n\n      var updatedSidechainAccount = _objectSpread({}, sidechainAcc, {\n        balance: sidechainBalanceWithFee.toString(),\n        asset: {\n          message: \"fee\"\n        }\n      });\n\n      store.account.set(sidechainAcc.address, updatedSidechainAccount);\n      return errors;\n    }\n    /* UndoAsset function tells the blockchain how to rollback changes made in the applyAsset function.\r\n        The original balance for both the sender and restaurant account is restored.\r\n        In addition, the `asset` field for the restaurant account `null` is reseted, as it did not hold any previous data.*/\n\n    /* --- Revert sender account --- */\n\n  }, {\n    key: \"undoAsset\",\n    value: function undoAsset(store) {\n      var sender = store.account.get(this.senderId);\n      var senderBalanceWithFoodAmount = new utils.BigNum(sender.balance).add(new utils.BigNum(this.amount));\n\n      var updatedSender = _objectSpread({}, sender, {\n        balance: senderBalanceWithFoodAmount.toString()\n      });\n\n      store.account.set(sender.address, updatedSender);\n      var restaurantAccount = store.account.get(this.recipientId);\n      var restaurantBalanceWithFoodRequest = new utils.BigNum(restaurantAccount.balance).sub(new utils.BigNum(this.amount).add(new utils.BigNum(this.sidechainFee)));\n\n      var updatedRestaurantAccount = _objectSpread({}, sender, {}, {\n        balance: restaurantBalanceWithFoodRequest.toString(),\n        asset: null\n      });\n\n      store.account.set(restaurantAccount.address, updatedRestaurantAccount);\n      var sidechainAcc = store.account.get(this.sidechainAccount);\n      var sidechainBalanceWithoutFee = new utils.BigNum(sidechainAcc.balance).sub(new utils.BigNum(this.sidechainFee));\n\n      var updatedSidechainAccount = _objectSpread({}, sidechainAcc, {\n        balance: sidechainBalanceWithoutFee.toString()\n      });\n\n      store.account.set(sidechainAcc.address, updatedSidechainAccount);\n      return [];\n    }\n  }, {\n    key: \"sidechainAccountId\",\n    get: function get() {\n      return \"6181773985994883123L\";\n    }\n  }, {\n    key: \"sidechainFee\",\n    get: function get() {\n      return '50000000';\n    }\n  }], [{\n    key: \"TYPE\",\n    get: function get() {\n      return 20;\n    }\n  }, {\n    key: \"FEE\",\n    get: function get() {\n      return \"10000000\";\n    }\n  }]);\n\n  return FoodTransaction;\n}(BaseTransaction);\n\nmodule.exports = FoodTransaction;","map":{"version":3,"sources":["C:/PoC/restaurant_sidechain/web/node_modules/liskrestaurant_transactions/FoodTransaction.js"],"names":["require","BaseTransaction","TransactionError","utils","FoodTransaction","store","account","cache","address","recipientId","senderId","sidechainAccountId","errors","validateAddress","push","id","validatePublicKey","senderPublicKey","asset","description","name","length","foodType","deliveryaddress","phone","username","amount","sender","get","senderBalanceDeducted","BigNum","balance","sub","updatedSender","toString","set","restaurantAccount","restaurantBalanceWithFoodRequest","add","sidechainFee","updatedRestaurantAccount","sidechainAcc","sidechainBalanceWithFee","updatedSidechainAccount","message","senderBalanceWithFoodAmount","sidechainAccount","sidechainBalanceWithoutFee","module","exports"],"mappings":"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","sourcesContent":["const {\r\n    BaseTransaction,\r\n    TransactionError,\r\n    utils\r\n} = require('@liskhq/lisk-transactions');\r\n\r\nclass FoodTransaction extends BaseTransaction {\r\n\r\n    get sidechainAccountId () {\r\n        return \"6181773985994883123L\";\r\n    }\r\n\r\n    get sidechainFee () {\r\n        return '50000000';\r\n    }\r\n\r\n    static get TYPE() {\r\n        return 20;\r\n    }\r\n\r\n    static get FEE () {\r\n\t\treturn `10000000`;\r\n    };        \r\n\r\n    /* Prepare function stores both sender and recipient account in the cache so it is possible to\r\n       modify the accounts during the `applyAsset` and `undoAsset` steps. */\r\n    async prepare(store) {\r\n        await store.account.cache([\r\n            {\r\n                address: this.recipientId,\r\n            },\r\n            {\r\n                address: this.senderId,\r\n            },\r\n            {\r\n                address: this.sidechainAccountId\r\n            }\r\n        ]);\r\n    }\r\n\r\n    validateAsset(){\r\n        const errors = [];        \r\n\r\n        if(!utils.validateAddress(this.senderId)){\r\n            errors.push(new TransactionError(\r\n                'Invalid client \"Lisk address\" defined on transaction',\r\n                this.id,\r\n                \"client lisk address\",\r\n                this.senderId\r\n            ));\r\n        }\r\n\r\n        if (!utils.validatePublicKey(this.senderPublicKey)){\r\n            errors.push(new TransactionError(\r\n                'Invalid client \"Lisk public key\" defined on transaction',\r\n                this.id,\r\n                \"client public key\",\r\n                this.senderPublicKey\r\n            ));\r\n        }                               \r\n\r\n        if (!this.asset.description || typeof this.asset.description !== 'string' || this.asset.name.length > 1500){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"description\" defined on transaction',\r\n                    this.id,\r\n                    '.asset.description',\r\n                    this.asset.name,\r\n                    'A string value no longer than 1500 characters'\r\n                )\r\n            );\r\n        }\r\n\r\n        if (!this.asset.foodType || this.asset.foodType <= 0){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"food type\" defined on transaction',\r\n                    this.id,\r\n                    '.foodType',\r\n                    this.asset.foodType,\r\n                    'A value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n\r\n        if (!this.asset.deliveryaddress){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"delivery address\" defined on transaction',\r\n                    this.id,\r\n                    '.deliveryaddress',\r\n                    this.asset.phone,\r\n                    'A string value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n\r\n        if (!this.asset.phone){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"phone\" defined on transaction',\r\n                    this.id,\r\n                    '.phone',\r\n                    this.asset.phone,\r\n                    'A value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n\r\n        if (!this.asset.username){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"username\" defined on transaction',\r\n                    this.id,\r\n                    '.username',\r\n                    this.asset.username,\r\n                    'A string value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n        \r\n        if (!this.amount || this.amount <= 0){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"value\" defined on transaction',\r\n                    this.id,\r\n                    '.amount',\r\n                    this.amount,\r\n                    'A value bigger than 0'\r\n                )\r\n            );\r\n        }\r\n        return errors;\r\n    }\r\n\r\n    applyAsset(store){               \r\n        const errors = [];\r\n        \r\n        const sender = store.account.get(this.senderId);\r\n\r\n        if (!sender){           \r\n            errors.push(\r\n                new TransactionError(\r\n                    'Invalid \"sender\", please verify your passphrase',\r\n                    this.id,\r\n                    '.sender',\r\n                    this.senderId,\r\n                    'Verify your passpahrase and address'\r\n                )\r\n            );            \r\n        }\r\n\r\n        const senderBalanceDeducted = new utils.BigNum(sender.balance).sub(new utils.BigNum(this.amount));            \r\n\r\n        if (senderBalanceDeducted < 0){\r\n            errors.push(\r\n                new TransactionError(\r\n                    'Not enough \"balance\" for the transaction',\r\n                    this.id,\r\n                    '.amount',\r\n                    this.amount,\r\n                    'Need a balance at least equal than amount'\r\n                )\r\n            );\r\n        }\r\n\r\n        const updatedSender = {\r\n            ...sender,\r\n            balance: senderBalanceDeducted.toString()\r\n        }\r\n        store.account.set(sender.address, updatedSender);\r\n\r\n        const restaurantAccount = store.account.get(this.recipientId);\r\n        const restaurantBalanceWithFoodRequest = new utils.BigNum(restaurantAccount.balance).add(new utils.BigNum(this.amount)).sub(new utils.BigNum(this.sidechainFee)); \r\n        \r\n        const updatedRestaurantAccount = {...restaurantAccount, \r\n            ...{ \r\n                balance: restaurantBalanceWithFoodRequest.toString(),\r\n                asset: { \r\n                    name: this.asset.name, \r\n                    description: this.asset.description, \r\n                    foodType: this.asset.foodType, \r\n                    username: this.asset.username, \r\n                    phone: this.asset.phone, \r\n                    deliveryaddress: this.asset.deliveryaddress \r\n                }\r\n            }\r\n        };        \r\n\r\n        store.account.set(restaurantAccount.address, updatedRestaurantAccount);\r\n        \r\n        const sidechainAcc = store.account.get(this.sidechainAccountId);\r\n        const sidechainBalanceWithFee = new utils.BigNum(sidechainAcc.balance).add(new utils.BigNum(this.sidechainFee));\r\n        const updatedSidechainAccount = {\r\n            ...sidechainAcc,\r\n            balance: sidechainBalanceWithFee.toString(),\r\n            asset: {\r\n                message: \"fee\"\r\n            }\r\n        };\r\n\r\n        store.account.set(sidechainAcc.address, updatedSidechainAccount);\r\n                \r\n        return errors;\r\n    }\r\n\r\n    /* UndoAsset function tells the blockchain how to rollback changes made in the applyAsset function.\r\n        The original balance for both the sender and restaurant account is restored.\r\n        In addition, the `asset` field for the restaurant account `null` is reseted, as it did not hold any previous data.*/\r\n    /* --- Revert sender account --- */\r\n    undoAsset(store){\r\n        const sender = store.account.get(this.senderId);\r\n\r\n        const senderBalanceWithFoodAmount = new utils.BigNum(sender.balance).add(new utils.BigNum(this.amount));\r\n        const updatedSender = {\r\n            ...sender,\r\n            balance: senderBalanceWithFoodAmount.toString()\r\n        };\r\n        store.account.set(sender.address, updatedSender);\r\n\r\n        const restaurantAccount = store.account.get(this.recipientId);\r\n        const restaurantBalanceWithFoodRequest = new utils.BigNum(restaurantAccount.balance).sub(new utils.BigNum(this.amount).add(new utils.BigNum(this.sidechainFee)));\r\n\r\n        const updatedRestaurantAccount = {...sender, \r\n            ... { balance: restaurantBalanceWithFoodRequest.toString(),\r\n            asset: null }\r\n        };\r\n        store.account.set(restaurantAccount.address, updatedRestaurantAccount);\r\n\r\n        const sidechainAcc = store.account.get(this.sidechainAccount);\r\n        const sidechainBalanceWithoutFee = new utils.BigNum(sidechainAcc.balance).sub(new utils.BigNum(this.sidechainFee));\r\n\r\n        const updatedSidechainAccount = {\r\n            ...sidechainAcc,\r\n            balance: sidechainBalanceWithoutFee.toString()\r\n        };\r\n\r\n        store.account.set(sidechainAcc.address, updatedSidechainAccount);\r\n\r\n        return [];\r\n    }\r\n}\r\n\r\nmodule.exports = FoodTransaction;"]},"metadata":{},"sourceType":"script"}