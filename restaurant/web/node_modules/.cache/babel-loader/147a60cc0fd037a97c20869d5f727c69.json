{"ast":null,"code":"var _jsxFileName = \"C:\\\\PoC\\\\restaurant_sidechain\\\\web\\\\src\\\\components\\\\FormPayment.js\";\nimport React, { useState, useEffect } from 'react';\nimport api from '../services/api';\nimport '../styles.css';\n\nconst cryptography = require('@liskhq/lisk-cryptography');\n\nconst FoodRequest = require(\"liskrestaurant_transactions\");\n\nconst transaction = require(\"@liskhq/lisk-transactions\");\n\nfunction FormPayment({\n  onSubmit\n}, props) {\n  const [passphrase, setPassphrase] = useState('');\n  var orderstring = decodeURI(document.location.href.split(\"?\")[1]);\n\n  if (orderstring !== null && orderstring !== undefined) {\n    orderstring = orderstring.split(\"&\");\n  }\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    var username = await api.post(\"/cryptography\", {\n      text: orderstring[5].split('=')[1]\n    });\n    var phone = await api.post(\"/cryptography\", {\n      text: orderstring[6].split('=')[1]\n    });\n    var deliveryaddress = await api.post(\"/cryptography\", {\n      text: orderstring[7].split('=')[1]\n    });\n    var observation = \"\";\n\n    if (orderstring[8] !== undefined) {\n      observation = await api.post(\"/cryptography\", {\n        text: orderstring[8].split('=')[1]\n      });\n    }\n\n    const publicKey = cryptography.getPrivateAndPublicKeyFromPassphrase(passphrase).publicKey;\n    var clientData = cryptography.encryptMessageWithPassphrase(orderstring[5].split('=')[1].concat(' ***Field*** ').concat(orderstring[6].split('=')[1]).concat(' ***Field*** ').concat(orderstring[7].split('=')[1]).concat(' ***Field*** ').concat(orderstring[8].split('=')[1]), passphrase, publicKey);\n    const networkIdentifier = cryptography.getNetworkIdentifier(\"23ce0366ef0a14a91e5fd4b1591fc880ffbef9d988ff8bebf8f3666b0c09597d\", \"Lisk\");\n    var encryptedclient = cryptography.encryptMessageWithPassphrase(passphrase, passphrase, orderstring[9].split('=')[1]);\n    let txFood = new FoodRequest({\n      asset: {\n        name: orderstring[2].split('=')[1],\n        description: orderstring[2].split('=')[1],\n        username: username.data.response,\n        phone: phone.data.response,\n        deliveryaddress: deliveryaddress.data.response,\n        foodType: orderstring[3].split('=')[1],\n        observation: observation.data !== undefined ? observation.data.response : \"\",\n        clientData: clientData.encryptedMessage,\n        clientNonce: clientData.nonce,\n        amount: orderstring[1].split('=')[1].toString(),\n        recipientId: orderstring[0].split('=')[1],\n        //restaurant lisk address\n        key: encryptedclient.encryptedMessage,\n        keynonce: encryptedclient.nonce,\n        clientpublickey: cryptography.getAddressAndPublicKeyFromPassphrase(passphrase).publicKey\n      },\n      timestamp: transaction.utils.getTimeFromBlockchainEpoch(new Date()),\n      networkIdentifier: networkIdentifier\n    }); //txFood.sign(passphrase);                \n\n    await onSubmit({\n      txFood\n    });\n    setPassphrase('');\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"content\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, \"Your Lisk Passphrase\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    id: \"passphrase\",\n    name: \"passphrase\",\n    required: true,\n    onChange: e => setPassphrase(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }, \"copy this passphrase and test above if desired: creek own stem final gate scrub live shallow stage host concert they\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, \"Order\")))));\n}\n\nexport default FormPayment;","map":{"version":3,"sources":["C:/PoC/restaurant_sidechain/web/src/components/FormPayment.js"],"names":["React","useState","useEffect","api","cryptography","require","FoodRequest","transaction","FormPayment","onSubmit","props","passphrase","setPassphrase","orderstring","decodeURI","document","location","href","split","undefined","handleSubmit","e","preventDefault","username","post","text","phone","deliveryaddress","observation","publicKey","getPrivateAndPublicKeyFromPassphrase","clientData","encryptMessageWithPassphrase","concat","networkIdentifier","getNetworkIdentifier","encryptedclient","txFood","asset","name","description","data","response","foodType","encryptedMessage","clientNonce","nonce","amount","toString","recipientId","key","keynonce","clientpublickey","getAddressAndPublicKeyFromPassphrase","timestamp","utils","getTimeFromBlockchainEpoch","Date","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\nimport '../styles.css';\r\n\r\nconst cryptography = require('@liskhq/lisk-cryptography');\r\nconst FoodRequest = require(\"liskrestaurant_transactions\");\r\nconst transaction = require(\"@liskhq/lisk-transactions\");\r\n\r\nfunction FormPayment({onSubmit}, props){    \r\n    const [passphrase, setPassphrase] = useState('');    \r\n    \r\n    var orderstring = decodeURI(document.location.href.split(\"?\")[1]);\r\n        if (orderstring !== null && orderstring !== undefined){    \r\n            orderstring = orderstring.split(\"&\");                                      \r\n        }\r\n    \r\n    async function handleSubmit(e){\r\n        e.preventDefault();\r\n        \r\n        var username = await api.post(\"/cryptography\", { text: orderstring[5].split('=')[1] });\r\n        var phone = await api.post(\"/cryptography\", { text: orderstring[6].split('=')[1] });\r\n        var deliveryaddress = await api.post(\"/cryptography\", { text: orderstring[7].split('=')[1] });\r\n        var observation = \"\";\r\n        if (orderstring[8] !== undefined){\r\n            observation = await api.post(\"/cryptography\", { text: orderstring[8].split('=')[1] });\r\n        }        \r\n        \r\n        const publicKey = cryptography.getPrivateAndPublicKeyFromPassphrase(passphrase).publicKey;\r\n\r\n        var clientData = cryptography.encryptMessageWithPassphrase(\r\n            orderstring[5].split('=')[1].concat(' ***Field*** ')\r\n            .concat(orderstring[6].split('=')[1]).concat(' ***Field*** ')\r\n            .concat(orderstring[7].split('=')[1]).concat(' ***Field*** ')\r\n            .concat(orderstring[8].split('=')[1]),\r\n            passphrase,\r\n            publicKey\r\n            );                            \r\n\r\n        const networkIdentifier = cryptography.getNetworkIdentifier(\r\n            \"23ce0366ef0a14a91e5fd4b1591fc880ffbef9d988ff8bebf8f3666b0c09597d\",\r\n            \"Lisk\",\r\n        );        \r\n\r\n        var encryptedclient= cryptography.encryptMessageWithPassphrase(passphrase, passphrase, orderstring[9].split('=')[1]);\r\n\r\n        let txFood = new FoodRequest({\r\n            asset: {\r\n                name: orderstring[2].split('=')[1],\r\n                description: orderstring[2].split('=')[1],\r\n                username: username.data.response,\r\n                phone: phone.data.response,\r\n                deliveryaddress: deliveryaddress.data.response,\r\n                foodType: orderstring[3].split('=')[1],\r\n                observation: observation.data !== undefined ? observation.data.response : \"\",\r\n                clientData: clientData.encryptedMessage,\r\n                clientNonce: clientData.nonce,\r\n                amount: orderstring[1].split('=')[1].toString(),\r\n                recipientId: orderstring[0].split('=')[1], //restaurant lisk address\r\n                key: encryptedclient.encryptedMessage,\r\n                keynonce: encryptedclient.nonce,\r\n                clientpublickey: cryptography.getAddressAndPublicKeyFromPassphrase(passphrase).publicKey\r\n            },                \r\n            timestamp: transaction.utils.getTimeFromBlockchainEpoch(new Date()),\r\n            networkIdentifier: networkIdentifier\r\n        });             \r\n\r\n        //txFood.sign(passphrase);                \r\n\r\n        await onSubmit({         \r\n            txFood            \r\n        });\r\n        \r\n        setPassphrase('');        \r\n    }    \r\n\r\n    return (\r\n        <div id=\"app\">\r\n            <div id=\"content\" align=\"center\">                \r\n                <form onSubmit={handleSubmit}>                                  \r\n                    <div>\r\n                        <label>Your Lisk Passphrase</label>\r\n                    </div>\r\n                    <div>\r\n                        <input type=\"password\" id=\"passphrase\" name=\"passphrase\" required onChange={e=> setPassphrase(e.target.value)}/>\r\n                    </div>\r\n                    <div>\r\n                        <label>copy this passphrase and test above if desired: creek own stem final gate scrub live shallow stage host concert they</label>\r\n                    </div>\r\n                    <div>\r\n                        <button type=\"submit\">Order</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormPayment;\r\n"]},"metadata":{},"sourceType":"module"}