{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nconst _0_transfer_transaction_1 = require(\"./0_transfer_transaction\");\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\");\n\nconst validateInputs = ({\n  amount,\n  recipientId,\n  recipientPublicKey,\n  data\n}) => {\n  if (!utils_1.validateTransferAmount(amount)) {\n    throw new Error('Amount must be a valid number in string format.');\n  }\n\n  if (!recipientId && !recipientPublicKey) {\n    throw new Error('Either recipientId or recipientPublicKey must be provided.');\n  }\n\n  if (typeof recipientId !== 'undefined') {\n    utils_1.validateAddress(recipientId);\n  }\n\n  if (typeof recipientPublicKey !== 'undefined') {\n    utils_1.validatePublicKey(recipientPublicKey);\n  }\n\n  if (recipientId && recipientPublicKey && recipientId !== lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)) {\n    throw new Error('recipientId does not match recipientPublicKey.');\n  }\n\n  if (data && data.length > 0) {\n    if (typeof data !== 'string') {\n      throw new Error('Invalid encoding in transaction data. Data must be utf-8 encoded string.');\n    }\n\n    if (data.length > constants_1.BYTESIZES.DATA) {\n      throw new Error('Transaction data field cannot exceed 64 bytes.');\n    }\n  }\n};\n\nexports.transfer = inputs => {\n  validateInputs(inputs);\n  const {\n    data,\n    amount,\n    recipientPublicKey,\n    passphrase,\n    secondPassphrase\n  } = inputs;\n  const recipientIdFromPublicKey = recipientPublicKey ? lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey) : undefined;\n  const recipientId = inputs.recipientId ? inputs.recipientId : recipientIdFromPublicKey;\n  const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), {\n    asset: data ? {\n      data\n    } : {},\n    amount,\n    fee: constants_1.TRANSFER_FEE.toString(),\n    recipientId: recipientId,\n    recipientPublicKey,\n    type: 0\n  });\n\n  if (!passphrase) {\n    return transaction;\n  }\n\n  const transactionWithSenderInfo = Object.assign({}, transaction, {\n    recipientId: recipientId,\n    senderId: transaction.senderId,\n    senderPublicKey: transaction.senderPublicKey\n  });\n  const transferTransaction = new _0_transfer_transaction_1.TransferTransaction(transactionWithSenderInfo);\n  transferTransaction.sign(passphrase, secondPassphrase);\n  return transferTransaction.toJSON();\n};","map":{"version":3,"sources":["../src/0_transfer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\r\nconst _0_transfer_transaction_1 = require(\"./0_transfer_transaction\");\r\nconst constants_1 = require(\"./constants\");\r\nconst utils_1 = require(\"./utils\");\r\nconst validateInputs = ({ amount, recipientId, recipientPublicKey, data, }) => {\r\n    if (!utils_1.validateTransferAmount(amount)) {\r\n        throw new Error('Amount must be a valid number in string format.');\r\n    }\r\n    if (!recipientId && !recipientPublicKey) {\r\n        throw new Error('Either recipientId or recipientPublicKey must be provided.');\r\n    }\r\n    if (typeof recipientId !== 'undefined') {\r\n        utils_1.validateAddress(recipientId);\r\n    }\r\n    if (typeof recipientPublicKey !== 'undefined') {\r\n        utils_1.validatePublicKey(recipientPublicKey);\r\n    }\r\n    if (recipientId &&\r\n        recipientPublicKey &&\r\n        recipientId !== lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)) {\r\n        throw new Error('recipientId does not match recipientPublicKey.');\r\n    }\r\n    if (data && data.length > 0) {\r\n        if (typeof data !== 'string') {\r\n            throw new Error('Invalid encoding in transaction data. Data must be utf-8 encoded string.');\r\n        }\r\n        if (data.length > constants_1.BYTESIZES.DATA) {\r\n            throw new Error('Transaction data field cannot exceed 64 bytes.');\r\n        }\r\n    }\r\n};\r\nexports.transfer = (inputs) => {\r\n    validateInputs(inputs);\r\n    const { data, amount, recipientPublicKey, passphrase, secondPassphrase, } = inputs;\r\n    const recipientIdFromPublicKey = recipientPublicKey\r\n        ? lisk_cryptography_1.getAddressFromPublicKey(recipientPublicKey)\r\n        : undefined;\r\n    const recipientId = inputs.recipientId\r\n        ? inputs.recipientId\r\n        : recipientIdFromPublicKey;\r\n    const transaction = Object.assign({}, utils_1.createBaseTransaction(inputs), { asset: data ? { data } : {}, amount, fee: constants_1.TRANSFER_FEE.toString(), recipientId: recipientId, recipientPublicKey, type: 0 });\r\n    if (!passphrase) {\r\n        return transaction;\r\n    }\r\n    const transactionWithSenderInfo = Object.assign({}, transaction, { recipientId: recipientId, senderId: transaction.senderId, senderPublicKey: transaction.senderPublicKey });\r\n    const transferTransaction = new _0_transfer_transaction_1.TransferTransaction(transactionWithSenderInfo);\r\n    transferTransaction.sign(passphrase, secondPassphrase);\r\n    return transferTransaction.toJSON();\r\n};\r\n//# sourceMappingURL=0_transfer.js.map"]},"metadata":{},"sourceType":"script"}